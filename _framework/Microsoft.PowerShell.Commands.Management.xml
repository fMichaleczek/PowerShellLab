<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.Commands.Management</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1">
            <summary>
            Base class for all child jobs that wrap CIM operations.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1.Location">
            <summary>
            Indicates a location where this job is running.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1.StatusMessage">
            <summary>
            Status message associated with the Job.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1.HasMoreData">
            <summary>
            Indicates if job has more data available.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1.StopJob">
            <summary>
            Stops this job.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CimJobException">
            <summary>
            Represents an error during execution of a CIM job.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Cmdletization.Cim.CimJobException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Cmdletization.Cim.CimJobException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Cmdletization.Cim.CimJobException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Cmdletization.Cim.CimJobException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.ErrorRecord">
            <summary>
            <see cref="P:Microsoft.PowerShell.Cmdletization.Cim.CimJobException.ErrorRecord"/> which provides additional information about the error.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CimOperationOptionsHelper">
            <summary>
            CimQuery supports building of queries against CIM object model.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CimQuery">
            <summary>
            CimQuery supports building of queries against CIM object model.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.FilterByProperty(System.String,System.Collections.IEnumerable,System.Boolean,Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch)">
            <summary>
            Modifies the query, so that it only returns objects with a given property value.
            </summary>
            <param name="propertyName">Property name to query on.</param>
            <param name="allowedPropertyValues">Property values to accept in the query.</param>
            <param name="wildcardsEnabled">
              <c>true</c> if <paramref name="allowedPropertyValues"/> should be treated as a <see cref="T:System.String"/> containing a wildcard pattern;
              <c>false otherwise</c>
            </param>
            <param name="behaviorOnNoMatch">
            Describes how to handle filters that didn't match any objects
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.ExcludeByProperty(System.String,System.Collections.IEnumerable,System.Boolean,Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch)">
            <summary>
            Modifies the query, so that it does not return objects with a given property value.
            </summary>
            <param name="propertyName">Property name to query on.</param>
            <param name="excludedPropertyValues">Property values to reject in the query.</param>
            <param name="wildcardsEnabled">
            <c>true</c> if <paramref name="excludedPropertyValues"/> should be treated as a <see cref="T:System.String"/> containing a wildcard pattern;
            <c>false otherwise</c>
            </param>
            <param name="behaviorOnNoMatch">
            Describes how to handle filters that didn't match any objects
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.FilterByMinPropertyValue(System.String,System.Object,Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch)">
            <summary>
            Modifies the query, so that it returns only objects that have a property value greater than or equal to a <paramref name="minPropertyValue"/> threshold.
            </summary>
            <param name="propertyName">Property name to query on.</param>
            <param name="minPropertyValue">Minimum property value.</param>
            <param name="behaviorOnNoMatch">
            Describes how to handle filters that didn't match any objects
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.FilterByMaxPropertyValue(System.String,System.Object,Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch)">
            <summary>
            Modifies the query, so that it returns only objects that have a property value less than or equal to a <paramref name="maxPropertyValue"/> threshold.
            </summary>
            <param name="propertyName">Property name to query on.</param>
            <param name="maxPropertyValue">Maximum property value.</param>
            <param name="behaviorOnNoMatch">
            Describes how to handle filters that didn't match any objects
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.FilterByAssociatedInstance(System.Object,System.String,System.String,System.String,Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch)">
            <summary>
            Modifies the query, so that it returns only objects associated with <paramref name="associatedInstance"/>
            </summary>
            <param name="associatedInstance">Object that query results have to be associated with.</param>
            <param name="associationName">Name of the association.</param>
            <param name="resultRole">Name of the role that <paramref name="associatedInstance"/> has in the association.</param>
            <param name="sourceRole">Name of the role that query results have in the association.</param>
            <param name="behaviorOnNoMatch">
            Describes how to handle filters that didn't match any objects
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.AddQueryOption(System.String,System.Object)">
            <summary>
            Sets a query option.
            </summary>
            <param name="optionName"></param>
            <param name="optionValue"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimQuery.ToString">
            <summary>
            Returns a string that represents the current CIM query.
            </summary>
            <returns>A string that represents the current CIM query.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter">
            <summary>
            CIM-specific ObjectModelWrapper.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.CimSession">
            <summary>
            CimSession to operate on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.ThrottleLimit">
            <summary>
            Maximum number of remote connections that can remain active at any given time.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.GetQueryBuilder">
            <summary>
            Creates a query builder for CIM OM.
            </summary>
            <returns>Query builder for CIM OM.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.GenerateParentJobName">
            <summary>
            Returns a new job name to use for the parent job that handles throttling of the child jobs that actually perform querying and method invocation.
            </summary>
            <returns>Job name.</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.DefaultSession">
            <summary>
            Returns default sessions to use when the user doesn't specify the -Session cmdlet parameter.
            </summary>
            <returns>Default sessions to use when the user doesn't specify the -Session cmdlet parameter.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.CreateQueryJob(Microsoft.Management.Infrastructure.CimSession,Microsoft.PowerShell.Cmdletization.QueryBuilder)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that performs a query against the wrapped object model.
            </summary>
            <param name="session">Remote session to query.</param>
            <param name="baseQuery">Query parameters.</param>
            <returns><see cref="T:System.Management.Automation.Job"/> object that performs a query against the wrapped object model.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.CreateInstanceMethodInvocationJob(Microsoft.Management.Infrastructure.CimSession,Microsoft.Management.Infrastructure.CimInstance,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that invokes an instance method in the wrapped object model.
            </summary>
            <param name="session">Remote session to invoke the method in.</param>
            <param name="objectInstance">The object on which to invoke the method.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
            <param name="passThru"><c>true</c> if successful method invocations should emit downstream the <paramref name="objectInstance"/> being operated on.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter.CreateStaticMethodInvocationJob(Microsoft.Management.Infrastructure.CimSession,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that invokes a static method
            (of the class named by <see cref="P:Microsoft.PowerShell.Cmdletization.CmdletAdapter`1.ClassName"/>)
            in the wrapped object model.
            </summary>
            <param name="session">Remote session to invoke the method in.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.ClientSideQuery">
            <summary>
            Client-side filtering for
            1) filtering that cannot be translated into a server-side query (i.e. when CimQuery.WildcardToWqlLikeOperand reports that it cannot translate into WQL)
            2) detecting if all expected results have been received and giving friendly user errors otherwise (i.e. could not find process with name='foo';  details in Windows 8 Bugs: #60926)
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.CreateInstanceJob">
            <summary>
            Job wrapping invocation of a CreateInstance intrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.DeleteInstanceJob">
            <summary>
            Job wrapping invocation of a DeleteInstance intrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.EnumerateAssociatedInstancesJob">
            <summary>
            Job that handles executing a WQL (in the future CQL?) query on a remote CIM server.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.ExtrinsicMethodInvocationJob">
            <summary>
            Job wrapping invocation of an extrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.InstanceMethodInvocationJob">
            <summary>
            Job wrapping invocation of an extrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.MethodInvocationJobBase`1">
            <summary>
            Job wrapping invocation of an extrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.ModifyInstanceJob">
            <summary>
            Job wrapping invocation of a ModifyInstance intrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.PropertySettingJob`1">
            <summary>
            Job wrapping invocation of a CreateInstance or ModifyInstance intrinsic CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.QueryInstancesJob">
            <summary>
            Job that handles executing a WQL (in the future CQL?) query on a remote CIM server.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.QueryJobBase">
            <summary>
            Base job for queries.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.StaticMethodInvocationJob">
            <summary>
            Job wrapping invocation of a static CIM method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.Cim.TerminatingErrorTracker">
            <summary>
            Tracks (per-session) terminating errors in a given cmdlet invocation.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2">
            <summary>
            Provides common code for processing session-based object models.  The common code
            Session, ThrottleLimit, AsJob parameters and delegates creation of jobs to derived classes.
            </summary>
            <typeparam name="TObjectInstance">Type that represents instances of objects from the wrapped object model</typeparam>
            <typeparam name="TSession">Type representing remote sessions</typeparam>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.Dispose">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.Session">
            <summary>
            Session to operate on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.AsJob">
            <summary>
            Whether to wrap and emit the whole operation as a background job.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.ThrottleLimit">
            <summary>
            Maximum number of remote connections that can remain active at any given time.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.CreateQueryJob(`1,Microsoft.PowerShell.Cmdletization.QueryBuilder)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that performs a query against the wrapped object model.
            </summary>
            <param name="session">Remote session to query.</param>
            <param name="query">Query parameters.</param>
            <remarks>
            <para>
            This method shouldn't do any processing or interact with the remote session.
            Doing so will interfere with ThrottleLimit functionality.
            </para>
            <para>
            <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) will block to support throttling and flow-control.
            Implementations of Job instance returned from this method should make sure that implementation-specific flow-control mechanism pauses further processing,
            until calls from <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) return.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.CreateInstanceMethodInvocationJob(`1,`0,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that invokes an instance method in the wrapped object model.
            </summary>
            <param name="session">Remote session to invoke the method in.</param>
            <param name="objectInstance">The object on which to invoke the method.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
            <param name="passThru"><c>true</c> if successful method invocations should emit downstream the <paramref name="objectInstance"/> being operated on.</param>
            <remarks>
            <para>
            This method shouldn't do any processing or interact with the remote session.
            Doing so will interfere with ThrottleLimit functionality.
            </para>
            <para>
            <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) will block to support throttling and flow-control.
            Implementations of Job instance returned from this method should make sure that implementation-specific flow-control mechanism pauses further processing,
            until calls from <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) return.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.CreateStaticMethodInvocationJob(`1,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo)">
            <summary>
            Creates a <see cref="T:System.Management.Automation.Job"/> object that invokes a static method in the wrapped object model.
            </summary>
            <param name="session">Remote session to invoke the method in.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
            <remarks>
            <para>
            This method shouldn't do any processing or interact with the remote session.
            Doing so will interfere with ThrottleLimit functionality.
            </para>
            <para>
            <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) will block to support throttling and flow-control.
            Implementations of Job instance returned from this method should make sure that implementation-specific flow-control mechanism pauses further processing,
            until calls from <see cref="M:System.Management.Automation.Job.WriteObject(System.Object)" /> (and other methods returning job results) return.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.DefaultSession">
            <summary>
            Returns default sessions to use when the user doesn't specify the -Session cmdlet parameter.
            </summary>
            <returns>Default sessions to use when the user doesn't specify the -Session cmdlet parameter.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.GenerateParentJobName">
            <summary>
            A new job name to use for the parent job that handles throttling of the child jobs that actually perform querying and method invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.ProcessRecord(Microsoft.PowerShell.Cmdletization.QueryBuilder)">
            <summary>
            Queries for object instances in the object model.
            </summary>
            <param name="query">Query parameters.</param>
            <returns>A lazy evaluated collection of object instances.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.ProcessRecord(Microsoft.PowerShell.Cmdletization.QueryBuilder,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo,System.Boolean)">
            <summary>
            Queries for instance and invokes an instance method.
            </summary>
            <param name="query">Query parameters.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
            <param name="passThru"><c>true</c> if successful method invocations should emit downstream the object instance being operated on.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.ProcessRecord(`0,Microsoft.PowerShell.Cmdletization.MethodInvocationInfo,System.Boolean)">
            <summary>
            Invokes an instance method in the object model.
            </summary>
            <param name="objectInstance">The object on which to invoke the method.</param>
            <param name="methodInvocationInfo">Method invocation details.</param>
            <param name="passThru"><c>true</c> if successful method invocations should emit downstream the <paramref name="objectInstance"/> being operated on.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.ProcessRecord(Microsoft.PowerShell.Cmdletization.MethodInvocationInfo)">
            <summary>
            Invokes a static method in the object model.
            </summary>
            <param name="methodInvocationInfo">Method invocation details.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.BeginProcessing">
            <summary>
            Performs initialization of cmdlet execution.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.EndProcessing">
            <summary>
            Performs cleanup after cmdlet execution.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2.StopProcessing">
            <summary>
            Stops the parent job when called.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimSensitiveValueConverter.SensitiveString.Dispose">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimSensitiveValueConverter.SensitiveString.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimSensitiveValueConverter.Dispose">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimSensitiveValueConverter.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimValueConverter.ConvertFromDotNetToCim(System.Object)">
            <exception cref="T:System.Management.Automation.PSInvalidCastException">The only kind of exception this method can throw.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimValueConverter.ConvertFromCimToDotNet(System.Object,System.Type)">
            <exception cref="T:System.Management.Automation.PSInvalidCastException">The only kind of exception this method can throw.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Cim.CimValueConverter.GetConvertibleCimType(System.Type)">
            <summary>
            Returns a type of CIM representation if conversion from/to CIM can be done purely with LanguagePrimitives.ConvertTo.
            </summary>
            <param name="dotNetType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.AddContentCommand">
            <summary>
            A command that appends the specified content to the item at the specified path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddContentCommand.SeekContentPosition(System.Collections.Generic.List{Microsoft.PowerShell.Commands.ContentCommandBase.ContentHolder})">
            <summary>
            Seeks to the end of the writer stream in each of the writers in the
            content holders.
            </summary>
            <param name="contentHolders">
            The content holders that contain the writers to be moved.
            </param>
            <exception cref="T:System.Management.Automation.ProviderInvocationException">
            If calling Seek on the content writer throws an exception.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddContentCommand.CallShouldProcess(System.String)">
            <summary>
            Makes the call to ShouldProcess with appropriate action and target strings.
            </summary>
            <param name="path">
            The path to the item on which the content will be added.
            </param>
            <returns>
            True if the action should continue or false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CIMHelper.WqlQueryAll(System.String)">
            <summary>
            Create a WQL query string to retrieve all properties from
            the specified WMI class.
            </summary>
            <param name="from">A string containing the WMI class name.</param>
            <returns>
            A string containing the WQL query string
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CIMHelper.GetFirst``1(Microsoft.Management.Infrastructure.CimSession,System.String,System.String)">
            <summary>
            Retrieve a new object of type T, whose properties and fields are
            populated from an instance of the named WMI class. If the CIM
            query results in multiple instances, only the first instance is
            returned.
            </summary>
            <typeparam name="T">
            The type of the object to be created. Must be a default-constructable
            reference type.
            </typeparam>
            <param name="session">
            The CIM session to be queried.
            </param>
            <param name="nameSpace">
            A string containing the namespace to run the query against
            </param>
            <param name="wmiClassName">
            A string containing the name of the WMI class from which to populate
            the resultant object.
            </param>
            <returns>
            A new object of type T if successful, null otherwise.
            </returns>
            <remarks>
            This method matches property and field names of type T with identically
            named properties in the WMI class instance. The WMI property is converted
            to the type of T's property or field.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CIMHelper.GetAll``1(Microsoft.Management.Infrastructure.CimSession,System.String,System.String)">
            <summary>
            Retrieve an array of new objects of type T, whose properties and fields are
            populated from an instance of the specified WMI class on the specified CIM
            session.
            </summary>
            <typeparam name="T">
            The type of the object to be created. Must be a default-constructable
            reference type.
            </typeparam>
            <param name="session">
            The CIM session to be queried.
            </param>
            <param name="nameSpace">
            A string containing the namespace to run the query against
            </param>
            <param name="wmiClassName">
            A string containing the name of the WMI class from which to populate
            the resultant array elements.
            </param>
            <returns>
            An array of new objects of type T if successful, null otherwise.
            </returns>
            <remarks>
            This method matches property and field names of type T with identically
            named properties in the WMI class instance. The WMI property is converted
            to the type of T's property or field.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CIMHelper.GetAll``1(Microsoft.Management.Infrastructure.CimSession,System.String)">
            <summary>
            Retrieve an array of new objects of type T, whose properties and fields are
            populated from an instance of the specified WMI class on the specified CIM
            session.
            </summary>
            <typeparam name="T">
            The type of the object to be created. Must be a default-constructable
            reference type.
            </typeparam>
            <param name="session">
            The CIM session to be queried.
            </param>
            <param name="wmiClassName">
            A string containing the name of the WMI class from which to populate
            the resultant array elements.
            </param>
            <returns>
            An array of new objects of type T if successful, null otherwise.
            </returns>
            <remarks>
            This method matches property and field names of type T with identically
            named properties in the WMI class instance. The WMI property is converted
            to the type of T's property or field.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CIMHelper.EscapePath(System.String)">
            <summary>
            Escape any backslash (\) characters in a path with an additional
            backslash, allowing the path to be used within a WMI query.
            </summary>
            <param name="path">
            A string that may contain backslash characters.
            </param>
            <returns>
            A new string in which any backslash characters have been "escaped"
            by prefacing then with an additional backslash
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ClearContentCommand">
            <summary>
            A command that appends the specified content to the item at the specified path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearContentCommand.ProcessRecord">
            <summary>
            Clears the contents from the item at the specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearContentCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearContentCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ClearItemPropertyCommand">
            <summary>
            A command to clear the value of a property of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemPropertyCommand.Name">
            <summary>
            The properties to clear from the item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ClearItemPropertyCommand._property">
            <summary>
            The properties to be cleared.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearItemPropertyCommand.ProcessRecord">
            <summary>
            Clears the properties of an item at the specified path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.JoinPathCommand">
            <summary>
            A command that adds the parent and child parts of a path together
            with the appropriate path separator.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.JoinPathCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.JoinPathCommand.ChildPath">
            <summary>
            Gets or sets the childPath parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.JoinPathCommand.AdditionalChildPath">
            <summary>
            Gets or sets additional childPaths to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.JoinPathCommand.Resolve">
            <summary>
            Determines if the path should be resolved after being joined.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JoinPathCommand.ProcessRecord">
            <summary>
            Parses the specified path and returns the portion determined by the
            boolean parameters.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RestartComputerCommand">
            <summary>
            Cmdlet to restart computer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RestartComputerCommand.BeginProcessing">
            <summary>
            BeginProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StopComputerCommand">
            <summary>
            Cmdlet to stop computer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopComputerCommand.BeginProcessing">
            <summary>
            BeginProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CommandLineCmdletBase">
            <summary>
            A base class for cmdlets that can run shell commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommandLineCmdletBase.Dispose">
            <summary>
            Dispose Method.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommandLineCmdletBase.StopProcessing">
            <summary>
            To implement ^C.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommandLineCmdletBase.RunCommand(System.String,System.String)">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ContentCommandBase">
            <summary>
            The base class for the */content commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ContentCommandBase.contentStreams">
            <summary>
            An array of content holder objects that contain the path information
            and content readers/writers for the item represented by the path information.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.WriteContentObject(System.Object,System.Int64,System.Management.Automation.PathInfo,System.Management.Automation.CmdletProviderContext)">
            <summary>
            Wraps the content into a PSObject and adds context information as notes.
            </summary>
            <param name="content">
            The content being written out.
            </param>
            <param name="readCount">
            The number of blocks that have been read so far.
            </param>
            <param name="pathInfo">
            The context the content was retrieved from.
            </param>
            <param name="context">
            The context the command is being run under.
            </param>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ContentCommandBase._currentContentItem">
            <summary>
            A cache of the notes that get added to the content items as they are written
            to the pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache">
            <summary>
            A class that stores a cache of the notes that get attached to content items
            as they get written to the pipeline. An instance of this cache class is
            only valid for a single path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.#ctor(System.Management.Automation.PathInfo)">
            <summary>
            Constructs a content cache item.
            </summary>
            <param name="pathInfo">
            The path information for which the cache will be bound.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.PathInfo">
            <summary>
            The path information for the cached item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.PSPath">
            <summary>
            The cached PSPath of the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.ParentPath">
            <summary>
            The cached parent path of the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.Drive">
            <summary>
            The cached drive for the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.Provider">
            <summary>
            The cached provider of the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.ChildName">
            <summary>
            The cached child name of the item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.ContentPathsCache.AttachNotes(System.Management.Automation.PSObject)">
            <summary>
            Attaches the cached notes to the specified PSObject.
            </summary>
            <param name="content">
            The PSObject to attached the cached notes to.
            </param>
            <returns>
            The PSObject that was passed in with the cached notes added.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ContentCommandBase.ContentHolder">
            <summary>
            A struct to hold the path information and the content readers/writers
            for an item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.CloseContent(System.Collections.Generic.List{Microsoft.PowerShell.Commands.ContentCommandBase.ContentHolder},System.Boolean)">
            <summary>
            Closes the content readers and writers in the content holder array.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.CallShouldProcess(System.String)">
            <summary>
            Overridden by derived classes to support ShouldProcess with
            the appropriate information.
            </summary>
            <param name="path">
            The path to the item from which the content writer will be
            retrieved.
            </param>
            <returns>
            True if the action should continue or false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.GetContentReaders(System.String[],System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the IContentReaders for the current path(s)
            </summary>
            <returns>
            An array of IContentReaders for the current path(s)
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.ResolvePaths(System.String[],System.Boolean,System.Boolean,System.Management.Automation.CmdletProviderContext)">
            <summary>
            Resolves the specified paths to PathInfo objects.
            </summary>
            <param name="pathsToResolve">
            The paths to be resolved. Each path may contain glob characters.
            </param>
            <param name="allowNonexistingPaths">
            If true, resolves the path even if it doesn't exist.
            </param>
            <param name="allowEmptyResult">
            If true, allows a wildcard that returns no results.
            </param>
            <param name="currentCommandContext">
            The context under which the command is running.
            </param>
            <returns>
            An array of PathInfo objects that are the resolved paths for the
            <paramref name="pathsToResolve"/> parameter.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.Dispose">
            <summary>
            Dispose method in IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ContentCommandBase.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertPathCommand">
            <summary>
            A command to convert a drive qualified or provider qualified path to
            a provider internal path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertPathCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertPathCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertPathCommand._paths">
            <summary>
            The path(s) to the item(s) to convert.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertPathCommand.ProcessRecord">
            <summary>
            Converts a drive qualified or provider qualified path to a provider
            internal path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CopyItemPropertyCommand">
            <summary>
            A command to copy a property on an item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.Name">
            <summary>
            The name of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.Destination">
            <summary>
            The path to the destination item to copy the property to.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CopyItemPropertyCommand.ProcessRecord">
            <summary>
            Copies the property from one item to another.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetChildItemCommand">
            <summary>
            The get-childitem command class.
            This command lists the contents of a container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetChildItemCommand.childrenSet">
            <summary>
            The string declaration for the Items parameter set in this command.
            </summary>
            <remarks>
            The "Items" parameter set includes the following parameters:
                -filter
                -recurse
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Path">
            <summary>
            Gets or sets the path for the operation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Recurse">
            <summary>
            Gets or sets the recurse switch.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Depth">
            <summary>
            Gets or sets max depth of recursion; automatically sets Recurse parameter;
            Value '0' will show only contents of container specified by -Path (same result as running 'Get-ChildItem' without '-Recurse');
            Value '1' will show 1 level deep, etc...;
            Default is uint.MaxValue - it performs full recursion (this parameter has no effect).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetChildItemCommand.Name">
            <summary>
            Gets or sets the names switch.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetChildItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetChildItemCommand._paths">
            <summary>
            The path for the get-location operation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetChildItemCommand._recurse">
            <summary>
            Determines if the command should do recursion.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetChildItemCommand._depth">
            <summary>
            Limits the depth of recursion; used with Recurse parameter;
            Value '0' will show only contents of container specified by -Path (same result as running 'Get-ChildItem' without '-Recurse');
            Value '1' will show 1 level deep, etc...;
            Default is uint.MaxValue - it performs full recursion (this parameter has no effect).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetChildItemCommand._childNames">
            <summary>
            The flag that specifies whether to retrieve the child names or the child items.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord">
            <summary>
            The main execution method for the get-childitem command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetClipboardCommand">
            <summary>
            Defines the implementation of the 'Get-Clipboard' cmdlet.
            This cmdlet get the content from system clipboard.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetClipboardCommand.Raw">
            <summary>
            Property that sets raw parameter. This will allow clipboard return text or file list as one string.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetClipboardCommand.BeginProcessing">
            <summary>
            This method implements the ProcessRecord method for Get-Clipboard command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetClipboardCommand.GetClipboardContentAsText">
            <summary>
            Returns the clipboard content as text format.
            </summary>
            <returns>Array of strings representing content from clipboard.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetContentCommand">
            <summary>
            A command to get the content of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetContentCommand.ReadCount">
            <summary>
            The number of content items to retrieve per block.
            By default this value is 1 which means read one block
            at a time.  To read all blocks at once, set this value
            to a negative number.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetContentCommand.TotalCount">
            <summary>
            The number of content items to retrieve. By default this
            value is -1 which means read all the content.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetContentCommand.Tail">
            <summary>
            The number of content items to retrieve from the back of the file.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetContentCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetContentCommand._totalCount">
            <summary>
            The number of content items to retrieve.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetContentCommand.ProcessRecord">
            <summary>
            Gets the content of an item at the specified path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetContentCommand.ScanForwardsForTail(Microsoft.PowerShell.Commands.ContentCommandBase.ContentHolder,System.Management.Automation.CmdletProviderContext)">
            <summary>
            Scan forwards to get the tail content.
            </summary>
            <param name="holder"></param>
            <param name="currentContext"></param>
            <returns>
            true if no error occured
            false if there was an error
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetContentCommand.SeekPositionForTail(System.Management.Automation.Provider.IContentReader)">
            <summary>
            Seek position to the right place.
            </summary>
            <param name="reader">
            reader should be able to be casted to FileSystemContentReader
            </param>
            <returns>
            true if the stream pointer is moved to the right place
            false if we cannot seek
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetContentCommand.EndProcessing">
            <summary>
            Be sure to clean up.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetItemPropertyCommand">
            <summary>
            A command to get the property of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyCommand.Name">
            <summary>
            The properties to retrieve from the item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetItemPropertyCommand._property">
            <summary>
            The properties to be retrieved.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemPropertyCommand.ProcessRecord">
            <summary>
            Gets the properties of an item at the specified path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand">
            <summary>
            A command to get the property value of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand.Name">
            <summary>
            The properties to retrieve from the item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand._property">
            <summary>
            The properties to be retrieved.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemPropertyValueCommand.ProcessRecord">
            <summary>
            Gets the values of the properties of an item at the specified path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MoveItemPropertyCommand">
            <summary>
            A command to move a property on an item to another item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.Name">
            <summary>
            The name of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.Destination">
            <summary>
            The path to the destination item to copy the property to.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MoveItemPropertyCommand._property">
            <summary>
            The property to be created.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MoveItemPropertyCommand.ProcessRecord">
            <summary>
            Creates the property on the item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CoreCommandBase">
            <summary>
            The base command for the core commands.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CoreCommandBase.tracer">
            <summary>
            An instance of the PSTraceSource class used for trace output
            using "NavigationCommands" as the category.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.CmdletProviderContext">
            <summary>
            The context for the command that is passed to the core command providers.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CoreCommandBase.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.ProviderSupportsShouldProcess">
            <summary>
            Called by the base implementation that checks the SupportShouldProcess provider
            capability. This virtual method gives the
            derived cmdlet a chance query the CmdletProvider capabilities to determine
            if the provider supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CoreCommandBase.DoesProviderSupportShouldProcess(System.String[])">
            <summary>
            A helper for derived classes to call to determine if the paths specified
            are for a provider that supports ShouldProcess.
            </summary>
            <param name="paths">
            The paths to check to see if the providers support ShouldProcess.
            </param>
            <returns>
            If the paths are to different providers, and any don't support
            ShouldProcess, then the return value is false. If they all
            support ShouldProcess then the return value is true.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.RetrievedDynamicParameters">
            <summary>
            The dynamic parameters which have already been retrieved from the provider
            and bound by the command processor.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CoreCommandBase._dynamicParameters">
            <summary>
            The dynamic parameters for the command. They are retrieved using the
            GetDynamicParameters virtual method.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CoreCommandBase.StopProcessing">
            <summary>
            Stops the processing of the provider by using the
            CmdletProviderContext to tunnel the stop message to
            the provider instance.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
            <remarks>
            This is meant to be overridden by derived classes if
            they support the Filter parameter. This property is on
            the base class to simplify the creation of the CmdletProviderContext.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.Include">
            <summary>
            Gets or sets the include property.
            </summary>
            <remarks>
            This is meant to be overridden by derived classes if
            they support the Include parameter. This property is on
            the base class to simplify the creation of the CmdletProviderContext.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
            <remarks>
            This is meant to be overridden by derived classes if
            they support the Exclude parameter. This property is on
            the base class to simplify the creation of the CmdletProviderContext.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.Force">
             <summary>
             Gets or sets the force property.
             </summary>
             <remarks>
             Gives the provider guidance on how vigorous it should be about performing
             the operation. If true, the provider should do everything possible to perform
             the operation. If false, the provider should attempt the operation but allow
             even simple errors to terminate the operation.
             For example, if the user tries to copy a file to a path that already exists and
             the destination is read-only, if force is true, the provider should copy over
             the existing read-only file. If force is false, the provider should write an error.
            
             This is meant to be overridden by derived classes if
             they support the Force parameter. This property is on
             the base class to simplify the creation of the CmdletProviderContext.
             </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CoreCommandBase.GetDynamicParameters">
            <summary>
            Retrieves the dynamic parameters for the command from
            the provider.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandBase.SupportsShouldProcess">
            <summary>
            Determines if the cmdlet and CmdletProvider supports ShouldProcess.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase">
            <summary>
            The base class for core commands to extend when they require credentials
            to be passed as parameters.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase.Credential">
            <summary>
            Gets or sets the credential parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase.CmdletProviderContext">
            <summary>
            The context for the command that is passed to the core command providers.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetLocationCommand">
            <summary>
            The get-location command class.
            This command does things like list the contents of a container, get
            an item at a given path, get the current working directory, etc.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetLocationCommand.PSProvider">
            <summary>
            Gets or sets the provider from which to get the current location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetLocationCommand.PSDrive">
            <summary>
            Gets or sets the drive from which to get the current location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetLocationCommand.Stack">
            <summary>
            Gets or sets the Stack switch parameter which is used
            to disambiguate parameter sets.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetLocationCommand.StackName">
            <summary>
            Gets or sets the stack ID for the location stack that will
            be retrieved.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetLocationCommand._provider">
            <summary>
            The name of the provider from which to return the current location.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetLocationCommand._stackNames">
            <summary>
            The name of the location stack from which to return the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetLocationCommand.ProcessRecord">
            <summary>
            The main execution method for the get-location command. Depending on
            the parameter set that is specified, the command can do many things.
                -locationSet gets the current working directory as a Monad path
                -stackSet gets the directory stack of directories that have been
                          pushed by the push-location command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetLocationCommand">
            <summary>
            The core command for setting/changing location.
            This is the equivalent of cd command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetLocationCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetLocationCommand.LiteralPath">
            <summary>
            Gets or sets the path property, when bound from the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetLocationCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states output from
            the command should be placed in the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetLocationCommand.StackName">
            <summary>
            Gets or sets the StackName parameter which determines which location stack
            to use for the push. If the parameter is missing or empty the default
            location stack is used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SetLocationCommand._path">
            <summary>
            The filter used when doing a dir.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SetLocationCommand._passThrough">
            <summary>
            Determines if output should be passed through for
            set-location.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetLocationCommand.ProcessRecord">
            <summary>
            The functional part of the code that does the changing of the current
            working directory.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PushLocationCommand">
            <summary>
            The core command for setting/changing location and pushing it onto a location stack.
            This is the equivalent of the pushd command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PushLocationCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PushLocationCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PushLocationCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states output from
            the command should be placed in the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PushLocationCommand.StackName">
            <summary>
            Gets or sets the StackName parameter which determines which location stack
            to use for the push. If the parameter is missing or empty the default
            location stack is used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PushLocationCommand._path">
            <summary>
            The filter used when doing a dir.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PushLocationCommand._passThrough">
            <summary>
            Determines if output should be passed through for
            push-location.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PushLocationCommand._stackName">
            <summary>
            The ID of the stack to use for the pop.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PushLocationCommand.ProcessRecord">
            <summary>
            The functional part of the code that does the changing of the current
            working directory and pushes the container onto the stack.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PopLocationCommand">
            <summary>
            The core command for pop-location.  This is the equivalent of the popd command.
            It pops a container from the stack and sets the current location to that container.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PopLocationCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states output from
            the command should be placed in the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PopLocationCommand.StackName">
            <summary>
            Gets or sets the StackName parameter which determines which location stack
            to use for the pop. If the parameter is missing or empty the default
            location stack is used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PopLocationCommand._passThrough">
            <summary>
            Determines if output should be passed through for
            pop-location.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PopLocationCommand._stackName">
            <summary>
            The ID of the stack to use for the pop.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PopLocationCommand.ProcessRecord">
            <summary>
            Gets the top container from the location stack and sets the
            location to it.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewPSDriveCommand">
            <summary>
            Mounts a drive in the Monad namespace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.Name">
            <summary>
            Gets or sets the name of the drive.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.PSProvider">
            <summary>
            Gets or sets the provider ID.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.Root">
            <summary>
            Gets or sets the root of the drive. This path should be
            a namespace specific path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.Description">
            <summary>
            Gets or sets the description of the drive.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.Scope">
            <summary>
            Gets or sets the scope identifier for the drive being created.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewPSDriveCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the new-psdrive cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSDriveCommand.ProviderSupportsShouldProcess">
            <summary>
            New-psdrive always supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.NewPSDriveCommand._name">
            <summary>
            The name of the drive.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.NewPSDriveCommand._provider">
            <summary>
            The provider ID for the drive.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.NewPSDriveCommand._root">
            <summary>
            The namespace specific path of the root of the drive.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.NewPSDriveCommand._description">
            <summary>
            A description for the drive.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewPSDriveCommand.ProcessRecord">
            <summary>
            Adds a new drive to the Monad namespace.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase">
            <summary>
            Base class for Drive commands that need to glob drives on both the drive name
            and the provider name.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase.GetMatchingDrives(System.String,System.String[],System.String)">
            <summary>
            Globs on both the drive name and the provider name to get a list of Drives
            that match the glob filters.
            </summary>
            <param name="driveName">
            The name of the drive(s) to returned. The name can contain glob characters.
            </param>
            <param name="providerNames">
            The name of the provider(s) to return. The name can contain glob characters.
            </param>
            <param name="scope">
            The scope to get the drives from. If this parameter is null or empty all drives
            will be retrieved.
            </param>
            <returns>
            A collection of the drives that match the filters.
            </returns>
            <exception cref="T:System.Management.Automation.DriveNotFoundException"></exception>
            <exception cref="T:System.Management.Automation.ProviderNotFoundException"></exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="scope"/> is less than zero, or not
            a number and not "script", "global", "local", or "private"
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="scope"/> is less than zero or greater than the number of currently
            active scopes.
            </exception>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemovePSDriveCommand">
            <summary>
            Removes a drive that is mounted in the Monad namespace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.Name">
            <summary>
            Gets or sets the name of the drive to remove.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.LiteralName">
            <summary>
            Gets or sets the literal name parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.PSProvider">
            <summary>
            Gets or sets the name provider(s) for which the drives should be removed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.Scope">
            <summary>
            Gets or sets the scope identifier from which to remove the drive.
            If the scope is null or empty, the scope hierarchy will be searched
            starting at the current scope through all the parent scopes to the
            global scope until a drive of the given name is found to remove.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.Force">
            <summary>
            Gets or sets the force property which determines if the drive
            should be removed even if there were errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemovePSDriveCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RemovePSDriveCommand._names">
            <summary>
            The name of the drive to remove.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RemovePSDriveCommand._provider">
            <summary>
            The name of the provider(s) for which to remove all drives.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemovePSDriveCommand.ProcessRecord">
            <summary>
            Removes the specified drive from the Monad namespace using the name
            of the drive.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetPSDriveCommand">
            <summary>
            Gets a specified or listing of drives that are mounted in the Monad
            namespace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.Name">
            <summary>
            Gets or sets the drive name the user is looking for.
            </summary>
            <remarks>
            If the drive name is left empty, all drives will be
            returned. A globing or regular expression can also be
            supplied and any drive names that match the expression
            will be returned.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.LiteralName">
            <summary>
            Gets or sets the literal name parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.Scope">
            <summary>
            Gets or sets the scope parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.PSProvider">
            <summary>
            Gets or sets the provider name for the
            drives that should be retrieved.
            </summary>
            <remarks>
            If the provider is left empty, all drives will be
            returned. A globing or regular expression can also be
            supplied and any drive with providers that match the expression
            will be returned.
            </remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetPSDriveCommand._name">
            <summary>
            The name of the drive to be retrieved.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetPSDriveCommand._provider">
            <summary>
            The provider ID for the drives you want to see.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSDriveCommand.BeginProcessing">
            <summary>
            Prepare the session for the Get-PSDrive command.
            Currently, auto-loads the core modules that define drives. Ideally,
            we could discover fake PSDriveInfo objects here based on drives exported
            from modules.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSDriveCommand.ProcessRecord">
            <summary>
            Retrieves the drives specified by the parameters. If the name is empty, all drives
            will be retrieved. If the provider is specified, only drives for that provider
            will be retrieved.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetItemCommand">
            <summary>
            Gets the specified item using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.Path">
            <summary>
            Gets or sets the path to item to get.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the get-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetItemCommand._paths">
            <summary>
            The path of the item to get.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetItemCommand.ProcessRecord">
            <summary>
            Gets the specified item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewItemCommand">
            <summary>
            Creates the specified item using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.Path">
            <summary>
            Gets or sets the container path to create the item in.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.Name">
            <summary>
            Gets or sets the name of the item to create.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.ItemType">
            <summary>
            Gets or sets the type of the item to create.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.Value">
            <summary>
            Gets or sets the content of the item to create.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the new-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewItemCommand.ProcessRecord">
            <summary>
            Creates the specified item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetItemCommand">
            <summary>
            Sets the specified item using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Path">
            <summary>
            Gets or sets the path to item to set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Value">
            <summary>
            Gets or sets the value of the item to be set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.PassThru">
            <summary>
            Gets or sets the pass through property which determines
            if the object that is set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the set-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SetItemCommand._paths">
            <summary>
            The path of the item to set.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SetItemCommand._passThrough">
            <summary>
            Determines if the object being set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetItemCommand.ProcessRecord">
            <summary>
            Sets the specified item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveItemCommand">
            <summary>
            Removes the specified item using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Recurse">
            <summary>
            Gets or sets the recurse property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the remove-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RemoveItemCommand._paths">
            <summary>
            The path used when doing a delete.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RemoveItemCommand._recurse">
            <summary>
            Determines if the remove command should recurse into
            sub-containers.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveItemCommand.ProcessRecord">
            <summary>
            Removes the specified items.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MoveItemCommand">
            <summary>
            Moves an item from the specified location to the specified destination using
            the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Destination">
            <summary>
            Gets or sets the destination property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.PassThru">
            <summary>
            Gets or sets the pass through property which determines
            if the object that is set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MoveItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the move-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MoveItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MoveItemCommand._paths">
            <summary>
            The path of the item to move. It is set or retrieved via
            the Path property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MoveItemCommand._passThrough">
            <summary>
            Determines if the object being set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MoveItemCommand.ProcessRecord">
            <summary>
            Moves the specified item to the specified destination.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RenameItemCommand">
            <summary>
            Renames a specified item to a new name using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.NewName">
            <summary>
            Gets or sets the newName property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.PassThru">
            <summary>
            Gets or sets the pass through property which determines
            if the object that is set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RenameItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the rename-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RenameItemCommand._path">
            <summary>
            The path of the item to rename. It is set or retrieved via
            the Path property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RenameItemCommand._passThrough">
            <summary>
            Determines if the object being set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RenameItemCommand.ProcessRecord">
            <summary>
            Moves the specified item to the specified destination.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CopyItemCommand">
            <summary>
            Copies a specified item to a new location using the namespace providers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Destination">
            <summary>
            Gets or sets the destination property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Container">
            <summary>
            Gets or sets the container property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.Recurse">
            <summary>
            Gets or sets the recurse property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.PassThru">
            <summary>
            Gets or sets the pass through property which determines
            if the object that is set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CopyItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the copy-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CopyItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CopyItemCommand._paths">
            <summary>
            The path of the item to copy. It is set or retrieved via
            the Path property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CopyItemCommand._container">
            <summary>
            Determines if the containers should be copied with the items or not.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CopyItemCommand._recurse">
            <summary>
            Determines if the copy command should recurse into
            sub-containers.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CopyItemCommand._passThrough">
            <summary>
            Determines if the object being set should be written to the pipeline.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CopyItemCommand.ProcessRecord">
            <summary>
            Copies the specified item(s) to the specified destination.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ClearItemCommand">
            <summary>
            Clears an item at the specified location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the clear-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ClearItemCommand._paths">
            <summary>
            The path of the item to move. It is set or retrieved via
            the Path property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearItemCommand.ProcessRecord">
            <summary>
            Clears the specified item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.InvokeItemCommand">
            <summary>
            Invokes an item at the specified location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.Path">
            <summary>
            Gets or sets the path property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeItemCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the dynamic parameters for the invoke-item cmdlet.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeItemCommand.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.InvokeItemCommand._paths">
            <summary>
            The path of the item to move. It is set or retrieved via
            the Path property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeItemCommand.ProcessRecord">
            <summary>
            Invokes the specified item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetPSProviderCommand">
            <summary>
            Gets a core command provider by name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSProviderCommand.PSProvider">
            <summary>
            Gets or sets the provider that will be removed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetPSProviderCommand._provider">
            <summary>
            The string ID of the provider to remove.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSProviderCommand.ProcessRecord">
            <summary>
            Gets a provider from the core command namespace.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewItemPropertyCommand">
            <summary>
            A command to create a new property on an object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.Name">
            <summary>
            The name of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.PropertyType">
            <summary>
            The type of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.Value">
            <summary>
            The value of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewItemPropertyCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewItemPropertyCommand.ProcessRecord">
            <summary>
            Creates the property on the item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SplitPathCommand">
            <summary>
            A command to resolve MSH paths containing glob characters to
            MSH paths that match the glob strings.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.parentSet">
            <summary>
            The parameter set name to get the parent path.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.leafSet">
            <summary>
            The parameter set name to get the leaf name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.leafBaseSet">
            <summary>
            The parameter set name to get the leaf base name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.extensionSet">
            <summary>
            The parameter set name to get the extension.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.qualifierSet">
            <summary>
            The parameter set name to get the qualifier set.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.noQualifierSet">
            <summary>
            The parameter set name to get the noqualifier set.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.isAbsoluteSet">
            <summary>
            The parameter set name to get the IsAbsolute set.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SplitPathCommand.literalPathSet">
            <summary>
            The parameter set name to get the LiteralPath set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Qualifier">
            <summary>
            Determines if the qualifier should be returned.
            </summary>
            <value>
            If true the qualifier of the path will be returned.
            The qualifier is the drive or provider that is qualifying
            the MSH path.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.NoQualifier">
            <summary>
            Determines if the qualifier should be returned.
            </summary>
            <value>
            If true the qualifier of the path will be returned.
            The qualifier is the drive or provider that is qualifying
            the MSH path.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Parent">
            <summary>
            Determines if the parent path should be returned.
            </summary>
            <value>
            If true the parent of the path will be returned.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Leaf">
            <summary>
            Determines if the leaf name should be returned.
            </summary>
            <value>
            If true the leaf name of the path will be returned.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.LeafBase">
            <summary>
            Determines if the leaf base name (name without extension) should be returned.
            </summary>
            <value>
            If true the leaf base name of the path will be returned.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Extension">
            <summary>
            Determines if the extension should be returned.
            </summary>
            <value>
            If true the extension of the path will be returned.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.Resolve">
            <summary>
            Determines if the path should be resolved before being parsed.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SplitPathCommand.IsAbsolute">
            <summary>
            Determines if the path is an absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SplitPathCommand.ProcessRecord">
            <summary>
            Parses the specified path and returns the portion determined by the
            boolean parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SplitPathCommand.RemoveQualifier(System.String)">
            <summary>
            Removes either the drive or provider qualifier or both from the path.
            </summary>
            <param name="path">
            The path to strip the provider qualifier from.
            </param>
            <returns>
            The path without the qualifier.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PassThroughContentCommandBase">
            <summary>
            The base class for the */content commands that also take
            a passthrough parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PassThroughContentCommandBase.PassThru">
            <summary>
            Gets or sets the passthrough parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PassThroughContentCommandBase.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PassThroughContentCommandBase._passThrough">
            <summary>
            Determines if the content returned from the provider should
            be passed through to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PassThroughContentCommandBase.GetCurrentContext">
            <summary>
            Initializes a CmdletProviderContext instance to the current context of
            the command.
            </summary>
            <returns>
            A CmdletProviderContext instance initialized to the context of the current
            command.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase">
            <summary>
            The base class for the */property commands that also take
            a passthrough parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase.PassThru">
            <summary>
            Gets or sets the passthrough parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase._passThrough">
            <summary>
            Determines if the property returned from the provider should
            be passed through to the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase.ProviderSupportsShouldProcess">
            <summary>
            Determines if the provider for the specified path supports ShouldProcess.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase.GetCurrentContext">
            <summary>
            Initializes a CmdletProviderContext instance to the current context of
            the command.
            </summary>
            <returns>
            A CmdletProviderContext instance initialized to the context of the current
            command.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestPathType">
            <summary>
            The valid values for the -PathType parameter for test-path.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TestPathType.Any">
            <summary>
            If the item at the path exists, true will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TestPathType.Container">
            <summary>
            If the item at the path exists and is a container, true will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TestPathType.Leaf">
            <summary>
            If the item at the path exists and is not a container, true will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestPathCommand">
            <summary>
            A command to determine if an item exists at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.Filter">
            <summary>
            Gets or sets the filter property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.PathType">
            <summary>
            Gets or sets the isContainer property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestPathCommand.IsValid">
            <summary>
            Gets or sets the IsValid parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestPathCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TestPathCommand._paths">
            <summary>
            The path to the item to ping.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestPathCommand.ProcessRecord">
            <summary>
            Determines if an item at the specified path exists.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ProcessBaseCommand">
            <summary>
            This class implements the base for process commands.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchMode">
            <summary>
            The various process selection modes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchMode.All">
            <summary>
            Select all processes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchMode.ByName">
            <summary>
            Select processes matching the supplied names.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchMode.ById">
            <summary>
            Select the processes matching the id.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchMode.ByInput">
            <summary>
            Select the processes specified as input.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.myMode">
            <summary>
            The current process selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ProcessBaseCommand.processNames">
            <remarks>
            The Name parameter is declared in subclasses,
            since it is optional for GetProcess and mandatory for StopProcess.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ProcessBaseCommand.InputObject">
            <summary>
            If the input is a stream of [collections of]
            Process objects, we bypass the Name and
            Id parameters and read the Process objects
            directly.  This allows us to deal with processes which
            have wildcard characters in their name.
            </summary>
            <value>Process objects</value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.MatchingProcesses">
            <summary>
            Retrieve the list of all processes matching the Name, Id
            and InputObject parameters, sorted by Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.ProcessComparison(System.Diagnostics.Process,System.Diagnostics.Process)">
            <summary>
            Sort function to sort by Name first, then Id.
            </summary>
            <param name="x">First Process object.</param>
            <param name="y">Second Process object.</param>
            <returns>
            As string.Compare: returns less than zero if x less than y,
            greater than 0 if x greater than y, 0 if x == y.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.RetrieveMatchingProcessesByProcessName">
            <summary>
            Retrieves the list of all processes matching the Name
            parameter.
            Generates a non-terminating error for each specified
            process name which is not found even though it contains
            no wildcards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.RetrieveMatchingProcessesById">
            <summary>
            Retrieves the list of all processes matching the Id
            parameter.
            Generates a non-terminating error for each specified
            process ID which is not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.RetrieveProcessesByInput">
            <summary>
            Retrieves the list of all processes matching the InputObject
            parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ProcessBaseCommand.AllProcesses">
            <summary>
            Retrieve the master list of all processes.
            </summary>
            <value></value>
            <exception cref="T:System.Security.SecurityException">
            MSDN does not document the list of exceptions,
            but it is reasonable to expect that SecurityException is
            among them.  Errors here will terminate the cmdlet.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.AddIdempotent(System.Diagnostics.Process)">
            <summary>
            Add <paramref name="process"/> to <see cref="F:Microsoft.PowerShell.Commands.ProcessBaseCommand._matchingProcesses"/>,
            but only if it is not already on  <see cref="F:Microsoft.PowerShell.Commands.ProcessBaseCommand._matchingProcesses"/>.
            We use a Dictionary to optimize the check whether the object
            is already in the list.
            </summary>
            <param name="process">Process to add to list.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.WriteNonTerminatingError(System.Diagnostics.Process,System.Exception,System.String,System.String,System.Management.Automation.ErrorCategory)">
            <summary>
            Writes a non-terminating error.
            </summary>
            <param name="process"></param>
            <param name="innerException"></param>
            <param name="resourceId"></param>
            <param name="errorId"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.WriteNonTerminatingError(System.String,System.Int32,System.Object,System.Exception,System.String,System.String,System.Management.Automation.ErrorCategory)">
            <summary>
            Writes a non-terminating error.
            </summary>
            <param name="processName"></param>
            <param name="processId"></param>
            <param name="targetObject"></param>
            <param name="innerException"></param>
            <param name="resourceId"></param>
            <param name="errorId"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessBaseCommand.TryHasExited(System.Diagnostics.Process)">
            <summary>
            TryHasExited is a helper function used to detect if the process has aready exited or not.
            </summary>
            <param name="process">
            Process whose exit status has to be checked.
            </param>
            <returns>Tre if the process has exited or else returns false.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetProcessCommand">
            <summary>
            This class implements the get-process command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.Name">
            <summary>
            Has the list of process names on which to this command will work.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.Id">
            <summary>
            Gets/sets an array of process IDs.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.InputObject">
            <summary>
            Input is a stream of [collections of] Process objects.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.IncludeUserName">
            <summary>
            Include the UserName.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.Module">
            <summary>
             To display the modules of a process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetProcessCommand.FileVersionInfo">
            <summary>
             To display the fileversioninfo of the main module of a process.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetProcessCommand.BeginProcessing">
            <summary>
            Check the elevation mode if IncludeUserName is specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetProcessCommand.ProcessRecord">
            <summary>
            Write the process objects.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetProcessCommand.TypeNameForProcessWithUserName">
            <summary>
            New PSTypeName added to the process object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetProcessCommand.AddUserNameToProcess(System.Diagnostics.Process)">
            <summary>
            Add the 'UserName' NoteProperty to the Process object.
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetProcessCommand.RetrieveProcessUserName(System.Diagnostics.Process)">
            <summary>
            Retrieve the UserName through PInvoke.
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WaitProcessCommand">
            <summary>
            This class implements the Wait-process command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WaitProcessCommand.Id">
            <summary>
            Specifies the process IDs of the processes to be waited on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WaitProcessCommand.Name">
            <summary>
            Name of the processes to wait on for termination.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WaitProcessCommand.Timeout">
            <summary>
            If specified, wait for this number of seconds.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitProcessCommand.Dispose">
            <summary>
            Dispose method of IDisposable interface.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitProcessCommand.ProcessRecord">
            <summary>
            Gets the list of process.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitProcessCommand.EndProcessing">
            <summary>
            Wait for the process to terminate.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitProcessCommand.StopProcessing">
            <summary>
            StopProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StopProcessCommand">
            <summary>
            This class implements the stop-process command.
            </summary>
            <remarks>
            Processes will be sorted before being stopped.  PM confirms
            that this should be fine.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StopProcessCommand.Name">
            <summary>
            Has the list of process names on which to this command will work.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StopProcessCommand.Id">
            <summary>
            Gets/sets an array of process IDs.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StopProcessCommand.InputObject">
            <summary>
            Gets/sets an array of objects.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StopProcessCommand.PassThru">
            <summary>
            The updated process object should be passed down the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StopProcessCommand.Force">
            <summary>
            Specifies whether to force a process to kill
            even if it has dependent services.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopProcessCommand.ProcessRecord">
            <summary>
            Kill the processes.
            It is a non-terminating error if the Process.Kill() operation fails.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopProcessCommand.EndProcessing">
            <summary>
            Kill the current process here.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.StopProcessCommand._shouldKillCurrentProcess">
            <summary>
            Should the current powershell process to be killed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.StopProcessCommand._yesToAll">
            <summary>
            Boolean variables to display the warning using ShouldContinue.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.StopProcessCommand._noToAll">
            <summary>
            Boolean variables to display the warning using ShouldContinue.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.StopProcessCommand._currentUserName">
            <summary>
            Current windows user name.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopProcessCommand.IsProcessOwnedByCurrentUser(System.Diagnostics.Process)">
            <summary>
            Gets the owner of the process.
            </summary>
            <param name="process"></param>
            <returns>Returns the owner.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopProcessCommand.StopDependentService(System.Diagnostics.Process)">
            <summary>
            Stop the service that depends on the process and its child services.
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopProcessCommand.StopProcess(System.Diagnostics.Process)">
            <summary>
            Stops the given process throws non terminating error if can't.
            <param name="process" >Process to be stopped.</param>
            <returns>True if process stopped successfully else false.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DebugProcessCommand">
            <summary>
            This class implements the Debug-process command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugProcessCommand.Id">
            <summary>
            Specifies the process IDs of the processes to be waited on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugProcessCommand.Name">
            <summary>
            Name of the processes to wait on for termination.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DebugProcessCommand.ProcessRecord">
            <summary>
            Gets the list of process and attach the debugger to the processes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DebugProcessCommand.AttachDebuggerToProcess(System.Diagnostics.Process)">
            <summary>
            Attach debugger to the process.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DebugProcessCommand.MapReturnCodeToErrorMessage(System.Int32)">
            <summary>
            Map the return code from 'AttachDebugger' to error message.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StartProcessCommand">
            <summary>
            This class implements the Start-process command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.FilePath">
            <summary>
            Path/FileName of the process to start.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.ArgumentList">
            <summary>
            Arguments for the process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.Credential">
            <summary>
            Credentials for the process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.WorkingDirectory">
            <summary>
            Working directory of the process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.LoadUserProfile">
            <summary>
            Load user profile from registry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.NoNewWindow">
            <summary>
            Starts process in a new window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.PassThru">
            <summary>
            PassThru parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.RedirectStandardError">
            <summary>
            Redirect error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.RedirectStandardInput">
            <summary>
            Redirect input.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.RedirectStandardOutput">
            <summary>
            Redirect output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.Verb">
            <summary>
            Verb.
            </summary>
            <remarks>
            The 'Verb' parameter is only supported on Windows Desktop.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.WindowStyle">
            <summary>
            Window style of the process window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.Wait">
            <summary>
            Wait for the process to terminate.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartProcessCommand.UseNewEnvironment">
            <summary>
            Default Environment.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartProcessCommand.BeginProcessing">
            <summary>
            BeginProcessing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartProcessCommand.StopProcessing">
            <summary>
            Implements ^c, after creating a process.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartProcessCommand.Dispose">
            <summary>
            Dispose WaitHandle used to honor -Wait parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartProcessCommand.myProcess_Exited(System.Object,System.EventArgs)">
            <summary>
            When Process exits the wait handle is set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartProcessCommand.StartWithShellExecute(System.Diagnostics.ProcessStartInfo)">
            <summary>
            This method will be used only on Windows full desktop.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ProcessCommandException">
            <summary>
            Non-terminating errors occurring in the process noun commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessCommandException.#ctor">
            <summary>
            Unimplemented standard constructor.
            </summary>
            <returns>Doesn't return.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessCommandException.#ctor(System.String)">
            <summary>
            Standard constructor.
            </summary>
            <param name="message"></param>
            <returns>Constructed object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <returns>Constructed object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ProcessCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ProcessCommandException.ProcessName">
            <summary>
            Name of the process which could not be found or operated upon.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ItemPropertyCommandBase">
            <summary>
            The base class for the */property commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ItemPropertyCommandBase.Filter">
            <summary>
            Gets or sets the filter parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ItemPropertyCommandBase.Include">
            <summary>
            Gets or sets the include property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ItemPropertyCommandBase.Exclude">
            <summary>
            Gets or sets the exclude property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ItemPropertyCommandBase.paths">
            <summary>
            The path to the item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand">
            <summary>
            A command to remove a property from an item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.Name">
            <summary>
            The name of the property to create on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the provider guidance on how vigorous it should be about performing
            the operation. If true, the provider should do everything possible to perform
            the operation. If false, the provider should attempt the operation but allow
            even simple errors to terminate the operation.
            For example, if the user tries to copy a file to a path that already exists and
            the destination is read-only, if force is true, the provider should copy over
            the existing read-only file. If force is false, the provider should write an error.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand._property">
            <summary>
            The property to be created.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveItemPropertyCommand.ProcessRecord">
            <summary>
            Removes the property from the item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RenameItemPropertyCommand">
            <summary>
            A command to rename a property of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.Name">
            <summary>
            The properties to be renamed on the item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.NewName">
            <summary>
            The new name of the property on the item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.RenameItemPropertyCommand._path">
            <summary>
            The path to rename the property on.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RenameItemPropertyCommand.ProcessRecord">
            <summary>
            Renames a property on an item.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ResolvePathCommand">
            <summary>
            A command to resolve MSH paths containing glob characters to
            MSH paths that match the glob strings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ResolvePathCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ResolvePathCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ResolvePathCommand.Relative">
            <summary>
            Gets or sets the value that determines if the resolved path should
            be resolved to its relative version.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ResolvePathCommand._paths">
            <summary>
            The path to resolve.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ResolvePathCommand.ProcessRecord">
            <summary>
            Resolves the path containing glob characters to the MSH paths that it
            represents.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetClipboardCommand">
            <summary>
            Defines the implementation of the 'Set-Clipboard' cmdlet.
            This cmdlet gets the content from system clipboard.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetClipboardCommand.Value">
            <summary>
            Property that sets clipboard content.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetClipboardCommand.Append">
            <summary>
            Property that sets append parameter. This will allow to append clipboard without clear it.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetClipboardCommand.BeginProcessing">
            <summary>
            This method implements the BeginProcessing method for Set-Clipboard command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetClipboardCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Set-Clipboard command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetClipboardCommand.EndProcessing">
            <summary>
            This method implements the EndProcessing method for Set-Clipboard command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetClipboardCommand.SetClipboardContent(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Set the clipboard content.
            </summary>
            <param name="contentList">The content to store into the clipboard.</param>
            <param name="append">If true, appends to clipboard instead of overwriting.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetContentCommand">
            <summary>
            A command to set the content of an item at a specified path.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetContentCommand.BeforeOpenStreams(System.String[])">
            <summary>
            Called by the base class before the streams are open for the path.
            This override clears the content from the item.
            </summary>
            <param name="paths">
            The path to the items that will be opened for writing content.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetContentCommand.CallShouldProcess(System.String)">
            <summary>
            Makes the call to ShouldProcess with appropriate action and target strings.
            </summary>
            <param name="path">
            The path to the item on which the content will be set.
            </param>
            <returns>
            True if the action should continue or false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetItemPropertyCommand">
            <summary>
            A command to set the property of an item at a specified path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemPropertyCommand.Path">
            <summary>
            Gets or sets the path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemPropertyCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemPropertyCommand.Name">
            <summary>
            The name of the property to set.
            </summary>
            <value>
            This value type is determined by the InvokeProvider.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemPropertyCommand.Value">
            <summary>
            The value of the property to set.
            </summary>
            <value>
            This value type is determined by the InvokeProvider.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetItemPropertyCommand.InputObject">
            <summary>
            A PSObject that contains the properties and values to be set.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetItemPropertyCommand.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetItemPropertyCommand.ProcessRecord">
            <summary>
            Sets the content of the item at the specified path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestConnectionCommand">
            <summary>
            The implementation of the "Test-Connection" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Ping">
            <summary>
            Gets or sets whether to do ping test.
            Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.IPv4">
            <summary>
            Gets or sets whether to force use of IPv4 protocol.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.IPv6">
            <summary>
            Gets or sets whether to force use of IPv6 protocol.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.ResolveDestination">
            <summary>
            Gets or sets whether to do reverse DNS lookup to get names for IP addresses.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Source">
            <summary>
            Gets the source from which to run the selected test.
            The default is localhost.
            Remoting is not yet implemented internally in the cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.MaxHops">
            <summary>
            Gets or sets the number of times the Ping data packets can be forwarded by routers.
            As gateways and routers transmit packets through a network, they decrement the Time-to-Live (TTL)
            value found in the packet header.
            The default (from Windows) is 128 hops.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Count">
            <summary>
            Gets or sets the number of ping attempts.
            The default (from Windows) is 4 times.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Delay">
            <summary>
            Gets or sets the delay between ping attempts.
            The default (from Windows) is 1 second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.BufferSize">
            <summary>
            Gets or sets the buffer size to send with the ping packet.
            The default (from Windows) is 32 bytes.
            Max value is 65500 (limitation imposed by Windows API).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.DontFragment">
            <summary>
            Gets or sets whether to prevent fragmentation of the ICMP packets.
            Currently CoreFX not supports this on Unix.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Repeat">
            <summary>
            Gets or sets whether to continue pinging until user presses Ctrl-C (or Int.MaxValue threshold reached).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Quiet">
            <summary>
            Gets or sets whether to enable quiet output mode, reducing output to a single simple value only.
            By default, PingStatus, PingMtuStatus, or TraceStatus objects are emitted.
            With this switch, standard ping and -Traceroute returns only true / false, and -MtuSize returns an integer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TimeoutSeconds">
            <summary>
            Gets or sets the timeout value for an individual ping in seconds.
            If a response is not received in this time, no response is assumed.
            The default (from Windows) is 5 seconds.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TargetName">
            <summary>
            Gets or sets the destination hostname or IP address.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.MtuSize">
            <summary>
            Gets or sets whether to detect Maximum Transmission Unit size.
            When selected, only a single ping result is returned, indicating the maximum buffer size
            the route to the destination can support without fragmenting the ICMP packets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.Traceroute">
            <summary>
            Gets or sets whether to perform a traceroute test.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TcpPort">
            <summary>
            Gets or sets whether to perform a TCP connection test.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.BeginProcessing">
            <summary>
            BeginProcessing implementation for TestConnectionCommand.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.ProcessRecord">
            <summary>
            Process a connection test.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.StopProcessing">
            <summary>
            On receiving the StopProcessing() request, the cmdlet will immediately cancel any in-progress ping request.
            This allows a cancellation to occur during a ping request without having to wait for the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.Dispose">
            <summary>
            IDisposable implementation, dispose of any disposable resources created by the cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.Dispose(System.Boolean)">
            <summary>
            Implementation of IDisposable for both manual Dispose() and finalizer-called disposal of resources.
            </summary>
            <param name="disposing">
            Specified as true when Dispose() was called, false if this is called from the finalizer.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus">
            <summary>
            The class contains information about the source, the destination and ping results.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.#ctor(System.String,System.String,System.Net.NetworkInformation.PingReply,System.Int64,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus"/> class.
            This constructor allows manually specifying the initial values for the cases where the PingReply
            object may be missing some information, specifically in the instances where PingReply objects are
            utilised to perform a traceroute.
            </summary>
            <param name="source">The source machine name or IP of the ping.</param>
            <param name="destination">The destination machine name of the ping.</param>
            <param name="reply">The response from the ping attempt.</param>
            <param name="latency">The latency of the ping.</param>
            <param name="bufferSize">The buffer size.</param>
            <param name="pingNum">The sequence number in the sequence of pings to the hop point.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.#ctor(System.String,System.String,System.Net.NetworkInformation.PingReply,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus"/> class.
            </summary>
            <param name="source">The source machine name or IP of the ping.</param>
            <param name="destination">The destination machine name of the ping.</param>
            <param name="reply">The response from the ping attempt.</param>
            <param name="pingNum">The sequence number of the ping in the sequence of pings to the target.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Ping">
            <summary>
            Gets the sequence number of this ping in the sequence of pings to the <see cref="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Destination"/>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Source">
            <summary>
            Gets the source from which the ping was sent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Destination">
            <summary>
            Gets the destination which was pinged.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Address">
            <summary>
            Gets the target address of the ping.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.DisplayAddress">
            <summary>
            Gets the target address of the ping if one is available, or "*" if it is not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Latency">
            <summary>
            Gets the roundtrip time of the ping in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Status">
            <summary>
            Gets the returned status of the ping.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.BufferSize">
            <summary>
            Gets the size in bytes of the buffer data sent in the ping.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus.Reply">
            <summary>
            Gets the reply object from this ping.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestConnectionCommand.PingMtuStatus">
            <summary>
            The class contains information about the source, the destination and ping results.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.PingMtuStatus.#ctor(System.String,System.String,System.Net.NetworkInformation.PingReply,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.TestConnectionCommand.PingMtuStatus"/> class.
            </summary>
            <param name="source">The source machine name or IP of the ping.</param>
            <param name="destination">The destination machine name of the ping.</param>
            <param name="reply">The response from the ping attempt.</param>
            <param name="bufferSize">The buffer size from the successful ping attempt.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.PingMtuStatus.MtuSize">
            <summary>
            Gets the maximum transmission unit size on the network path between the source and destination.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus">
            <summary>
            The class contains an information about a trace route attempt.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.#ctor(System.Int32,Microsoft.PowerShell.Commands.TestConnectionCommand.PingStatus,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus"/> class.
            </summary>
            <param name="hop">The hop number of this trace hop.</param>
            <param name="status">The PingStatus response from this trace hop.</param>
            <param name="source">The source computer name or IP address of the traceroute.</param>
            <param name="destination">The target destination of the traceroute.</param>
            <param name="destinationAddress">The target IPAddress of the overall traceroute.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Hop">
            <summary>
            Gets the number of the current hop / router.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Hostname">
            <summary>
            Gets the hostname of the current hop point.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Ping">
            <summary>
            Gets the sequence number of the ping in the sequence of pings to the hop point.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.HopAddress">
            <summary>
            Gets the IP address of the current hop point.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Latency">
            <summary>
            Gets the latency values of each ping to the current hop point.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Status">
            <summary>
            Gets the status of the traceroute hop.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Source">
            <summary>
            Gets the source address of the traceroute command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Target">
            <summary>
            Gets the final destination hostname of the trace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.TargetAddress">
            <summary>
            Gets the final destination IP address of the trace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestConnectionCommand.TraceStatus.Reply">
            <summary>
            Gets the raw PingReply object received from the ping to this hop point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestConnectionCommand.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.PowerShell.Commands.TestConnectionCommand"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetTimeZoneCommand">
            <summary>
            A cmdlet to retrieve time zone information.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetTimeZoneCommand.Id">
            <summary>
            A list of the local time zone ids that the cmdlet should look up.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetTimeZoneCommand.ListAvailable">
            <summary>
            Specifies that the cmdlet should produce a collection of the
            TimeZoneInfo objects that are available on the system.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetTimeZoneCommand.Name">
            <summary>
            A list of the local time zone names that the cmdlet should look up.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetTimeZoneCommand.ProcessRecord">
            <summary>
            Implementation of the ProcessRecord method for Get-TimeZone.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TimeZoneHelper">
            <summary>
            Static Helper class for working with system time zones.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TimeZoneHelper.LookupSystemTimeZoneInfoByName(System.String)">
            <summary>
            Find the system time zone by checking first against StandardName and then,
            if no matches were found, against the DaylightName.
            </summary>
            <param name="name">The name (or wildcard pattern) of the system time zone to find.</param>
            <returns>A TimeZoneInfo object array containing information about the specified system time zones.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteContentCommandBase">
            <summary>
            A base class for the commands that write content (set-content, add-content)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteContentCommandBase.Value">
            <summary>
            The value of the content to set.
            </summary>
            <value>
            This value type is determined by the InvokeProvider.
            </value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WriteContentCommandBase._content">
            <summary>
            The value of the content to be set.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WriteContentCommandBase._pipingPaths">
            <summary>
            This bool is used to determine if the path
            parameter was specified on the command line or via the pipeline.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WriteContentCommandBase._contentWritersOpen">
            <summary>
            True if the content writers have been open.
            This is used in conjunction with pipingPaths
            to determine if the content writers need to
            be closed each time ProgressRecord is called.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.BeginProcessing">
            <summary>
            Determines if the paths are specified on the command line
            or being piped in.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.ProcessRecord">
            <summary>
            Appends the content to the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.EndProcessing">
            <summary>
            Closes all the content writers.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.SeekContentPosition(System.Collections.Generic.List{Microsoft.PowerShell.Commands.ContentCommandBase.ContentHolder})">
            <summary>
            This method is called by the base class after getting the content writer
            from the provider. If the current position needs to be changed before writing
            the content, this method should be overridden to do that.
            </summary>
            <param name="contentHolders">
            The content holders that contain the writers to be moved.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.BeforeOpenStreams(System.String[])">
            <summary>
            Called by the base class before the streams are open for the path.
            </summary>
            <param name="paths">
            The path to the items that will be opened for writing content.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.GetDynamicParameters(System.Management.Automation.CmdletProviderContext)">
            <summary>
            A virtual method for retrieving the dynamic parameters for a cmdlet. Derived cmdlets
            that require dynamic parameters should override this method and return the
            dynamic parameter object.
            </summary>
            <param name="context">
            The context under which the command is running.
            </param>
            <returns>
            An object representing the dynamic parameters for the cmdlet or null if there
            are none.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.GetContentWriters(System.String[],System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the IContentWriters for the current path(s)
            </summary>
            <returns>
            An array of IContentWriters for the current path(s)
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteContentCommandBase.GetAcceptedPaths(System.String[],System.Management.Automation.CmdletProviderContext)">
            <summary>
            Gets the list of paths accepted by the user.
            </summary>
            <param name="unfilteredPaths">The list of unfiltered paths.</param>
            <param name="currentContext">The current context.</param>
            <returns>The list of paths accepted by the user.</returns>
        </member>
        <member name="M:Extensions.CIMExtensions.QueryInstances(Microsoft.Management.Infrastructure.CimSession,System.String,System.String)">
            <summary>
            An "overload" of the
            <see cref="T:Microsoft.Management.Infrastructure.CimSession"/>.QueryInstances
            method that takes only the namespace and query string as a parameters.
            </summary>
            <param name="session">The CimSession to be queried.</param>
            <param name="nameSpace">A string containing the namespace to run the query against.</param>
            <param name="query">A string containing the query to be run.</param>
            <returns>
            An IEnumerable interface that can be used to enumerate the instances
            </returns>
        </member>
        <member name="M:Extensions.CIMExtensions.QueryFirstInstance(Microsoft.Management.Infrastructure.CimSession,System.String,System.String)">
            <summary>
            Execute a CIM query and return only the first instance in the result.
            </summary>
            <param name="session">The CimSession to be queried.</param>
            <param name="nameSpace">A string containing the namespace to run the query against.</param>
            <param name="query">A string containing the query to be run.</param>
            <returns>
            A <see cref="T:Microsoft.Management.Infrastructure.CimInstance"/> object
            representing the first instance in a query result if successful, null
            otherwise.
            </returns>
        </member>
        <member name="M:Extensions.CIMExtensions.QueryFirstInstance(Microsoft.Management.Infrastructure.CimSession,System.String)">
            <summary>
            Execute a CIM query and return only the first instance in the result.
            </summary>
            <param name="session">The CimSession to be queried.</param>
            <param name="query">A string containing the query to be run.</param>
            <returns>
            A <see cref="T:Microsoft.Management.Infrastructure.CimInstance"/> object
            representing the first instance in a query result if successful, null
            otherwise.
            </returns>
        </member>
        <member name="T:ClearRecycleBinResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ClearRecycleBinResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ClearRecycleBinResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.ClearRecycleBinContent">
            <summary>
              Looks up a localized string similar to 
               All of the contents of the Recycle Bin
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.ClearRecycleBinContentForDrive">
            <summary>
              Looks up a localized string similar to 
               All of the contents of the Recycle Bin for the '{0}' drive
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.ClearRecycleBinProgressActivity">
            <summary>
              Looks up a localized string similar to 
               Clearing Recycle Bin
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.ClearRecycleBinStatusDescriptionByDrive">
            <summary>
              Looks up a localized string similar to 
               for the '{0}' drive
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.ClearRecycleBinStatusDescriptionForAllDrives">
            <summary>
              Looks up a localized string similar to 
               for all drives
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.DriveNotFound">
            <summary>
              Looks up a localized string similar to 
               Cannot find drive. A drive with the name '{0}' does not exist. Please run the '{1}' cmdlet to see the available Fixed drives in the system.
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.InvalidDriveNameFormat">
            <summary>
              Looks up a localized string similar to 
               Invalid input. The following formats are supported: '{0}', '{1}' or '{2}'.
             
            </summary>
        </member>
        <member name="P:ClearRecycleBinResources.InvalidDriveType">
            <summary>
              Looks up a localized string similar to 
               The drive with the name '{0}' is not a Fixed drive and does not support the Recycle Bin. Please run the '{1}' cmdlet to see the available Fixed drives in the system.
             
            </summary>
        </member>
        <member name="T:ClipboardResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ClipboardResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ClipboardResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ClipboardResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ClipboardResources.SetClipboardContent">
            <summary>
              Looks up a localized string similar to 
               Set string '{0}' to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.AppendClipboardContent">
            <summary>
              Looks up a localized string similar to 
               Append string '{0}' to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.SetSingleFileToClipboard">
            <summary>
              Looks up a localized string similar to 
               Set file '{0}' to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.AppendSingleFileToClipboard">
            <summary>
              Looks up a localized string similar to 
               Append file '{0}' to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.SetMultipleFilesToClipboard">
            <summary>
              Looks up a localized string similar to 
               Set {0} files to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.AppendMultipleFilesToClipboard">
            <summary>
              Looks up a localized string similar to 
               Append {0} files to the clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.NoAppendableClipboardContent">
            <summary>
              Looks up a localized string similar to 
               There's no content in Clipboard or the content format is not compatible. Set input object to the Clipboard.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.ClipboardCleared">
            <summary>
              Looks up a localized string similar to 
               The Clipboard has been cleared.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.InvalidTypeCombine">
            <summary>
              Looks up a localized string similar to 
               TextFormatType can only be combined with Text format.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.InvalidRawCombine">
            <summary>
              Looks up a localized string similar to 
               Raw can only be combined with Text or FileDropList format.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.InvalidHtmlCombine">
            <summary>
              Looks up a localized string similar to 
               Html can only be combined with Html Text format.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.UnsupportedFormat">
            <summary>
              Looks up a localized string similar to 
               Only Text format is supported on this platform.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.UnsupportedPlatform">
            <summary>
              Looks up a localized string similar to 
               The clipboard is not supported on this platform.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.AsHtmlUnsupported">
            <summary>
              Looks up a localized string similar to 
               The '-AsHtml' switch is not supported on this platform.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.TextFormatUnsupported">
            <summary>
              Looks up a localized string similar to 
               The '-TextFormatType' parameter only supports 'Text' on this platform.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.PathUnsupported">
            <summary>
              Looks up a localized string similar to 
               The '-Path' parameter is not supported on this platform.
             
            </summary>
        </member>
        <member name="P:ClipboardResources.LiteralPathUnsupported">
            <summary>
              Looks up a localized string similar to 
               The '-LiteralPath' parameter is not supported on this platform.
             
            </summary>
        </member>
        <member name="T:CmdletizationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:CmdletizationResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:CmdletizationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CmdletizationResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_InvalidClassName">
             <summary>
               Looks up a localized string similar to 
                Cannot find the {0} class on the {1} CIM server.  Verify the value of the ClassName xml attribute in Cmdlet Definition XML and retry. Valid class name example: ROOT\cimv2\Win32_Process.
                {StrContains="ClassName"} {StrContains="ROOT\cimv2\Win32_Process"}
            {0} is a placeholder for a name of a (potentially misspelled) CIM class.  Example: "Win32_Process".
            {1} is a placeholder for a server name.  Example: "localhost".
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_MethodDescription">
             <summary>
               Looks up a localized string similar to 
                CIM method {1} on the {0} CIM object
                {0} is a placeholder for a CIM path. Example: \\SERVER1\ROOT\cimv2:Win32_Process.Handle="11828"
            {1} is a placeholder for a CIM method name. Example: Create
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_GenericCimFailure">
             <summary>
               Looks up a localized string similar to 
                Failed to run {1}.  {0}
                {0} is a placeholder for a generic CIM failure.  Example: 'Invalid namespace' or '9'
            {1} is a placeholder for a description of CIM operation.  This most likely comes from CimJob_MethodDescription or CimJob_QueryDescription
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_VerboseExecutionMessage">
            <summary>
              Looks up a localized string similar to 
               Running the following operation: {0}.
               {0} is a placeholder for a description of CIM operation.  This most likely comes from CimJob_MethodDescription or CimJob_QueryDescription
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.SessionBasedWrapper_ShouldProcessVsJobConflict">
             <summary>
               Looks up a localized string similar to 
                CIM cmdlets do not support the {0} parameter together with the AsJob parameter.  Remove one of these parameters and retry.
                {StrContains="AsJob"}
            {0} is a placeholder for 'WhatIf' or 'Confirm' cmdlet parameters
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_SafeQueryDescription">
             <summary>
               Looks up a localized string similar to 
                CIM query for instances of the {0} class on the {1} CIM server: {2}
                {0} is a placeholder for a name of a CIM class.  Example: "Win32_Process".
            {1} is a placeholder for a server name.  Example: "localhost".
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_ErrorCodeFromMethod">
            <summary>
              Looks up a localized string similar to 
               The CIM method returned the following error code: {0}
               {0} is a placeholder for an error code returned from a CIM method.  Example: 123
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_SafeMethodDescription">
             <summary>
               Looks up a localized string similar to 
                The {2} CIM method exposed by the {0} class on the {1} CIM server
                {0} is a placeholder for a name of a CIM class.  Example: "Win32_Process".
            {1} is a placeholder for a server name.  Example: "localhost".
            {2} is a placeholder for a CIM method name. Example: Create
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimConversion_CimIntrinsicValue">
            <summary>
              Looks up a localized string similar to 
               CIM intrinsic type
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimConversion_WqlQuery">
            <summary>
              Looks up a localized string similar to 
               WQL literal
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_InvalidOutputParameterName">
             <summary>
               Looks up a localized string similar to 
                Cannot find the {2} output parameter of the {1} method of the {0} CIM object.  Verify the value of the ParameterName attribute in Cmdlet Definition XML and retry.
                {StrContains="ParameterName"}
            {0} is a placeholder for a CIM path. Example: \\SERVER1\ROOT\cimv2:Win32_Process.Handle="11828"
            {1} is a placeholder for a name of a (potentially misspelled) CIM method.  Example: "Terminate".
            {2} is a placeholder for a name of a (potentially misspelled) method parameter.
            
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_NotFound_ComplexCase">
            <summary>
              Looks up a localized string similar to 
               No matching {1} objects found by {0}. Verify query parameters and retry.
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_NotFound_SimpleGranularCase_Equality">
            <summary>
              Looks up a localized string similar to 
               No {2} objects found with property '{0}' equal to '{1}'.  Verify the value of the property and retry.
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_MismatchedTypeOfPropertyReturnedByQuery">
            <summary>
              Looks up a localized string similar to 
               Type of {0} property ({1}) doesn't match the CIM type ({2}) associated with the type declared in Cmdlet Definition XML.
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_SafeAssociationDescription">
             <summary>
               Looks up a localized string similar to 
                CIM query for enumerating associated instance of the {0} class on the {1} CIM server
                {0} is a placeholder for a name of a CIM class.  Example: "Win32_Process".
            {1} is a placeholder for a server name.  Example: "localhost".
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_AssociationDescription">
             <summary>
               Looks up a localized string similar to 
                CIM query for enumerating instances of the {0} class on the {1} CIM server, that are associated with the following instance: {2}
                {0} is a placeholder for a name of a CIM class.  Example: "Win32_Process".
            {1} is a placeholder for a server name.  Example: "localhost".
            {2} is a placeholder for a string describing a CimInstance.  Example: "Win32_Process[Handle=123]".
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_SleepAndRetryVerboseMessage">
             <summary>
               Looks up a localized string similar to 
                The {0} command cannot complete, because the {1} server is currently busy.  The command will be automatically resumed in {2:f2} seconds.
                {0} is a placeholder for a command name.  Example: "Get-NetAdapter"
            {1} is a placeholder for a computer name.  Example: "localhost"
            {2} is a placeholder for a number of seconds.  Example: 1.23
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_BrokenSession">
            <summary>
              Looks up a localized string similar to 
               Cannot connect to CIM server. {0}
               {0} is a placeholder for a more detailed error message.
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimCmdletAdapter_DebugInquire">
            <summary>
              Looks up a localized string similar to 
               The cmdlet does not fully support the Inquire action for debug messages.  Cmdlet operation will continue during the prompt.  Select a different action preference via -Debug switch or $DebugPreference variable, and try again.
               {StrContains="Debug"} {StrContains="DebugPreference"} {StrContains="Inquire"}
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimCmdletAdapter_WarningInquire">
            <summary>
              Looks up a localized string similar to 
               The cmdlet does not fully support the Inquire action for warnings.  Cmdlet operation will continue during the prompt.  Select a different action preference via -WarningAction parameter or $WarningPreference variable, and try again.
               {StrContains="WarningAction"} {StrContains="WarningPreference"} {StrContains="Inquire"}
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimCmdletAdapter_WarningStop">
            <summary>
              Looks up a localized string similar to 
               The cmdlet does not fully support the Stop action for warnings.  Cmdlet operation will be stopped with a delay.  Select a different action preference via -WarningAction parameter or $WarningPreference variable, and try again.
               {StrContains="WarningAction"} {StrContains="WarningPreference"} {StrContains="Stop"}
             
            </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_ComputerNameConcatenationTemplate">
             <summary>
               Looks up a localized string similar to 
                {0}: {1}
                {0} is a placeholder for a computername.  Example: "localhost"
            {1} is a placeholder for the original message.  Example: "Deleting managed resource"
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimCmdletAdapter_RemoteDcomDoesntSupportExtendedSemantics">
             <summary>
               Looks up a localized string similar to 
                {0}: A CimSession to the CIM server uses the DCOM protocol, which does not support the {1} switch.
                {0} is a placeholder for a name of a computer
            {1} is a placeholder for 'Confirm' or 'WhatIf'
              
             </summary>
        </member>
        <member name="P:CmdletizationResources.CimJob_NotFound_SimpleGranularCase_Wildcard">
            <summary>
              Looks up a localized string similar to 
               No {2} objects found with property '{0}' matching '{1}'.  Verify the value of the property and retry.
             
            </summary>
        </member>
        <member name="T:ComputerInfoResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ComputerInfoResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ComputerInfoResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ComputerInfoResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingOperationSystemInfo">
            <summary>
              Looks up a localized string similar to 
               Loading operating system information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingHotPatchInfo">
            <summary>
              Looks up a localized string similar to 
               Loading hot-patch information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingRegistryInfo">
            <summary>
              Looks up a localized string similar to 
               Loading registry information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingBiosInfo">
            <summary>
              Looks up a localized string similar to 
               Loading BIOS information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingMotherboardInfo">
            <summary>
              Looks up a localized string similar to 
               Loading motherboard information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingComputerInfo">
            <summary>
              Looks up a localized string similar to 
               Loading Computer information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingProcessorInfo">
            <summary>
              Looks up a localized string similar to 
               Loading processor information
             
            </summary>
        </member>
        <member name="P:ComputerInfoResources.LoadingNetworkAdapterInfo">
            <summary>
              Looks up a localized string similar to 
               Loading network adapter information
             
            </summary>
        </member>
        <member name="T:ComputerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ComputerResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ComputerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ComputerResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ComputerResources.NotSupported">
            <summary>
              Looks up a localized string similar to 
               This functionality is not supported on this operating system.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NotEnabled">
            <summary>
              Looks up a localized string similar to 
               Could not enable drive {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidDrive">
            <summary>
              Looks up a localized string similar to 
               The command cannot turn on the restore computer infrastructure on the specified computer because the supplied drive is not valid. Enter a valid drive in the Drive parameter, and then try again.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NoSystemDrive">
            <summary>
              Looks up a localized string similar to 
               Include System Drive in the list of Drives.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NotValidDrive">
            <summary>
              Looks up a localized string similar to 
               The command cannot turn off the restore computer infrastructure because the supplied drive is not valid. Enter a valid drive in the Drive parameter, and then try again.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NotDisabled">
            <summary>
              Looks up a localized string similar to 
               The command cannot disable System Restore on the {0} drive. You may not have sufficient permissions to perform this operation.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ServiceDisabled">
            <summary>
              Looks up a localized string similar to 
               SystemRestore service is disabled.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestorePointNotCreated">
            <summary>
              Looks up a localized string similar to 
               The system restore infrastructure cannot create a restore point.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestoreFailed">
            <summary>
              Looks up a localized string similar to 
               The last attempt to restore the computer failed.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestoreSuccess">
            <summary>
              Looks up a localized string similar to 
               The computer has been restored to the specified restore point.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestoreInterrupted">
            <summary>
              Looks up a localized string similar to 
               The last attempt to restore the computer was interrupted.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NoRestorePoint">
            <summary>
              Looks up a localized string similar to 
               The command cannot locate the "{0}" restore point. Verify the "{0}" sequence number, and then try the command again.
             
            </summary>
        </member>
        <member name="P:ComputerResources.DoubleComputerName">
            <summary>
              Looks up a localized string similar to 
               {0} ({1})
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartcomputerFailed">
            <summary>
              Looks up a localized string similar to 
               Failed to restart the computer {0} with the following error message: {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.OperationFailed">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run on target computer('{1}') due to following error: {0}.{2}
             
            </summary>
        </member>
        <member name="P:ComputerResources.StopcomputerFailed">
            <summary>
              Looks up a localized string similar to 
               Failed to stop the computer {0} with the following error message: {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidRestorePoint">
            <summary>
              Looks up a localized string similar to 
               The command cannot restore the computer because "{0}" has not been set as valid restore point. Enter a valid restore point in the RestorePoint parameter, and then try again.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartNeeded">
            <summary>
              Looks up a localized string similar to 
               The changes will take effect after you restart the computer {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RemoveComputerConfirm">
            <summary>
              Looks up a localized string similar to 
               After you leave the domain, you will need to know the password of the local Administrator account to log onto this computer. Do you wish to continue?
             
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ComputerResources.InvalidComputerNameFormat" -->
        <member name="P:ComputerResources.InvalidDomainNameFormat">
            <summary>
              Looks up a localized string similar to 
               The domain in computer name '{0}' is not valid. Make sure that the domain exists and that the name is a valid domain name.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ComputerNamesAreEqual">
            <summary>
              Looks up a localized string similar to 
               The value specified for the NewComputerName parameter is the same as the value of the ComputerName parameter. Provide a different value for the NewComputerName parameter.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ResetComputerMachinePassword">
            <summary>
              Looks up a localized string similar to 
               "The password of the secure channel between '{0}' and '{1}' has been reset."
             
            </summary>
        </member>
        <member name="P:ComputerResources.SystemRestoreServiceDisabled">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run due to the following error: the service cannot be started because it is disabled or does not have enabled devices associated with it.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ProgressActivity">
            <summary>
              Looks up a localized string similar to 
               Creating a system restore point ...
             
            </summary>
        </member>
        <member name="P:ComputerResources.ProgressStatusCreatingRestorePoint">
            <summary>
              Looks up a localized string similar to 
               Creating a system restore point... {0}% Completed.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ProgressStatusCompleted">
            <summary>
              Looks up a localized string similar to 
               Completed.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NetworkPathNotFound">
             <summary>
               Looks up a localized string similar to 
                Try below options and Run the command again.
            1. Verify that the target computer('{0}') is running.
            2. Specify full computer name of the target computer('{0}').
              
             </summary>
        </member>
        <member name="P:ComputerResources.PrivilegeNotEnabled">
            <summary>
              Looks up a localized string similar to 
               Failed to restart the computer {0}. Access rights {1} cannot be enabled for the calling process.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartComputerAction">
            <summary>
              Looks up a localized string similar to 
               Enable the {0} and restart the computer.
             
            </summary>
        </member>
        <member name="P:ComputerResources.LocalShutdownPrivilege">
            <summary>
              Looks up a localized string similar to 
               Local shutdown access rights
             
            </summary>
        </member>
        <member name="P:ComputerResources.RemoteShutdownPrivilege">
            <summary>
              Looks up a localized string similar to 
               Remote shutdown access rights
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotWaitLocalComputer">
            <summary>
              Looks up a localized string similar to 
               Cannot wait for the local computer to restart. The local computer is ignored when the Wait parameter is specified.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartComputerInvalidParameter">
            <summary>
              Looks up a localized string similar to 
               The parameters Timeout, For, and Delay are valid only when the parameter Wait is specified.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartMultipleComputersActivity">
            <summary>
              Looks up a localized string similar to 
                Restarting computers...
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartSingleComputerActivity">
            <summary>
              Looks up a localized string similar to 
                Restarting computer {0}
             
            </summary>
        </member>
        <member name="P:ComputerResources.WaitForMultipleComputers">
            <summary>
              Looks up a localized string similar to 
               Completed: {0}/{1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.VerifyRebootStage">
            <summary>
              Looks up a localized string similar to 
               Verifying that the computer has been restarted...
             
            </summary>
        </member>
        <member name="P:ComputerResources.WaitForPowerShell">
            <summary>
              Looks up a localized string similar to 
               Waiting for PowerShell connectivity...
             
            </summary>
        </member>
        <member name="P:ComputerResources.WaitForRestartToBegin">
            <summary>
              Looks up a localized string similar to 
               Waiting for the restart to begin...
             
            </summary>
        </member>
        <member name="P:ComputerResources.WaitForWinRM">
            <summary>
              Looks up a localized string similar to 
               Waiting for WinRM connectivity...
             
            </summary>
        </member>
        <member name="P:ComputerResources.WaitForWMI">
            <summary>
              Looks up a localized string similar to 
               Waiting for WMI connectivity...
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartComplete">
            <summary>
              Looks up a localized string similar to 
               Restart is complete
             
            </summary>
        </member>
        <member name="P:ComputerResources.NoSupportForCombinedServiceType">
            <summary>
              Looks up a localized string similar to 
               The combined service types are not supported for now.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotResolveComputerName">
            <summary>
              Looks up a localized string similar to 
               Computer name {0} cannot be resolved with the exception: {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.IncorrectNewNameNumber">
            <summary>
              Looks up a localized string similar to 
               The number of new names is not equal to the number of target computers.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidNewName">
            <summary>
              Looks up a localized string similar to 
               Skip computer '{0}' with new name '{1}' because the new name is not valid. The new computer name entered is not properly formatted. Standard names may contain letters (a-z, A-Z), numbers (0-9), and hyphens (-), but no spaces or periods (.). The name may not consist entirely of digits, and may not be longer than 63 characters.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NewNameIsOldName">
            <summary>
              Looks up a localized string similar to 
               Skip computer '{0}' with new name '{1}' because the new name is the same as the current name.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ComputerNotInDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot remove computer '{0}' because it is not in a domain.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToJoinWorkGroup">
            <summary>
              Looks up a localized string similar to 
               Failed to join computer '{0}' to workgroup '{1}' with the following error message: {2}
             
            </summary>
        </member>
        <member name="P:ComputerResources.NetworkDown">
            <summary>
              Looks up a localized string similar to 
               Cannot remove computer(s) from the domain because the local network is down.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToRename">
            <summary>
              Looks up a localized string similar to 
               Fail to rename computer '{0}' to '{1}' due to the following exception: {2}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.AddComputerActionDomain">
            <summary>
              Looks up a localized string similar to 
               Join in domain '{0}'
             
            </summary>
        </member>
        <member name="P:ComputerResources.AddComputerActionWorkgroup">
            <summary>
              Looks up a localized string similar to 
               Join in workgroup '{0}'
             
            </summary>
        </member>
        <member name="P:ComputerResources.AddComputerToSameDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot add computer '{0}' to domain '{1}' because it is already in that domain.
             
            </summary>
        </member>
        <member name="P:ComputerResources.AddComputerToSameWorkgroup">
            <summary>
              Looks up a localized string similar to 
               Cannot add computer '{0}' to workgroup '{1}' because it is already in that workgroup.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToRenameAfterJoinWorkgroup">
            <summary>
              Looks up a localized string similar to 
               Computer '{0}' successfully joined the workgroup '{1}', but could not be renamed to '{2}' with the following error message: {3}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToSwitchFromDomainToWorkgroup">
            <summary>
              Looks up a localized string similar to 
               Computer '{0}' was successfully unjoined from the domain '{1}', but it failed to join the workgroup '{2}' with the following error message: {3}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToUnjoinDomain">
            <summary>
              Looks up a localized string similar to 
               Failed to unjoin computer '{0}' from domain '{1}' with the following error message: {2}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToConnectToComputer">
            <summary>
              Looks up a localized string similar to 
               Cannot establish the WMI connection to the computer '{0}' with the following error message: {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToJoinDomainFromWorkgroup">
            <summary>
              Looks up a localized string similar to 
               Computer '{0}' failed to join domain '{1}' from its current workgroup '{2}' with following error message: {3}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToJoinNewDomainAfterUnjoinOldDomain">
            <summary>
              Looks up a localized string similar to 
               Computer '{0}' was successfully unjoined from domain '{1}', but failed to join the new domain '{2}' with the following error message: {3}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToRenameAfterJoinDomain">
            <summary>
              Looks up a localized string similar to 
               Computer '{0}' was successfully joined to the new domain '{1}', but renaming it to '{2}' failed with the following error message: {3}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidJoinOptions">
            <summary>
              Looks up a localized string similar to 
               The flag '{0}' is valid only if flag '{1}' is specified.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotRenameMultipleComputers">
            <summary>
              Looks up a localized string similar to 
               Cannot rename multiple computers. The NewName parameter is valid only if a single computer is specified.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotFindMachineAccountFromDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot find the computer account for the local computer in the domain {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotFindMachineAccountFromServer">
            <summary>
              Looks up a localized string similar to 
               Cannot find the computer account for the local computer from the domain controller {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToGetDomainInformation">
            <summary>
              Looks up a localized string similar to 
               Cannot get domain information about the local computer because of the following exception: {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToResetPasswordOnDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot reset the secure channel password for the computer account in the domain. Operation failed with the following exception: {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToResetPasswordOnLocalMachine">
            <summary>
              Looks up a localized string similar to 
               Resetting the secure channel password for the local computer failed with the following error message: {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.NeedAdminPrivilegeToResetPassword">
            <summary>
              Looks up a localized string similar to 
               Administrator rights are required to reset the secure channel password on the local computer. Access is denied.
             
            </summary>
        </member>
        <member name="P:ComputerResources.ResetComputerNotInDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot reset the secure channel password for the account of the local computer. The local computer is not currently part of a domain.
             
            </summary>
        </member>
        <member name="P:ComputerResources.TruncateNetBIOSName">
            <summary>
              Looks up a localized string similar to 
               The NetBIOS name of the computer is limited to 15 bytes, which is 15 characters in this case. The NetBIOS name will be shortened to "{0}", which may cause conflicts under NetBIOS name resolution. Do you wish to continue?
             
            </summary>
        </member>
        <member name="P:ComputerResources.TruncateNetBIOSNameCaption">
            <summary>
              Looks up a localized string similar to 
               NetBIOS name will be truncated.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotResolveServerName">
            <summary>
              Looks up a localized string similar to 
               The specified server name {0} cannot be resolved.
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotCreateRestorePointWarning">
            <summary>
              Looks up a localized string similar to 
               A new system restore point cannot be created because one has already been created within the past {0} minutes. The frequency of restore point creation can be changed by creating the DWORD value 'SystemRestorePointCreationFrequency' under the registry key 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\SystemRestore'. The value of this registry key indicates the necessary time interval (in minutes) between two restore point creation. The default value is 1440 minutes (24 hours).
             
            </summary>
        </member>
        <member name="P:ComputerResources.CannotGetOperatingSystemObject">
            <summary>
              Looks up a localized string similar to 
               The Win32_OperatingSystem WMI object cannot be retrieved.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RestartComputerSkipped">
            <summary>
              Looks up a localized string similar to 
               The computer {0} is skipped. Fail to retrieve its LastBootUpTime via the WMI service with the following error message: {1}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToTestSecureChannel">
            <summary>
              Looks up a localized string similar to 
               Cannot verify the secure channel for the local computer. Operation failed with the following exception: {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RepairSecureChannelFail">
            <summary>
              Looks up a localized string similar to 
               The attempt to repair the secure channel between the local computer and the domain {0} has failed.
             
            </summary>
        </member>
        <member name="P:ComputerResources.RepairSecureChannelSucceed">
            <summary>
              Looks up a localized string similar to 
               The secure channel between the local computer and the domain {0} was successfully repaired.
             
            </summary>
        </member>
        <member name="P:ComputerResources.SecureChannelAlive">
            <summary>
              Looks up a localized string similar to 
               The secure channel between the local computer and the domain {0} is in good condition.
             
            </summary>
        </member>
        <member name="P:ComputerResources.SecureChannelBroken">
            <summary>
              Looks up a localized string similar to 
               The secure channel between the local computer and the domain {0} is broken.
             
            </summary>
        </member>
        <member name="P:ComputerResources.TestComputerNotInDomain">
            <summary>
              Looks up a localized string similar to 
               Cannot verify the secure channel password for the local computer. The local computer is not currently part of a domain.
             
            </summary>
        </member>
        <member name="P:ComputerResources.SystemRestoreNotSupported">
            <summary>
              Looks up a localized string similar to 
               The operation cannot be performed because the system restore APIs are not supported on the Advanced RISC Machine (ARM) platform.
             
            </summary>
        </member>
        <member name="P:ComputerResources.TimeoutError">
            <summary>
              Looks up a localized string similar to 
               The computer did not finish restarting within the specified time-out period.
             
            </summary>
        </member>
        <member name="P:ComputerResources.FailToRetrieveLastRestorePoint">
            <summary>
              Looks up a localized string similar to 
               Cannot validate the time interval for restore point creation. It failed to retrieve the last restore point with the following error message: {0}.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidParameterSetAsJob">
            <summary>
              Looks up a localized string similar to 
               The AsJob Parameter Set is not supported.
             
            </summary>
        </member>
        <member name="P:ComputerResources.InvalidParameterForCoreClr">
            <summary>
              Looks up a localized string similar to 
               The {0} parameter is not supported for CoreCLR.
             
            </summary>
        </member>
        <member name="T:HotFixResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:HotFixResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:HotFixResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HotFixResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HotFixResources.NoEntriesFound">
            <summary>
              Looks up a localized string similar to 
               Cannot find the requested hotfix on the '{0}' computer. Verify the input and run the command again.
             
            </summary>
        </member>
        <member name="T:NavigationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:NavigationResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:NavigationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NavigationResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NavigationResources.DeleteHasChildrenPrompt">
            <summary>
              Looks up a localized string similar to 
               The specified path is a container that has child items. Do you want to delete this container and its child items?
             
            </summary>
        </member>
        <member name="P:NavigationResources.DeletePrompt">
            <summary>
              Looks up a localized string similar to 
               Do you want to delete the specified item?
             
            </summary>
        </member>
        <member name="P:NavigationResources.CopyToExistingPrompt">
            <summary>
              Looks up a localized string similar to 
               Cannot copy because the specified destination already exists. Do you want to overwrite the existing content?
             
            </summary>
        </member>
        <member name="P:NavigationResources.NewDriveConfirmAction">
            <summary>
              Looks up a localized string similar to 
               New drive
             
            </summary>
        </member>
        <member name="P:NavigationResources.NewDriveConfirmResourceTemplate">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Provider: {1} Root: {2}
             
            </summary>
        </member>
        <member name="P:NavigationResources.RemoveDriveConfirmAction">
            <summary>
              Looks up a localized string similar to 
               Remove Drive
             
            </summary>
        </member>
        <member name="P:NavigationResources.RemoveDriveConfirmResourceTemplate">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Provider: {1} Root: {2}
             
            </summary>
        </member>
        <member name="P:NavigationResources.RemoveDriveInUse">
            <summary>
              Looks up a localized string similar to 
               Cannot remove drive '{0}' because it is in use.
             
            </summary>
        </member>
        <member name="P:NavigationResources.RemoveItemWithChildren">
            <summary>
              Looks up a localized string similar to 
               The item at {0} has children and the Recurse parameter was not specified. If you continue, all children will be removed with the item. Are you sure you want to continue?
             
            </summary>
        </member>
        <member name="P:NavigationResources.RemoveItemInUse">
            <summary>
              Looks up a localized string similar to 
               Cannot remove the item at '{0}' because it is in use.
             
            </summary>
        </member>
        <member name="P:NavigationResources.ItemNotFound">
            <summary>
              Looks up a localized string similar to 
               An object at the specified path {0} does not exist, or has been filtered by the -Include or -Exclude parameter.
             
            </summary>
        </member>
        <member name="P:NavigationResources.SetContentAction">
            <summary>
              Looks up a localized string similar to 
               Set Content
             
            </summary>
        </member>
        <member name="P:NavigationResources.SetContentTarget">
            <summary>
              Looks up a localized string similar to 
               Path: {0}
             
            </summary>
        </member>
        <member name="P:NavigationResources.AddContentAction">
            <summary>
              Looks up a localized string similar to 
               Add Content
             
            </summary>
        </member>
        <member name="P:NavigationResources.AddContentTarget">
            <summary>
              Looks up a localized string similar to 
               Path: {0}
             
            </summary>
        </member>
        <member name="P:NavigationResources.MoveItemDoesntExist">
            <summary>
              Looks up a localized string similar to 
               Cannot move item because the item at '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:NavigationResources.MoveItemInUse">
            <summary>
              Looks up a localized string similar to 
               Cannot move item because the item at '{0}' is in use.
             
            </summary>
        </member>
        <member name="P:NavigationResources.RenameItemDoesntExist">
            <summary>
              Looks up a localized string similar to 
               Cannot rename because item at '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:NavigationResources.RenamedItemInUse">
            <summary>
              Looks up a localized string similar to 
               Cannot rename the item at '{0}' because it is in use.
             
            </summary>
        </member>
        <member name="P:NavigationResources.ParsePathFormatError">
            <summary>
              Looks up a localized string similar to 
               Cannot parse path because path '{0}' does not have a qualifier specified.
             
            </summary>
        </member>
        <member name="P:NavigationResources.CreateAction">
            <summary>
              Looks up a localized string similar to 
               Begin
             
            </summary>
        </member>
        <member name="P:NavigationResources.RollbackAction">
            <summary>
              Looks up a localized string similar to 
               Rollback
             
            </summary>
        </member>
        <member name="P:NavigationResources.CommitAction">
            <summary>
              Looks up a localized string similar to 
               Commit
             
            </summary>
        </member>
        <member name="P:NavigationResources.TransactionResource">
            <summary>
              Looks up a localized string similar to 
               Current transaction
             
            </summary>
        </member>
        <member name="T:ProcessCommandHelpResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ProcessCommandHelpResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ProcessCommandHelpResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.GetProcessShortDescription">
            <summary>
              Looks up a localized string similar to 
               Lists processes currently running.
             
            </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.GetProcessDetailedDescription">
             <summary>
               Looks up a localized string similar to 
                
            -Id id
            [int[]]
            [pipeline input allowed]
            Comma-separated list of process identifiers that specify the processes to get
            
            -ProcessName name
            [string[]]
            [pipeline input allowed]
            Comma-separated list of process names that specify the processes to get
            
            -Exclude name
            [ArrayList]
            Comma-separated list of process names to be excluded from the output.
            
            ---
            The command enumerates processes from the local computer, and outputs System.Diagnostics.Process object(s). The command writes the process object to the output pipeline one at a time. The command takes parameters like ID(Process Identifier) or Process Name from the command line. The command returns the corresponding system.diagnostics.process for the supplied ID or ProcessName parameters.
              
             </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.GetProcessNote1">
            <summary>
              Looks up a localized string similar to 
               Exclude works only for process name.
             
            </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.GetProcessExample1Description">
            <summary>
              Looks up a localized string similar to 
               Returns all running processes.
             
            </summary>
        </member>
        <member name="P:ProcessCommandHelpResources.GetProcessExample2Description">
            <summary>
              Looks up a localized string similar to 
               Returns all processes with names starting with svc.
             
            </summary>
        </member>
        <member name="T:ProcessResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ProcessResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ProcessResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProcessResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ProcessResources.NoProcessFoundForGivenName">
            <summary>
              Looks up a localized string similar to 
               Cannot find a process with the name "{0}". Verify the process name and call the cmdlet again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.RecommendIdTagForGivenName">
            <summary>
              Looks up a localized string similar to 
               Cannot find a process with the name "{0}". Try running with -Id to search by Id of processes.
             
            </summary>
        </member>
        <member name="P:ProcessResources.NoDebuggerFound">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because the debugger cannot be attached to the process "{0} ({1})". Specify another process and Run your command.
             
            </summary>
        </member>
        <member name="P:ProcessResources.NoProcessFoundForGivenId">
            <summary>
              Looks up a localized string similar to 
               Cannot find a process with the process identifier {1}.
             
            </summary>
        </member>
        <member name="P:ProcessResources.CouldNotStopProcess">
            <summary>
              Looks up a localized string similar to 
               Cannot stop process "{0} ({1})" because of the following error: {2}
             
            </summary>
        </member>
        <member name="P:ProcessResources.ProcessNameForConfirmation">
            <summary>
              Looks up a localized string similar to 
               {0} ({1})
             
            </summary>
        </member>
        <member name="P:ProcessResources.StartProcessTarget">
            <summary>
              Looks up a localized string similar to 
               {0} {1}
             
            </summary>
        </member>
        <member name="P:ProcessResources.CouldNotEnumerateModules">
            <summary>
              Looks up a localized string similar to 
               Cannot enumerate the modules of the "{0}" process.
             
            </summary>
        </member>
        <member name="P:ProcessResources.CouldNotEnumerateFileVer">
            <summary>
              Looks up a localized string similar to 
               Cannot enumerate the file version information of the "{0}" process.
             
            </summary>
        </member>
        <member name="P:ProcessResources.CouldNotEnumerateModuleFileVer">
            <summary>
              Looks up a localized string similar to 
               Cannot enumerate the modules and the file version information of the "{0}" process.
             
            </summary>
        </member>
        <member name="P:ProcessResources.ConfirmStopProcess">
            <summary>
              Looks up a localized string similar to 
               Are you sure you want to perform the Stop-Process operation on the following item: {0}({1})?
             
            </summary>
        </member>
        <member name="P:ProcessResources.UseShell">
            <summary>
              Looks up a localized string similar to 
               The specified path is not a valid win32 application. Try again with the UseShellExecute.
             
            </summary>
        </member>
        <member name="P:ProcessResources.ProcessIsNotTerminated">
            <summary>
              Looks up a localized string similar to 
               This command stopped operation of "{0} ({1})" because of the following error: {2}.
             
            </summary>
        </member>
        <member name="P:ProcessResources.RedirectionParams">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because Redirection parameters cannot be used with UseShellExecute parameter
             
            </summary>
        </member>
        <member name="P:ProcessResources.NoComputerNameWithFileVersion">
            <summary>
              Looks up a localized string similar to 
               Exception getting "Modules" or "FileVersion": "This feature is not supported for remote computers.".
             
            </summary>
        </member>
        <member name="P:ProcessResources.DebuggerError">
            <summary>
              Looks up a localized string similar to 
               This command cannot attach the debugger to the process due to {0} because no default debugger is available.
             
            </summary>
        </member>
        <member name="P:ProcessResources.WaitOnIdleProcess">
            <summary>
              Looks up a localized string similar to 
               This command stopped operation because it cannot wait on 'System Idle' process. Specify another process and Run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.WaitOnItself">
            <summary>
              Looks up a localized string similar to 
               This command stopped operation because it cannot wait on itself. Specify another process and Run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.ProcessNotTerminated">
            <summary>
              Looks up a localized string similar to 
               This command stopped operation because process "{0} ({1})" is not stopped in the specified time-out.
             
            </summary>
        </member>
        <member name="P:ProcessResources.InvalidStartProcess">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run due to the error: {0}
             
            </summary>
        </member>
        <member name="P:ProcessResources.InvalidApplication">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because the input "{0}" is not a valid Application.  Give a valid application and run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.InvalidInput">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because either the parameter "{0}" has a value that is not valid or cannot be used with this command. Give a valid input and Run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.DuplicateEntry">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because "{0}" and "{1}" are same. Give different inputs and Run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.CannotStarttheProcess">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run completely because the system cannot find all the information required.
             
            </summary>
        </member>
        <member name="P:ProcessResources.InvalidUserError">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run due to error 1783. The possible cause of this error can be using of a non-existing user "{0}". Please give a valid user and run your command again.
             
            </summary>
        </member>
        <member name="P:ProcessResources.JoinNetworkFailed">
            <summary>
              Looks up a localized string similar to 
               Error adding '{0}' to the network: {1}
             
            </summary>
        </member>
        <member name="P:ProcessResources.RemoveFailed">
            <summary>
              Looks up a localized string similar to 
               Error removing '{0}' from the network: {1}
             
            </summary>
        </member>
        <member name="P:ProcessResources.RenameFailed">
            <summary>
              Looks up a localized string similar to 
               Error renaming '{0}': {1}
             
            </summary>
        </member>
        <member name="P:ProcessResources.ContradictParametersSpecified">
            <summary>
              Looks up a localized string similar to 
               Parameters "{0}" and "{1}" cannot be specified at the same time.
             
            </summary>
        </member>
        <member name="P:ProcessResources.IncludeUserNameRequiresElevation">
            <summary>
              Looks up a localized string similar to 
               The 'IncludeUserName' parameter requires elevated user rights. Try running the command again in a session that has been opened with elevated user rights (that is, Run as Administrator).
             
            </summary>
        </member>
        <member name="P:ProcessResources.CouldNotDebugProcess">
            <summary>
              Looks up a localized string similar to 
               Cannot debug process "{0} ({1})" because of the following error: {2}
             
            </summary>
        </member>
        <member name="P:ProcessResources.AttachDebuggerReturnCode2">
            <summary>
              Looks up a localized string similar to 
               The user does not have access to the requested information.
             
            </summary>
        </member>
        <member name="P:ProcessResources.AttachDebuggerReturnCode21">
            <summary>
              Looks up a localized string similar to 
               The specified parameter is not valid.
             
            </summary>
        </member>
        <member name="P:ProcessResources.AttachDebuggerReturnCode3">
            <summary>
              Looks up a localized string similar to 
               The user does not have sufficient privilege.
             
            </summary>
        </member>
        <member name="P:ProcessResources.AttachDebuggerReturnCode8">
            <summary>
              Looks up a localized string similar to 
               Unknown failure.
             
            </summary>
        </member>
        <member name="P:ProcessResources.AttachDebuggerReturnCode9">
            <summary>
              Looks up a localized string similar to 
               The path specified does not exist.
             
            </summary>
        </member>
        <member name="P:ProcessResources.ParameterNotSupported">
            <summary>
              Looks up a localized string similar to 
               The parameter '{0}' is not supported for the cmdlet '{1}' on this edition of Windows.
             
            </summary>
        </member>
        <member name="P:ProcessResources.ParameterNotSupportedOnPSEdition">
            <summary>
              Looks up a localized string similar to 
               The parameter '{0}' is not supported for the cmdlet '{1}' on this edition of PowerShell.
             
            </summary>
        </member>
        <member name="T:ServiceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ServiceResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ServiceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceResources.ServiceNameForConfirmation">
            <summary>
              Looks up a localized string similar to 
               {0} ({1})
             
            </summary>
        </member>
        <member name="P:ServiceResources.NoServiceFoundForGivenName">
            <summary>
              Looks up a localized string similar to 
               Cannot find any service with service name '{0}'.
             
            </summary>
        </member>
        <member name="P:ServiceResources.NoServiceFoundForGivenDisplayName">
            <summary>
              Looks up a localized string similar to 
               Cannot find any service with display name '{1}'.
             
            </summary>
        </member>
        <member name="P:ServiceResources.ServiceHasDependentServices">
            <summary>
              Looks up a localized string similar to 
               Cannot stop service '{1} ({0})' because it has dependent services. It can only be stopped if the Force flag is set.
             
            </summary>
        </member>
        <member name="P:ServiceResources.ServiceHasDependentServicesNoForce">
            <summary>
              Looks up a localized string similar to 
               Cannot stop service '{1} ({0})' because it has dependent services.
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotStopService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be stopped due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotStartService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be started due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSuspendService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be suspended due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSuspendServiceNotSupported">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be suspended because the service does not support being suspended or resumed.
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSuspendServiceNotRunning">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be suspended because it is not currently running.
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotResumeService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be resumed due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotResumeServiceNotSupported">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be resumed because the service does not support being suspended or resumed.
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotResumeServiceNotRunning">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be resumed because it is not currently running.
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSetService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be configured due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotGetServiceInfo">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be queried due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSetServiceDescription">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' description cannot be configured due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSetServiceDelayedAutoStart">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' automatic (delayed start) cannot be configured due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotSetServiceSecurityDescriptorSddl">
            <summary>
              Looks up a localized string similar to 
               Service '{0}' security descriptor cannot be configured due to the following error: {1}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotNewService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be created due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotNewServiceDescription">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' was created, but its description cannot be configured due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotNewServiceDelayedAutoStart">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' was created, but its StartupType 'Automatic (Delayed Start)' could not be configured due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotRemoveService">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' cannot be removed due to the following error: {2}
             
            </summary>
        </member>
        <member name="P:ServiceResources.CouldNotAccessDependentServices">
            <summary>
              Looks up a localized string similar to 
               'Cannot access dependent services of '{1} ({0})'
             
            </summary>
        </member>
        <member name="P:ServiceResources.StartingService">
            <summary>
              Looks up a localized string similar to 
               Waiting for service '{1} ({0})' to start...
             
            </summary>
        </member>
        <member name="P:ServiceResources.StoppingService">
            <summary>
              Looks up a localized string similar to 
               Waiting for service '{1} ({0})' to stop...
             
            </summary>
        </member>
        <member name="P:ServiceResources.SuspendingService">
            <summary>
              Looks up a localized string similar to 
               Waiting for service '{1} ({0})' to suspend...
             
            </summary>
        </member>
        <member name="P:ServiceResources.ResumingService">
            <summary>
              Looks up a localized string similar to 
               Waiting for service '{1} ({0})' to resume...
             
            </summary>
        </member>
        <member name="P:ServiceResources.StartServiceFailed">
            <summary>
              Looks up a localized string similar to 
               Failed to start service '{1} ({0})'.
             
            </summary>
        </member>
        <member name="P:ServiceResources.StopServiceFailed">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' stop failed.
             
            </summary>
        </member>
        <member name="P:ServiceResources.SuspendServiceFailed">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' suspend failed.
             
            </summary>
        </member>
        <member name="P:ServiceResources.ResumeServiceFailed">
            <summary>
              Looks up a localized string similar to 
               Service '{1} ({0})' resume failed.
             
            </summary>
        </member>
        <member name="P:ServiceResources.FailToOpenServiceControlManager">
            <summary>
              Looks up a localized string similar to 
               Failed to configure the service '{1} ({0})' due to the following error: {2}. Run PowerShell as admin and run your command again.
             
            </summary>
        </member>
        <member name="P:ServiceResources.UnsupportedStartupType">
            <summary>
              Looks up a localized string similar to 
               The startup type '{0}' is not supported by {1}.
             
            </summary>
        </member>
        <member name="T:TestConnectionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:TestConnectionResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:TestConnectionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestConnectionResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TestConnectionResources.NoPingResult">
            <summary>
              Looks up a localized string similar to 
               Testing connection to computer '{0}' failed: {1}
             
            </summary>
        </member>
        <member name="P:TestConnectionResources.CannotResolveTargetName">
            <summary>
              Looks up a localized string similar to 
               Cannot resolve the target name.
             
            </summary>
        </member>
        <member name="P:TestConnectionResources.TargetAddressAbsent">
            <summary>
              Looks up a localized string similar to 
               Target IPv4/IPv6 address absent.
             
            </summary>
        </member>
        <member name="P:TestConnectionResources.MaxHopsExceeded">
            <summary>
              Looks up a localized string similar to 
               Cannot complete traceroute to destination '{0}': Number of hops required to reach host exceeds MaxHops ({1}).
             
            </summary>
        </member>
        <member name="T:TestPathResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:TestPathResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:TestPathResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestPathResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TestPathResources.PathIsNullOrEmptyCollection">
            <summary>
              Looks up a localized string similar to 
               The provided Path argument was null or an empty collection.
             
            </summary>
        </member>
        <member name="T:TimeZoneResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:TimeZoneResources.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:TimeZoneResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TimeZoneResources.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TimeZoneResources.MultipleMatchingTimeZones">
            <summary>
              Looks up a localized string similar to 
               Cannot set the local time zone because the name '{0}' resolves to multiple entries.
             
            </summary>
        </member>
        <member name="P:TimeZoneResources.TimeZoneNameNotFound">
            <summary>
              Looks up a localized string similar to 
               The time zone name '{0}' was not found on the local computer.
             
            </summary>
        </member>
    </members>
</doc>
