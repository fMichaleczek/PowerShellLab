<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.Commands.Utility</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PowerShell.Commands.AddMemberCommand">
            <summary>
            This class implements get-member command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.InputObject">
            <summary>
            The object to add a member to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.MemberType">
            <summary>
            The member type of to be added.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.Name">
            <summary>
            The name of the new member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.Value">
            <summary>
            First value of the new member. The meaning of this value changes according to the member type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.SecondValue">
            <summary>
            Second value of the new member. The meaning of this value changes according to the member type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.TypeName">
            <summary>
            Add new type name to the specified object for TypeNameSet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.Force">
            <summary>
            True if we should overwrite a possibly existing member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states output from the command should be placed in the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.NotePropertyName">
            <summary>
            The name of the new NoteProperty member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.NotePropertyValue">
            <summary>
            The value of the new NoteProperty member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddMemberCommand.NotePropertyMembers">
            <summary>
            The NoteProperty members to be set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddMemberCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for add-member command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddMemberCommand.AddMemberToTarget(System.Management.Automation.PSMemberInfo)">
            <summary>
            Add the member to the target object.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddMemberCommand.ProcessNotePropertyMultiMemberSet">
            <summary>
            Process the 'NotePropertyMultiMemberSet' parameter set.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.AddMemberCommand.ValidateNotePropertyNameAttribute">
            <summary>
            This ValidateArgumentsAttribute is used to guarantee the argument to be bound to
            -NotePropertyName parameter cannot be converted to the enum type PSMemberTypes.
            So when given a string or a number that can be converted, we make sure it gets
            bound to -MemberType, instead of -NotePropertyName.
            </summary>
            <remarks>
            This exception will be hidden in the positional binding phase. So we make sure
            if the argument can be converted to PSMemberTypes, it gets bound to the -MemberType
            parameter. We are sure that when this exception is thrown, the current positional
            argument can be successfully bound to.
            </remarks>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.AddMemberCommand.NotePropertyTransformationAttribute">
            <summary>
            Transform the integer arguments to strings for the parameter NotePropertyName.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.Language">
            <summary>
            Languages supported for code generation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Language.CSharp">
            <summary>
            The C# programming language.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutputAssemblyType">
            <summary>
            Types supported for the OutputAssembly parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputAssemblyType.Library">
            <summary>
            A Dynamically linked library (DLL).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputAssemblyType.ConsoleApplication">
            <summary>
            An executable application that targets the console subsystem.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputAssemblyType.WindowsApplication">
            <summary>
            An executable application that targets the graphical subsystem.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.AddTypeCommand">
            <summary>
            Adds a new type to the Application Domain.
            This version is based on CodeAnalysis (Roslyn).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.TypeDefinition">
            <summary>
            The source code of this generated type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.Name">
            <summary>
            The name of the type (class) used for auto-generated types.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.MemberDefinition">
            <summary>
            The source code of this generated method / member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.Namespace">
            <summary>
            The namespace used for the auto-generated type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.UsingNamespace">
            <summary>
            Any using statements required by the auto-generated type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.Path">
            <summary>
            The path to the source code or DLL to load.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.LiteralPath">
            <summary>
            The literal path to the source code or DLL to load.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.AssemblyName">
            <summary>
            The name of the assembly to load.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.Language">
            <summary>
            The language used to compile the source code.
            Default is C#.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.ReferencedAssemblies">
            <summary>
            Any reference DLLs to use in the compilation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.OutputAssembly">
            <summary>
            The path to the output assembly.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.OutputType">
            <summary>
            The output type of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.PassThru">
            <summary>
            Flag to pass the resulting types along.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.IgnoreWarnings">
            <summary>
            Flag to ignore warnings during compilation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.AddTypeCommand.CompilerOptions">
             <summary>
             Roslyn command line parameters.
             https://github.com/dotnet/roslyn/blob/master/docs/compilers/CSharp/CommandLine.md
            
             Parser options:
                 langversion:string - language version from:
                                             [enum]::GetNames([Microsoft.CodeAnalysis.CSharp.LanguageVersion])
                 define:symbol list - preprocessor symbols:
                                             /define:UNIX,DEBUG      - CSharp
            
             Compilation options:
                 optimize{+|-}            - optimization level
                 parallel{+|-}            - concurrent build
                 warnaserror{+|-}         - report warnings to errors
                 warnaserror{+|-}:strings - report specific warnings to errors
                 warn:number              - warning level (0-4) for CSharp
                 nowarn                   - disable all warnings
                 nowarn:strings           - disable a list of individual warnings
                 usings:strings           - ';'-delimited usings for CSharp
            
             Emit options:
                 platform:string          - limit which platforms this code can run on; must be x86, x64, Itanium, arm, AnyCPU32BitPreferred or anycpu (default)
                 delaysign{+|-}           - delay-sign the assembly using only the public portion of the strong name key
                 keyfile:file             - specifies a strong name key file
                 keycontainer:string      - specifies a strong name key container
                 highentropyva{+|-}       - enable high-entropy ASLR.
             </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.BeginProcessing">
            <summary>
            Prevent code compilation in ConstrainedLanguage mode.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.EndProcessing">
            <summary>
            Generate and load the type(s).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.InitDefaultRefAssemblies">
            <summary>
            Initialize the list of reference assemblies that will be used when '-ReferencedAssemblies' is not specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.InitRefAssemblyNamesToIgnore">
            <summary>
            Initialize the set of assembly names that should be ignored when they are specified in '-ReferencedAssemblies'.
              - System.Private.CoreLib.ni.dll - the runtime dll that contains most core/primitive types
              - System.Private.Uri.dll - the runtime dll that contains 'System.Uri' and related types
            Referencing these runtime dlls may cause ambiguous type identity or other issues.
              - System.Runtime.dll - the corresponding reference dll will be automatically included
              - System.Runtime.InteropServices.dll - the corresponding reference dll will be automatically included.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.InitAutoIncludedRefAssemblies">
            <summary>
            Initialize the list of reference assemblies that will be automatically added when '-ReferencedAssemblies' is specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.AddTypeCommand.GetReferenceAssemblyPathBasedOnType(System.Type)">
            <summary>
            Get the path of reference assembly where the type is declared.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CompareObjectCommand">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.ReferenceObject">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.DifferenceObject">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.SyncWindow">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.Property">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.ExcludeDifferent">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.IncludeEqual">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CompareObjectCommand.PassThru">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CompareObjectCommand.Process(Microsoft.PowerShell.Commands.OrderByPropertyEntry)">
            <summary>
            The following is the matching algorithm:
            Retrieve the incoming object (differenceEntry) if any
            Retrieve the next reference object (referenceEntry) if any
            If differenceEntry matches referenceEntry
              Emit referenceEntry as a match
              Return
            If differenceEntry matches any entry in referenceEntryBacklog
              Emit the backlog entry as a match
              Remove the backlog entry from referenceEntryBacklog
              Clear differenceEntry
            If referenceEntry (if any) matches any entry in differenceEntryBacklog
              Emit referenceEntry as a match
              Remove the backlog entry from differenceEntryBacklog
              Clear referenceEntry
            If differenceEntry is still present
              If SyncWindow is 0
                Emit differenceEntry as unmatched
              Else
                While there is no space in differenceEntryBacklog
                  Emit oldest entry in differenceEntryBacklog as unmatched
                  Remove oldest entry from differenceEntryBacklog
                Add differenceEntry to differenceEntryBacklog
            If referenceEntry is still present
              If SyncWindow is 0
                Emit referenceEntry as unmatched
              Else
                While there is no space in referenceEntryBacklog
                  Emit oldest entry in referenceEntryBacklog as unmatched
                  Remove oldest entry from referenceEntryBacklog
                Add referenceEntry to referenceEntryBacklog.
            </summary>
            <param name="differenceEntry"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CompareObjectCommand.BeginProcessing">
            <summary>
            If the parameter 'ExcludeDifferent' is present, then the 'IncludeEqual'
            switch is turned on unless it's turned off by the user specifically.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CompareObjectCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CompareObjectCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConsoleColorCmdlet">
            <summary>
            Base class for a variety of commandlets that take color parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConsoleColorCmdlet.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConsoleColorCmdlet.ForegroundColor">
            <summary>
            The -ForegroundColor parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConsoleColorCmdlet.BackgroundColor">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertFromStringDataCommand">
            <summary>
            Class comment.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromStringDataCommand.StringData">
            <summary>
            The list of properties to display.
            These take the form of an PSPropertyExpression.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromStringDataCommand.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromStringDataCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand">
            <summary>
            Converts a Markdown string to a MarkdownInfo object.
            The conversion can be done into a HTML text or VT100 encoding string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.Path">
            <summary>
            Gets or sets path to the file to convert from Markdown to MarkdownInfo.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.LiteralPath">
            <summary>
            Gets or sets the path to the file to convert from Markdown to MarkdownInfo.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.InputObject">
            <summary>
            Gets or sets the InputObject of type System.IO.FileInfo or string with content to convert from Markdown to MarkdownInfo.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.AsVT100EncodedString">
            <summary>
            Gets or sets if the Markdown document should be converted to a VT100 encoded string.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.BeginProcessing">
            <summary>
            Read the PSMarkdownOptionInfo set in SessionState.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand.ProcessRecord">
            <summary>
            Override ProcessRecord.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToHtmlCommand">
            <summary>
            Class comment.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.InputObject">
            <summary>The incoming object</summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Property">
            <summary>
            The list of properties to display.
            These take the form of a PSPropertyExpression.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Body">
            <summary>
            Text to go after the opening body tag and before the table.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Head">
            <summary>
            Text to go into the head section of the html doc.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Title">
            <summary>
            The string for the title tag
            The title is also placed in the body of the document
            before the table between h3 tags
            If the -Head parameter is used, this parameter has no
            effect.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.As">
            <summary>
            This specifies whether the objects should
            be rendered as an HTML TABLE or
            HTML LIST.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.CssUri">
            <summary>
            This specifies a full or partial URI
            for the CSS information.
            The HTML should reference the CSS file specified.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Fragment">
            <summary>
            When this switch is specified generate only the
            HTML representation of the incoming object
            without the HTML,HEAD,TITLE,BODY,etc tags.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.PostContent">
            <summary>
            Specifies the text to include prior the closing body tag of the HTML output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.PreContent">
            <summary>
            Specifies the text to include after the body tag of the HTML output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Meta">
            <summary>
            Sets and Gets the meta property of the HTML head.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Charset">
            <summary>
            Specifies the charset encoding for the HTML document.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.Transitional">
            <summary>
            When this switch statement is specified,
            it will change the DOCTYPE to XHTML Transitional DTD.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.ConvertHTMLParameterDefinitionKeys">
            <summary>
            Definitions for hash table keys.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.ConvertHTMLExpressionParameterDefinition">
            <summary>
            This allows for @{e='foo';label='bar';alignment='center';width='20'}.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.ProcessParameter(System.Object[])">
            <summary>
            Create a list of MshParameter from properties.
            </summary>
            <param name="properties">Can be a string, ScriptBlock, or Hashtable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.InitializeResolvedNameMshParameters">
            <summary>
            Resolve all wildcards in user input Property into resolvedNameMshParameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.SafeToString(System.Object)">
            <summary>
            Calls ToString. If an exception occurs, eats it and return string.Empty.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.BeginProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WriteColumns(System.Collections.Generic.List{Microsoft.PowerShell.Commands.Internal.Format.MshParameter})">
            <summary>
            Reads Width and Alignment from Property and write Col tags.
            </summary>
            <param name="mshParams"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WriteListEntry">
            <summary>
            Writes the list entries when the As parameter has value List.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WritePropertyName(System.Text.StringBuilder,Microsoft.PowerShell.Commands.Internal.Format.MshParameter)">
            <summary>
            To write the Property name.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WritePropertyValue(System.Text.StringBuilder,Microsoft.PowerShell.Commands.Internal.Format.MshParameter)">
            <summary>
            To write the Property value.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WriteTableHeader(System.Text.StringBuilder,System.Collections.Generic.List{Microsoft.PowerShell.Commands.Internal.Format.MshParameter})">
            <summary>
            To write the Table header for the object property names.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.WriteTableRow(System.Text.StringBuilder,System.Collections.Generic.List{Microsoft.PowerShell.Commands.Internal.Format.MshParameter})">
            <summary>
            To write the Table row for the object property values.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToHtmlCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToHtmlCommand._isTHWritten">
            <summary>
            List of incoming objects to compare.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CSVHelper">
            <summary>
            This class is used to parse CSV text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CSVHelper.Delimiter">
            <summary>
            Gets or sets the delimiter that separates the values.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CSVHelper.ParseCsv(System.String)">
            <summary>
            Parse a CSV string.
            </summary>
            <param name="csv">
            String to be parsed.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.BaseCsvWritingCommand">
            <summary>
            This class implements the base for exportcsv and converttocsv commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.Delimiter">
            <summary>
            Property that sets delimiter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.UseCulture">
            <summary>
            Culture switch for csv conversion
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.InputObject">
            <summary>
            Abstract Property - Input Object which is written in Csv format.
            Derived as Different Attributes.In ConvertTo-CSV, This is a positional parameter. Export-CSV not a Positional behaviour.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.IncludeTypeInformation">
            <summary>
            IncludeTypeInformation : The #TYPE line should be generated. Default is false. Cannot specify with NoTypeInformation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.NoTypeInformation">
            <summary>
            NoTypeInformation : The #TYPE line should not be generated. Default is true. Cannot specify with IncludeTypeInformation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteFields">
            <summary>
            Gets or sets list of fields to quote in output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.UseQuotes">
            <summary>
            Gets or sets option to use or suppress quotes in output.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteKind">
            <summary>
            Kind of output quoting.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteKind.Never">
            <summary>
            Never quote output.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteKind.Always">
            <summary>
            Always quote output.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteKind.AsNeeded">
            <summary>
            Quote output as needed (a field contains used delimiter).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.WriteCsvLine(System.String)">
            <summary>
            Write the string to a file or pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.BaseCsvWritingCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportCsvCommand">
            <summary>
            Implementation for the Export-Csv command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.InputObject">
            <summary>
            Input Object for CSV Writing.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.Path">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.LiteralPath">
            <summary>
            The literal path of the mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.Force">
            <summary>
            Gets or sets property that sets force parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.NoClobber">
            <summary>
            Gets or sets property that prevents file overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.Encoding">
            <summary>
            Gets or sets encoding optional flag.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportCsvCommand.Append">
            <summary>
            Gets or sets property that sets append parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvCommand.ProcessRecord">
            <summary>
            Convert the current input object to Csv and write to file/WriteObject.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvCommand.EndProcessing">
            <summary>
            EndProcessing.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportCsvCommand._fs">
            <summary>
            Handle to file stream.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportCsvCommand._sw">
            <summary>
            Stream writer used to write to file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportCsvCommand._readOnlyFileInfo">
            <summary>
            Handle to file whose read-only attribute should be reset when we are done.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvCommand.WriteCsvLine(System.String)">
            <summary>
            Write the csv line to file.
            </summary>
            <param name="line">Line to write.</param>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportCsvCommand._disposed">
            <summary>
            Set to true when object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvCommand.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportCsvCommand">
            <summary>
            Implements Import-Csv command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.Delimiter">
            <summary>
            Gets or sets property that sets delimiter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.Path">
            <summary>
            Gets or sets mandatory file name to read from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.LiteralPath">
            <summary>
            Gets or sets the literal path of the mandatory file name to read from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.UseCulture">
            <summary>
            Gets or sets property that sets UseCulture parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.Header">
            <summary>
             Gets or sets header property to customize the names.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvCommand.Encoding">
            <summary>
            Gets or sets encoding optional flag.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvCommand._alreadyWarnedUnspecifiedNames">
            <summary>
            Avoid writing out duplicate warning messages when there are one or more unspecified names.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvCommand.ProcessRecord">
            <summary>
            ProcessRecord overload.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToCsvCommand">
            <summary>
            Implements ConvertTo-Csv command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToCsvCommand.InputObject">
            <summary>
            Overrides Base InputObject.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToCsvCommand._propertyNames">
            <summary>
            Stores Property Names.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToCsvCommand._helper">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToCsvCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToCsvCommand.ProcessRecord">
            <summary>
            Convert the current input object to Csv and write to stream/WriteObject.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToCsvCommand.WriteCsvLine(System.String)">
            <summary>
            Write the line to output.
            </summary>
            <param name="line">Line to write.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertFromCsvCommand">
            <summary>
            Implements ConvertFrom-Csv command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.Delimiter">
            <summary>
            Property that sets delimiter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.UseCulture">
            <summary>
            Culture switch for csv conversion
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.InputObject">
            <summary>
            Gets or sets input object which is written in Csv format.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.Header">
            <summary>
             Gets or sets header property to customize the names.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertFromCsvCommand._alreadyWarnedUnspecifiedNames">
            <summary>
            Avoid writing out duplicate warning messages when there are one or more unspecified names.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromCsvCommand.ProcessRecord">
            <summary>
            Convert the current input object to Csv and write to stream/WriteObject.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportCsvHelper">
            <summary>
            Helper class for Export-Csv and ConvertTo-Csv.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.#ctor(System.Char,Microsoft.PowerShell.Commands.BaseCsvWritingCommand.QuoteKind,System.String[])">
            <summary>
            Create ExportCsvHelper instance.
            </summary>
            <param name="delimiter">Delimiter char.</param>
            <param name="quoteKind">Kind of quoting.</param>
            <param name="quoteFields">List of fields to quote.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.BuildPropertyNames(System.Management.Automation.PSObject,System.Collections.Generic.IList{System.String})">
            <summary>
            Get the name of properties from source PSObject and add them to _propertyNames.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.ConvertPropertyNamesCSV(System.Collections.Generic.IList{System.String})">
            <summary>
            Converts PropertyNames in to a CSV string.
            </summary>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.ConvertPSObjectToCSV(System.Management.Automation.PSObject,System.Collections.Generic.IList{System.String})">
            <summary>
            Convert PSObject to CSV string.
            </summary>
            <param name="mshObject">PSObject to convert.</param>
            <param name="propertyNames">Property names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.GetToStringValueForProperty(System.Management.Automation.PSPropertyInfo)">
            <summary>
            Get value from property object.
            </summary>
            <param name="property"> Property to convert.</param>
            <returns>ToString() value.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.GetTypeString(System.Management.Automation.PSObject)">
            <summary>
            Prepares string for writing type information.
            </summary>
            <param name="source">PSObject whose type to determine.</param>
            <returns>String with type information.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.AppendStringWithEscapeAlways(System.Text.StringBuilder,System.String)">
            <summary>
            Escapes the " in string if necessary.
            Encloses the string in double quotes if necessary.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportCsvHelper._disposed">
            <summary>
            Set to true when object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportCsvHelper.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportCsvHelper">
            <summary>
            Helper class to import single CSV file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvHelper._cmdlet">
            <summary>
            Reference to cmdlet which is using this helper class.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvHelper._delimiter">
            <summary>
            CSV delimiter (default is the "comma" / "," character).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvHelper.UnspecifiedName">
            <summary>
            Use "UnspecifiedName" when the name is null or empty.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvHelper._alreadyWarnedUnspecifiedName">
            <summary>
            Avoid writing out duplicate warning messages when there are one or more unspecified names.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvHelper.Header">
            <summary>
            Gets reference to header values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvHelper.TypeName">
            <summary>
            Gets ETS type name from the first line / comment in the CSV.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportCsvHelper._sr">
            <summary>
            Reader of the csv content.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportCsvHelper.EOF">
            <summary>
            This is set to true when end of file is reached.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.PeekNextChar(System.Char)">
            <summary>
            Peeks the next character in the stream and returns true if it is same as passed in character.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.ReadLine">
            <summary>
            Reads a line from file. This consumes the end of line.
            Only use it when end of line chars are not important.
            </summary>
            <returns>Line from file.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.ValidatePropertyNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Validate the names of properties.
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.ReadTypeInformation">
            <summary>
            Read the type information, if present.
            </summary>
            <returns>Type string if present else null.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.ParseNextRecord(System.Collections.Generic.List{System.String},System.Text.StringBuilder)">
            <summary>
            Reads the next record from the file and returns parsed collection of string.
            </summary>
            <returns>
            Parsed collection of strings.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportCsvHelper.ReadTillNextDelimiter(System.Text.StringBuilder,System.Boolean@,System.Boolean)">
            <summary>
            This function reads the characters till next delimiter and adds them to current.
            </summary>
            <param name="current"></param>
            <param name="endOfRecord">
            This is true if end of record is reached
            when delimiter is hit. This would be true if delimiter is NewLine.
            </param>
            <param name="eatTrailingBlanks">
            If this is true, eat the trailing blanks. Note:if there are non
            whitespace characters present, then trailing blanks are not consumed.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportExportCSVHelper">
            <summary>
            Helper class for CSV conversion.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DebugRunspaceCommand">
            <summary>
            This cmdlet takes a Runspace object and checks to see if it is debuggable (i.e, if
            it is running a script or is currently stopped in the debugger.
            If it is debuggable then it breaks into the Runspace debugger in step mode.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugRunspaceCommand.Runspace">
            <summary>
            The Runspace to be debugged.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugRunspaceCommand.Name">
            <summary>
            The name of a Runspace to be debugged.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugRunspaceCommand.Id">
            <summary>
            The Id of a Runspace to be debugged.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugRunspaceCommand.InstanceId">
            <summary>
            The InstanceId of a Runspace to be debugged.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DebugRunspaceCommand.BreakAll">
            <summary>
            Gets or sets a flag that tells PowerShell to automatically perform a BreakAll when the debugger is attached to the remote target.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DebugRunspaceCommand.EndProcessing">
            <summary>
            End processing.  Do work.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DebugRunspaceCommand.StopProcessing">
            <summary>
            Stop processing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DisablePSBreakpointCommand">
            <summary>
            This class implements Disable-PSBreakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.DisablePSBreakpointCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states whether the
            command should place the breakpoints it processes in the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DisablePSBreakpointCommand.ProcessBreakpoint(System.Management.Automation.Breakpoint)">
            <summary>
            Disables the given breakpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.EnablePSBreakpointCommand">
            <summary>
            This class implements Enable-PSBreakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.EnablePSBreakpointCommand.PassThru">
            <summary>
            Gets or sets the parameter -passThru which states whether the
            command should place the breakpoints it processes in the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.EnablePSBreakpointCommand.ProcessBreakpoint(System.Management.Automation.Breakpoint)">
            <summary>
            Enables the given breakpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSRunspaceDebug">
            <summary>
            Runspace Debug Options class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSRunspaceDebug.Enabled">
            <summary>
            When true this property will cause any breakpoints set in a Runspace to stop
            the running command or script when the breakpoint is hit, regardless of whether a
            debugger is currently attached.  The script or command will remain stopped until
            a debugger is attached to debug the breakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSRunspaceDebug.BreakAll">
            <summary>
            When true this property will cause any running command or script in the Runspace
            to stop in step mode, regardless of whether a debugger is currently attached.  The
            script or command will remain stopped until a debugger is attached to debug the
            current stop point.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSRunspaceDebug.RunspaceName">
            <summary>
            Name of runspace for which the options apply.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSRunspaceDebug.RunspaceId">
            <summary>
            Local Id of runspace for which the options apply.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSRunspaceDebug.#ctor(System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="enabled">Enable debugger option.</param>
            <param name="breakAll">BreakAll option.</param>
            <param name="runspaceName">Runspace name.</param>
            <param name="runspaceId">Runspace local Id.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase">
            <summary>
            Abstract class that defines common Runspace Command parameters.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceParameterSet">
            <summary>
            RunspaceParameterSet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceNameParameterSet">
            <summary>
            RunspaceNameParameterSet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceIdParameterSet">
            <summary>
            RunspaceIdParameterSet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceInstanceIdParameterSet">
            <summary>
            RunspaceInstanceIdParameterSet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.ProcessNameParameterSet">
            <summary>
            ProcessNameParameterSet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceName">
            <summary>
            Runspace Name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.Runspace">
            <summary>
            Runspace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceId">
            <summary>
            Runspace Id.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.RunspaceInstanceId">
            <summary>
            RunspaceInstanceId.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.ProcessName">
            <summary>
            Gets or Sets the ProcessName for which runspace debugging has to be enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.AppDomainName">
            <summary>
            Gets or Sets the AppDomain Names for which runspace debugging has to be enabled or disabled.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.GetRunspaces">
            <summary>
            Returns a list of valid runspaces based on current parameter set.
            </summary>
            <returns>IReadOnlyList.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.GetDebuggerFromRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Returns Runspace Debugger.
            </summary>
            <param name="runspace">Runspace.</param>
            <returns>Debugger.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.CommonRunspaceCommandBase.SetDebugPreferenceHelper(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            SetDebugPreferenceHelper is a helper method used to enable/disable debug preference.
            </summary>
            <param name="processName">Process Name.</param>
            <param name="appDomainName">App Domain Name.</param>
            <param name="enable">Indicates if debug preference has to be enabled or disabled.</param>
            <param name="fullyQualifiedErrorId">FullyQualifiedErrorId to be used on error.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.EnableRunspaceDebugCommand">
            <summary>
            This cmdlet enables debugging for selected runspaces in the current or specified process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.EnableRunspaceDebugCommand.BreakAll">
            <summary>
            When true this property will cause any running command or script in the Runspace
            to stop in step mode, regardless of whether a debugger is currently attached.  The
            script or command will remain stopped until a debugger is attached to debug the
            current stop point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.EnableRunspaceDebugCommand.ProcessRecord">
            <summary>
            Process Record.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DisableRunspaceDebugCommand">
            <summary>
            This cmdlet disables Runspace debugging in selected Runspaces.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.DisableRunspaceDebugCommand.ProcessRecord">
            <summary>
            Process Record.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetRunspaceDebugCommand">
            <summary>
            This cmdlet returns a PSRunspaceDebug object for each found Runspace object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRunspaceDebugCommand.ProcessRecord">
            <summary>
            Process Record.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WaitDebuggerCommand">
            <summary>
            This cmdlet causes a running script or command to stop in the debugger at the next execution point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitDebuggerCommand.EndProcessing">
            <summary>
            EndProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportAliasFormat">
            <summary>
            The formats that export-alias supports.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportAliasFormat.Csv">
            <summary>
            Aliases will be exported to a CSV file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportAliasFormat.Script">
            <summary>
            Aliases will be exported as an MSH script.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportAliasCommand">
            <summary>
            The implementation of the "export-alias" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Path">
            <summary>
            The Path of the file to export the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.LiteralPath">
            <summary>
            The literal path of the file to export the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Name">
            <summary>
            The Name parameter for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.PassThru">
            <summary>
            If set to true, the alias that is set is passed to the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.As">
            <summary>
            Parameter that determines the format of the file created.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Append">
            <summary>
            Property that sets append parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Force">
            <summary>
            Property that sets force parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.NoClobber">
            <summary>
            Property that prevents file overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Description">
            <summary>
            The description that gets added to the file as a comment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportAliasCommand.Scope">
            <summary>
            The scope parameter for the command determines
            which scope the aliases are retrieved from.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportAliasCommand.EndProcessing">
            <summary>
            Writes the aliases to the file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportAliasCommand._matchingAliases">
            <summary>
            Holds all the matching aliases for writing to the file.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportAliasCommand.OpenFile(System.IO.FileInfo@)">
            <summary>
            Open the file to which aliases should be exported.
            </summary>
            <param name="readOnlyFileInfo">
            If not null, this is the file whose read-only attribute
            was cleared (due to the -Force parameter).  The attribute
            should be reset.
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetFormatDataCommand">
            <summary>
            Gets formatting information from the loading format information database.
            </summary>
            <remarks>Currently supports only table controls
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetFormatDataCommand.TypeName">
            <summary>
            Get Formatting information only for the specified typename.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetFormatDataCommand.PowerShellVersion">
            <summary>
            When specified, helps control whether or not to send richer formatting data
            that was not supported by earlier versions of PowerShell.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFormatDataCommand.BeginProcessing">
            <summary>
            Set the default filter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFormatDataCommand.ProcessRecord">
            <summary>
            Takes out the content from the database and writes them out.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportFormatDataCommand">
            <summary>
            Cmdlet used to write a collection of formatting directives to an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.InputObject">
            <summary>
            Type definition to include in export.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.Path">
            <summary>
            Path of the XML file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.LiteralPath">
            <summary>
            Literal path of the XML file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.Force">
            <summary>
            Force writing a file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.NoClobber">
            <summary>
            Do not overwrite file if exists.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportFormatDataCommand.IncludeScriptBlock">
            <summary>
            Include scriptblocks for export.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportFormatDataCommand.ProcessRecord">
            <summary>
            Adds the type to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportFormatDataCommand.EndProcessing">
            <summary>
            Writes out the formatting directives from the
            collection to the specified XML file.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormatHex">
            <summary>
            Displays the hexadecimal equivalent of the input data.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.FormatHex._inputBuffer">
            <summary>
            For cases where a homogenous collection of bytes or other items are directly piped in, we collect all the
            bytes in a List&lt;byte&gt; and then output the formatted result all at once in EndProcessing().
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.FormatHex._groupInput">
            <summary>
            Expect to group <see cref="P:Microsoft.PowerShell.Commands.FormatHex.InputObject"/>s by default. When receiving input that should not be grouped,
            e.g., arrays, strings, FileInfo objects, this flag will be disabled until the next groupable
            <see cref="P:Microsoft.PowerShell.Commands.FormatHex.InputObject"/> is received over the pipeline.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.FormatHex._lastInputType">
            <summary>
            Keep track of prior input types to determine if we're given a heterogenous collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.Path">
            <summary>
            Gets or sets the path of file(s) to process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.LiteralPath">
            <summary>
            Gets or sets the literal path of file to process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.InputObject">
            <summary>
            Gets or sets the object to process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.Encoding">
            <summary>
            Gets or sets the type of character encoding for InputObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.Count">
            <summary>
            Gets or sets count of bytes to read from the input stream.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.Offset">
            <summary>
            Gets or sets offset of bytes to start reading the input stream from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatHex.Raw">
            <summary>
            Gets or sets whether the file input should be swallowed as is. This parameter is no-op, deprecated.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ProcessRecord">
            <summary>
            Implements the ProcessRecord method for the FormatHex command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.EndProcessing">
            <summary>
            Implements the EndProcessing method for the FormatHex command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ResolvePaths(System.String[],System.Boolean)">
            <summary>
            Validate each path provided and if valid, add to array of paths to process.
            If path is a literal path it is added to the array to process; we cannot validate them until we
            try to process file contents.
            </summary>
            <param name="path">The file path to resolve.</param>
            <param name="literalPath">The paths to process.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ProcessPath(System.Collections.Generic.List{System.String})">
            <summary>
            Pass each valid path on to process its contents.
            </summary>
            <param name="pathsToProcess">The paths to process.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ProcessFileContent(System.String)">
            <summary>
            Creates a binary reader that reads the file content into a buffer (byte[]) 16 bytes at a time, and
            passes a copy of that array on to the WriteHexadecimal method to output.
            </summary>
            <param name="path">The file path to retrieve content from for processing.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ProcessInputObjects(System.Management.Automation.PSObject)">
            <summary>
            Creates a byte array from the object passed to the cmdlet (based on type) and passes
            that array on to the WriteHexadecimal method to output.
            </summary>
            <param name="inputObject">The pipeline input object being processed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.ConvertToBytes(System.Object)">
            <summary>
            Converts the input object to a byte array based on the underlying type for basic value types and strings,
            as well as enum values or arrays.
            </summary>
            <param name="inputObject">The object to convert.</param>
            <returns>Returns a byte array of the input values, or null if there is no available conversion path.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.WriteHexadecimal(System.Span{System.Byte},System.String,System.Int64)">
            <summary>
            Outputs the hexadecimal representation of the input data.
            </summary>
            <param name="inputBytes">Bytes for the hexadecimal representation.</param>
            <param name="path">File path.</param>
            <param name="offset">Offset in the file.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatHex.WriteHexadecimal(System.Span{System.Byte},System.Int64,System.String)">
            <summary>
            Outputs the hexadecimal representation of the input data.
            </summary>
            <param name="inputBytes">Bytes for the hexadecimal representation.</param>
            <param name="offset">Offset in the file.</param>
            <param name="label">
            The label for the byte group. This may be a file path, a string value, or a
            formatted identifying string for the group.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormatListCommand">
            <summary>
            Implementation for the format-table command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatListCommand.#ctor">
            <summary>
            Constructor to set the inner command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormatCustomCommand">
            <summary>
            Implementation for the format-custom command. It just calls the formatting engine on complex shape.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatCustomCommand.#ctor">
            <summary>
            Constructor to se the inner command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatCustomCommand.Property">
            <summary>
            Positional parameter for properties, property sets and table sets.
            specified on the command line.
            The parameter is optional, since the defaults
            will be determined using property sets, etc.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatCustomCommand.Depth">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormatTableCommand">
            <summary>
            Implementation for the format-table command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatTableCommand.#ctor">
            <summary>
            Constructor to set the inner command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormatWideCommand">
            <summary>
            Implementation for the format-table command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormatWideCommand.#ctor">
            <summary>
            Constructor to se the inner command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatWideCommand.Property">
            <summary>
            Positional parameter for properties, property sets and table sets specified on the command line.
            The parameter is optional, since the defaults will be determined using property sets, etc.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatWideCommand.AutoSize">
            <summary>
            Optional, non positional parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormatWideCommand.Column">
            <summary>
            Optional, non positional parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutFileCommand">
            <summary>
            Implementation for the out-file command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.#ctor">
            <summary>
            Set inner command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.FilePath">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.LiteralPath">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.Encoding">
            <summary>
            Encoding optional flag.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.Append">
            <summary>
            Property that sets append parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.Force">
            <summary>
            Property that sets force parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.NoClobber">
            <summary>
            Property that prevents file overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.Width">
            <summary>
            Optional, number of columns to use when writing to device.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutFileCommand.NoNewline">
            <summary>
            False to add a newline to the end of the output string, true if not.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.BeginProcessing">
            <summary>
            Read command line parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.InstantiateLineOutputInterface">
            <summary>
            One-time initialization: acquire a screen host interface
            by creating one on top of a file.
            NOTICE: we assume that at this time the file name is
            available in the CRO. JonN recommends: file name has to be
            a MANDATORY parameter on the command line.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.ProcessRecord">
            <summary>
            Execution entry point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.EndProcessing">
            <summary>
            Execution entry point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutFileCommand.InternalDispose">
            <summary>
            InternalDispose.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutFileCommand._fs">
            <summary>
            Handle to file stream.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutFileCommand._sw">
            <summary>
            Stream writer used to write to file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutFileCommand._processRecordExecuted">
            <summary>
            Indicate whether the ProcessRecord method was executed.
            When the Out-File is used in a redirection pipelineProcessor,
            its ProcessRecord method may not be called when nothing is written to the
            output pipe, for example:
                Write-Error error > test.txt
            In this case, the EndProcess method should return immediately as if it's
            never been called.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutFileCommand._readOnlyFileInfo">
            <summary>
            FileInfo of file to clear read-only flag when operation is complete.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutPrinterCommand">
            <summary>
            Implementation for the out-printer command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutPrinterCommand.#ctor">
            <summary>
            Set inner command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutPrinterCommand.Name">
            <summary>
            Optional name of the printer to print to.
            The alias allows "lp -P printer".
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutPrinterCommand.BeginProcessing">
            <summary>
            Read command line parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutPrinterCommand.InstantiateLineOutputInterface">
            <summary>
            One-time initialization: acquire a screen host interface by creating one on top of a memory buffer.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput">
            <summary>
            Implementation of the LineOutput interface for printer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.RequiresBuffering">
            <summary>
            Full buffering for printer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.ExecuteBufferPlayBack(Microsoft.PowerShell.Commands.Internal.Format.LineOutput.DoPlayBackCall)">
            <summary>
            Do the printing on playback.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.ColumnNumber">
            <summary>
            The # of columns for the printer.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.RowNumber">
            <summary>
            The # of rows for the printer.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.WriteLine(System.String)">
            <summary>
            Write a line to the output device.
            </summary>
            <param name="s">Line to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.#cctor">
            <summary>
            Used for static initializations like DefaultPrintFontName.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.#ctor(System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="printerName">Name of printer, if null use default printer.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.OnWriteLine(System.String)">
            <summary>
            Callback to be called when IConsole.WriteLine() is called by WriteLineHelper.
            </summary>
            <param name="s">String to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.OnWrite(System.String)">
            <summary>
            Callback to be called when Console.Write() is called by WriteLineHelper.
            This is called when the WriteLineHelper needs to write a line whose length
            is the same as the width of the screen buffer.
            </summary>
            <param name="s">String to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.DoPrint">
            <summary>
            Do the printing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.CreateFont(System.Drawing.Graphics)">
            <summary>
            Helper to create a font.
            If the font object exists, it does nothing.
            Else, the a new object is created and verified.
            </summary>
            <param name="g">GDI+ graphics object needed for verification.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.VerifyFont(System.Drawing.Graphics)">
            <summary>
            Internal helper to verify that the font is fixed pitch. If the test fails,
            it reverts to the default font.
            </summary>
            <param name="g">GDI+ graphics object needed for verification.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Event fired for each page to print.
            </summary>
            <param name="sender">Sender, not used.</param>
            <param name="ev">Print page event.</param>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._printingInitialized">
            <summary>
            Flag for one-time initialization of the interface (columns, etc.).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._playbackCall">
            <summary>
            Callback to ask the outputter to playback its cache.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._printerName">
            <summary>
            Name of the printer to print to. Null means default printer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._printFontName">
            <summary>
            Name of the font to use, if null the default is used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._printFontSize">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.s_defaultPrintFontName">
            <summary>
            Default font, used if the printFont is not specified or if the
            printFont is not fixed pitch.
            </summary>
            <remarks>
            This default must be loaded from a resource file as different
            cultures will have different defaults and the localizer would
            know the default for different cultures.
            </remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput.DefaultPrintFontSize">
            <summary>
            Default size for the default font.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._deviceColumns">
            <summary>
            Number of columns on the sheet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._lines">
            <summary>
            Text lines ready to print (after output cache playback).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput._printFont">
            <summary>
            Cached font object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutStringCommand">
            <summary>
            Implementation for the out-string command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutStringCommand.Stream">
            <summary>
            Optional, non positional parameter to specify the streaming behavior.
            FALSE: accumulate all the data, then write a single string.
            TRUE: write one line at the time.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutStringCommand.Width">
            <summary>
            Optional, number of columns to use when writing to device.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutStringCommand.NoNewline">
            <summary>
            False to add a newline to the end of the output string, true if not.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.#ctor">
            <summary>
            Set inner command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.BeginProcessing">
            <summary>
            Read command line parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.InstantiateLineOutputInterface">
            <summary>
            One-time initialization: acquire a screen host interface
            by creating one on top of a stream.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.OnWriteLine(System.String)">
            <summary>
            Callback to add lines to the buffer or to write them to the output stream.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.ProcessRecord">
            <summary>
            Execution entry point.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutStringCommand.EndProcessing">
            <summary>
            Execution entry point.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutStringCommand._writer">
            <summary>
            Writer used by the LineOutput.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutStringCommand._buffer">
            <summary>
            Buffer used when buffering until the end.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ColumnInfo.LimitString(System.Object)">
            <summary>
            Auxiliar used in GetValue methods since the list does not deal well with unlimited sized lines.
            </summary>
            <param name="src">Source string.</param>
            <returns>The source string limited in the number of lines.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutputModeOption">
            <summary>
            Enum for SelectionMode parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputModeOption.None">
            <summary>
            None is the default and it means OK and Cancel will not be present
            and no objects will be written to the pipeline.
            The selectionMode of the actual list will still be multiple.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputModeOption.Single">
            <summary>
            Allow selection of one single item to be written to the pipeline.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutputModeOption.Multiple">
             <summary>
            Allow select of multiple items to be written to the pipeline.
             </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OutGridViewCommand">
            <summary>
            Implementation for the Out-GridView command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.#ctor">
            <summary>
            Constructor for OutGridView.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutGridViewCommand.InputObject">
            <summary>
            This parameter specifies the current pipeline object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutGridViewCommand.Title">
            <summary>
            Gets/sets the title of the Out-GridView window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutGridViewCommand.Wait">
            <summary>
            Get or sets a value indicating whether the cmdlet should wait for the window to be closed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutGridViewCommand.OutputMode">
            <summary>
            Get or sets a value indicating whether the selected items should be written to the pipeline
            and if it should be possible to select multiple or single list items.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OutGridViewCommand.PassThru">
            <summary>
            Gets or sets a value indicating whether the selected items should be written to the pipeline.
            Setting this to true is the same as setting the OutputMode to Multiple.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.BeginProcessing">
            <summary>
            Provides a one-time, pre-processing functionality for the cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.EndProcessing">
            <summary>
            Blocks depending on the wait and selected.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.ProcessRecord">
            <summary>
            Provides a record-by-record processing functionality for the cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.StopProcessing">
            <summary>
            StopProcessing is called close the window when Ctrl+C in the command prompt.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.ConvertToString(System.Management.Automation.PSObject)">
            <summary>
            Converts the provided PSObject to a string preserving PowerShell formatting.
            </summary>
            <param name="liveObject">PSObject to be converted to a string.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.ProcessObject(System.Management.Automation.PSObject)">
            <summary>
            Execute formatting on a single object.
            </summary>
            <param name="input">Object to process.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic.
            </summary>
            <param name="isDisposing">True if being called from Dispose.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.Dispose">
            <summary>
            Dispose method in IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutGridViewCommand.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.OutWindowProxy._headerInfo">
            <summary> Columns definition of the underlying Management List</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.#ctor(System.String,Microsoft.PowerShell.Commands.OutputModeOption,Microsoft.PowerShell.Commands.OutGridViewCommand)">
            <summary>
            Initializes a new instance of the OutWindowProxy class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.AddColumns(System.String[],System.String[],System.Type[])">
            <summary>
            Adds columns to the output window.
            </summary>
            <param name="propertyNames">An array of property names to add.</param>
            <param name="displayNames">An array of display names to add.</param>
            <param name="types">An array of types to add.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.AddItem(System.Management.Automation.PSObject)">
            <summary>
            Adds an item to the out window.
            </summary>
            <param name="livePSObject">
            The item to add.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.AddHeteroViewItem(System.Management.Automation.PSObject)">
            <summary>
            Adds an item to the out window.
            </summary>
            <param name="livePSObject">
            The item to add.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.ShowWindow">
            <summary>
            Shows the out window if it has not already been displayed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic.
            </summary>
            <param name="isDisposing">True if being called from Dispose.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.Dispose">
            <summary>
            Dispose method in IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.CloseWindow">
            <summary>
            Close the window if it has already been displayed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.IsWindowClosed">
            <summary>
            Gets a value indicating whether the out window is closed.
            </summary>
            <returns>
            True if the out window is closed, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.GetLastException">
            <summary>Returns any exception that has been thrown by previous method calls.</summary>
            <returns>The thrown and caught exception. It returns null if no exceptions were thrown by any previous method calls.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OutWindowProxy.GetSelectedItems">
            <summary>
            Return the selected item of the OutGridView.
            </summary>
            <returns>
            The selected item.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TableView.FilterActiveAssociationList(System.Collections.Generic.List{Microsoft.PowerShell.Commands.Internal.Format.MshResolvedExpressionParameterAssociation})">
             <summary>
             Method to filter resolved expressions as per table view needs.
             For v1.0, table view supports only 10 properties.
            
             This method filters and updates "activeAssociationList" instance property.
             </summary>
             <returns>None.</returns>
             <remarks>This method updates "activeAssociationList" instance property.</remarks>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetErrorCommand">
            <summary>
            Class for Get-Error implementation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetErrorCommand.InputObject">
            <summary>
            Gets or sets the error object to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetErrorCommand.Newest">
            <summary>
            Gets or sets the number of error objects to resolve starting with newest first.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetErrorCommand.ProcessRecord">
            <summary>
            Process the error object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.BreakpointType">
            <summary>
            Types of breakpoints.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BreakpointType.Line">
            <summary>Breakpoint on a line within a script</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BreakpointType.Variable">
            <summary>
            Breakpoint on a variable</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.BreakpointType.Command">
            <summary>Breakpoint on a command</summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetPSBreakpointCommand">
            <summary>
            This class implements Get-PSBreakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Script">
            <summary>
            Scripts of the breakpoints to output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Id">
            <summary>
            IDs of the breakpoints to output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Variable">
            <summary>
            Variables of the breakpoints to output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Command">
            <summary>
            Commands of the breakpoints to output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Type">
            <summary>
            Commands of the breakpoints to output.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.ProcessRecord">
            <summary>
            Remove breakpoints.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.FilterSelector`1">
            <summary>
            Gives the criteria to filter breakpoints.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSBreakpointCommand.Filter``1(System.Collections.Generic.List{System.Management.Automation.Breakpoint},``0[],Microsoft.PowerShell.Commands.GetPSBreakpointCommand.FilterSelector{``0})">
            <summary>
            Returns the items in the input list that match an item in the filter array according to
            the given selection criterion.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetPSCallStackCommand">
            <summary>
            This class implements Get-PSCallStack.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetPSCallStackCommand.ProcessRecord">
            <summary>
            Get the call stack.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetAliasCommand">
            <summary>
            The implementation of the "get-alias" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetAliasCommand.Name">
            <summary>
            The Name parameter for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetAliasCommand.Exclude">
            <summary>
            The Exclude parameter for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetAliasCommand.Scope">
            <summary>
            The scope parameter for the command determines
            which scope the aliases are retrieved from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetAliasCommand.Definition">
            <summary>
            Parameter definition to retrieve aliases based on their definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetCultureCommand">
            <summary>
            Returns:
                - the thread's current culture
                - culture by name
                - list of all supported cultures.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetCultureCommand.Name">
            <summary>
            Gets or sets culture names for which CultureInfo values are returned.
            Empty string matches Invariant culture.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetCultureCommand.NoUserOverrides">
            <summary>
            Gets or sets a switch to return current culture with user overrides (by default).
            With the switch on, we return current culture without user overrides.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetCultureCommand.ListAvailable">
            <summary>
            Gets or sets a switch to list all available cultures.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetCultureCommand.ProcessRecord">
            <summary>
            Output:
                - the thread's current culture
                - culture by name
                - list of all supported cultures.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ValidateCultureNamesGenerator">
            <summary>
            Get list of valid culture names for ValidateSet attribute.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetDateCommand">
            <summary>
            Implementation for the get-date command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Date">
            <summary>
            Allows user to override the date/time object that will be processed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.UnixTimeSeconds">
            <summary>
            Gets or sets whether to treat a numeric input as ticks, or unix time.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Year">
            <summary>
            Allows the user to override the year.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Month">
            <summary>
            Allows the user to override the month.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Day">
            <summary>
            Allows the user to override the day.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Hour">
            <summary>
            Allows the user to override the hour.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Minute">
            <summary>
            Allows the user to override the minute.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Second">
            <summary>
            Allows the user to override the second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Millisecond">
            <summary>
            Allows the user to override the millisecond.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.DisplayHint">
            <summary>
            This option determines the default output format used to display the object get-date emits.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.UFormat">
            <summary>
            Unix format string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.Format">
            <summary>
            DotNet format string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetDateCommand.AsUTC">
            <summary>
            Gets or sets a value that converts date to UTC before formatting.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetDateCommand.ProcessRecord">
            <summary>
            Get the time.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetDateCommand.UFormatDateString(System.DateTime)">
            <summary>
            This is more an implementation of the UNIX strftime.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.DisplayHintType">
            <summary>
            Display Hint type.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.DisplayHintType.Date">
            <summary>
            Display preference Date-Only.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.DisplayHintType.Time">
            <summary>
            Display preference Time-Only.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.DisplayHintType.DateTime">
            <summary>
            Display preference Date and Time.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetEventCommand">
            <summary>
            Gets events from the event queue.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetEventCommand.SourceIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetEventCommand.EventIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetEventCommand.EndProcessing">
            <summary>
            Get the requested events.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetEventSubscriberCommand">
            <summary>
            Lists all event subscribers.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetEventSubscriberCommand.SourceIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetEventSubscriberCommand.SubscriptionId">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetEventSubscriberCommand.Force">
            <summary>
            Also show supporting events.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetEventSubscriberCommand.ProcessRecord">
            <summary>
            Get the subscribers.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetFileHashCommand">
            <summary>
            This class implements Get-FileHash.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetFileHashCommand.Path">
            <summary>
            Path parameter.
            The paths of the files to calculate hash values.
            Resolved wildcards.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetFileHashCommand.LiteralPath">
            <summary>
            LiteralPath parameter.
            The literal paths of the files to calculate a hashs.
            Don't resolved wildcards.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetFileHashCommand.InputStream">
            <summary>
            InputStream parameter.
            The stream of the file to calculate a hash.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFileHashCommand.BeginProcessing">
            <summary>
            BeginProcessing() override.
            This is for hash function init.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFileHashCommand.ProcessRecord">
            <summary>
            ProcessRecord() override.
            This is for paths collecting from pipe.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFileHashCommand.EndProcessing">
            <summary>
            Perform common error checks.
            Populate source code.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFileHashCommand.ComputeFileHash(System.String,System.String@)">
            <summary>
            Read the file and calculate the hash.
            </summary>
            <param name="path">Path to file which will be hashed.</param>
            <param name="hash">Will contain the hash of the file content.</param>
            <returns>Boolean value indicating whether the hash calculation succeeded or failed.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetFileHashCommand.WriteHashResult(System.String,System.String,System.String)">
            <summary>
            Create FileHashInfo object and output it.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetFileHashCommand.PathParameterSet">
            <summary>
            Parameter set names.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.HashCmdletBase">
            <summary>
            Base Cmdlet for cmdlets which deal with crypto hashes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.HashCmdletBase.Algorithm">
            <summary>
            Algorithm parameter.
            The hash algorithm name: "SHA1", "SHA256", "SHA384", "SHA512", "MD5".
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.HashCmdletBase.hasher">
            <summary>
            Hash algorithm is used.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.HashCmdletBase.HashAlgorithmNames">
            <summary>
            Hash algorithm names.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.HashCmdletBase.InitHasher(System.String)">
            <summary>
            Init a hash algorithm.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FileHashInfo">
            <summary>
            FileHashInfo class contains information about a file hash.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FileHashInfo.Algorithm">
            <summary>
            Hash algorithm name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FileHashInfo.Hash">
            <summary>
            Hash value.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FileHashInfo.Path">
            <summary>
            File path.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetHostCommand">
            <summary>
            Writes the PSHost object to the success stream.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetHostCommand.BeginProcessing">
            <summary>
            See base class.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MemberDefinition">
            <summary>
            Class with member information that this cmdlet writes to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MemberDefinition.ToString">
            <summary>
            Returns the member definition.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MemberDefinition.#ctor(System.String,System.String,System.Management.Automation.PSMemberTypes,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MemberDefinition.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MemberDefinition.Name">
            <summary>
            Member name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MemberDefinition.MemberType">
            <summary>
            Member type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MemberDefinition.Definition">
            <summary>
            Member definition.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetMemberCommand">
            <summary>
            This class implements get-member command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.InputObject">
            <summary>
            The object to retrieve properties from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.Name">
            <summary>
            The member names to be retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.MemberType">
            <summary>
            The member types to be retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.View">
            <summary>
            View from which the members are retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.Static">
            <summary>
            True if we should return static members.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetMemberCommand.Force">
            <summary>
            Gets or sets the force property.
            </summary>
            <remarks>
            Gives the Member matcher guidance on how vigorous the Match should be.
            If set to true all members in a given view + membertype are displayed.
            This parameter is added to hide Get/Set property accessor methods by default.
            If a user wants to see these methods, -force should be set to true.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetMemberCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for get-member command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetMemberCommand.EndProcessing">
            <summary>
            This method implements the End method for get-member command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetRandomCommand">
            <summary>
            This class implements get-random cmdlet.
            </summary>
            <!-- author: LukaszA -->
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.Generator">
            <summary>
            Gets and sets generator associated with the current runspace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.SetSeed">
            <summary>
            Seed used to reinitialize random numbers generator.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.Maximum">
            <summary>
            Maximum number to generate.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.Minimum">
            <summary>
            Minimum number to generate.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.InputObject">
            <summary>
            List from which random elements are chosen.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.Count">
            <summary>
            Number of items to output (number of list items or of numbers).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRandomCommand.Shuffle">
            <summary>
            Gets or sets whether the command should return all input objects in randomized order.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRandomCommand.GetRandomInt64(System.Int64,System.Int64)">
            <summary>
            Get a random Int64 type number.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRandomCommand.BeginProcessing">
            <summary>
            This method implements the BeginProcessing method for get-random command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRandomCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for get-random command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRandomCommand.EndProcessing">
            <summary>
            This method implements the EndProcessing method for get-random command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator">
            <summary>
            Provides an adapter API for random numbers that may be either cryptographically random, or
            generated with the regular pseudo-random number generator. Re-implementations of
            methods using the NextBytes() primitive based on the CLR implementation:
                https://referencesource.microsoft.com/#mscorlib/system/random.cs.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.NextDouble">
            <summary>
            Generates a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <returns>A random floating-point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.Next">
            <summary>
            Generates a non-negative random integer.
            </summary>
            <returns>A non-negative random integer.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number returned.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array to be filled.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.InternalSample">
            <summary>
            Samples a random integer.
            </summary>
            <returns>A random integer, using the full range of Int32.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator.InternalSampleLargeRange">
            <summary>
            Samples a random int when the range is large. This does
            not need to be in the range of -Double.MaxValue .. Double.MaxValue,
            just 0.. (2 * Int32.MaxValue) - 1 .
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetRunspaceCommand">
            <summary>
            This cmdlet returns runspaces in the PowerShell session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRunspaceCommand.Name">
            <summary>
            Specifies name or names of Runspaces to return.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRunspaceCommand.Id">
            <summary>
            Specifies one or more Ids of Runspaces to return.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetRunspaceCommand.InstanceId">
            <summary>
            Specifies one or more InstanceId Guids of Runspaces to return.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetRunspaceCommand.ProcessRecord">
            <summary>
            Process record.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetUICultureCommand">
            <summary>
            Returns the thread's current UI culture.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetUICultureCommand.BeginProcessing">
            <summary>
            Output the current UI Culture info object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetUniqueCommand">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetUniqueCommand.InputObject">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetUniqueCommand.AsString">
            <summary>
            This parameter specifies that objects should be converted to
            strings and the strings should be compared.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetUniqueCommand.OnType">
            <summary>
            This parameter specifies that just the types of the objects
            should be compared.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetUniqueCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetUptimeCommand">
            <summary>
            This class implements Get-Uptime.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetUptimeCommand.Since">
            <summary>
            The system startup time.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetUptimeCommand.ProcessRecord">
            <summary>
            This is the main entry point for the cmdlet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetUptimeCommand.TimespanParameterSet">
            <summary>
            Parameter set name for Timespan OutputType.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GetUptimeCommand.SinceParameterSet">
            <summary>
            Parameter set name for DateTime OutputType.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetVerbCommand">
            <summary>
            Implementation of the Get Verb Command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVerbCommand.Verb">
            <summary>
            Optional Verb filter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVerbCommand.Group">
            <summary>
            Optional Group filter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetVerbCommand.ProcessRecord">
            <summary>
            Returns a list of verbs.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSTuple">
            <summary>
            PSTuple is a helper class used to create Tuple from an input array.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSTuple.ArrayToTuple``1(System.Collections.Generic.IList{``0})">
            <summary>
            ArrayToTuple is a helper method used to create a tuple for the supplied input array.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <param name="inputObjects">Input objects used to create a tuple.</param>
            <returns>Tuple object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSTuple.ArrayToTuple``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            ArrayToTuple is a helper method used to create a tuple for the supplied input array.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <param name="inputObjects">Input objects used to create a tuple.</param>
            <param name="startIndex">Start index of the array from which the objects have to considered for the tuple creation.</param>
            <returns>Tuple object.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GroupInfoNoElement">
            <summary>
            Emitted by Group-Object when the NoElement option is true.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GroupInfo">
            <summary>
            Emitted by Group-Object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupInfo.Values">
            <summary>
            Gets the values of the group.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupInfo.Count">
            <summary>
            Gets the number of objects in the group.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupInfo.Group">
            <summary>
            Gets the list of objects in this group.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupInfo.Name">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupInfo.GroupValue">
            <summary>
            Gets the OrderByPropertyEntry used to build this group object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GroupObjectCommand">
            <summary>
            Group-Object implementation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.GroupObjectCommand.s_tracer">
            <summary>
            An instance of the PSTraceSource class used for trace output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupObjectCommand.NoElement">
            <summary>
            Gets or sets the NoElement parameter indicating of the groups should be flattened.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupObjectCommand.AsHashTable">
            <summary>
            Gets or sets the AsHashTable parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GroupObjectCommand.AsString">
            <summary>
            Gets or sets the AsString parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GroupObjectCommand.DoGrouping(Microsoft.PowerShell.Commands.OrderByPropertyEntry,System.Boolean,System.Collections.Generic.List{Microsoft.PowerShell.Commands.GroupInfo},System.Collections.Generic.Dictionary{System.Object,Microsoft.PowerShell.Commands.GroupInfo},Microsoft.PowerShell.Commands.OrderByPropertyComparer)">
            <summary>
            Utility function called by Group-Object to create Groups.
            </summary>
            <param name="currentObjectEntry">Input object that needs to be grouped.</param>
            <param name="noElement">True if we are not accumulating objects.</param>
            <param name="groups">List containing Groups.</param>
            <param name="groupInfoDictionary">Dictionary used to keep track of the groups with hash of the property values being the key.</param>
            <param name="orderByPropertyComparer">The Comparer to be used while comparing to check if new group has to be created.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GroupObjectCommand.DoOrderedGrouping(Microsoft.PowerShell.Commands.OrderByPropertyEntry,System.Boolean,System.Collections.Generic.List{Microsoft.PowerShell.Commands.GroupInfo},System.Collections.Generic.Dictionary{System.Object,Microsoft.PowerShell.Commands.GroupInfo},Microsoft.PowerShell.Commands.OrderByPropertyComparer)">
            <summary>
            Utility function called by Group-Object to create Groups.
            </summary>
            <param name="currentObjectEntry">Input object that needs to be grouped.</param>
            <param name="noElement">True if we are not accumulating objects.</param>
            <param name="groups">List containing Groups.</param>
            <param name="groupInfoDictionary">Dictionary used to keep track of the groups with hash of the property values being the key.</param>
            <param name="orderByPropertyComparer">The Comparer to be used while comparing to check if new group has to be created.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GroupObjectCommand.ProcessRecord">
            <summary>
            Process every input object to group them.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GroupObjectCommand.EndProcessing">
            <summary>
            Completes the processing of the gathered group objects.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportPSSessionCommand">
            <summary>
            This class implements Export-PSSession cmdlet.
            Spec: TBD.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.VersionOfScriptGenerator">
            <summary>
            Version of the script generator used (by this Export-PSSession cmdlet) to generate psm1 and psd1 files.
            Generated script checks this version to see if it needs to be regenerated.  There are 2 situations where this is needed
            1. the script needs to be regenerated because a bug fix made previous versions incompatible with the rest of the system (i.e. with ObjectModelWrapper).
            2. ths script needs to be regenerated because a security vulnerability was found inside generated code (there is no way to service generated code, but we can service the dll that reports the version that the generated script checks against).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.OutputModule">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.Force">
            <summary>
            Property that sets force parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.Encoding">
            <summary>
            Encoding optional flag.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportPSSessionCommand.BeginProcessing">
            <summary>
            Performs initialization of cmdlet execution.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportPSSessionCommand">
            <summary>
            This class implements Import-PSSession cmdlet.
            Spec: http://cmdletdesigner/SpecViewer/Default.aspx?Project=PowerShell&amp;Cmdlet=Import-Command .
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportPSSessionCommand.Prefix">
            <summary>
            This parameter specified a prefix used to modify names of imported commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportPSSessionCommand.DisableNameChecking">
            <summary>
            Disable warnings on cmdlet and function names that have non-standard verbs
            or non-standard characters in the noun.
            Also disable security related checks against command and parameter names.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportPSSessionCommand.BeginProcessing">
            <summary>
            Performs initialization of cmdlet execution.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase">
            <summary>
            Base class for implicit remoting cmdlets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandName">
            <summary>
            Gets or sets the path(s) or name(s) of the commands to retrieve.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.AllowClobber">
            <summary>
            Allows shadowing and/or overwriting of existing local/client commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.ArgumentList">
            <summary>
            The parameter that all additional arguments get bound to. These arguments are used
            when retrieving dynamic parameters from cmdlets that support them.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandType">
            <summary>
            Gets or sets the type of the command to get.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Module">
            <summary>
            Gets or sets the PSSnapin parameter to the cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FullyQualifiedModule">
            <summary>
            Gets or sets the FullyQualifiedModule parameter to the cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FormatTypeName">
            <summary>
            Gets or sets the types for which we should get formatting and output data.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Prefix">
            <summary>
            This parameter specified a prefix used to modify names of imported commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Certificate">
            <summary>
            Gets or sets the certificate with which to sign the format file and psm1 file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Session">
            <summary>
            The PSSession object describing the remote runspace
            using which the specified cmdlet operation will be performed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.IsCommandNameAllowedForImport(System.String)">
            <summary>
            Returns true if command doesn't shadow OR is in the -AllowShadowing parameter.
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.IsSafeNameOrIdentifier(System.String)">
            <summary>
            Validates that a name or identifier is safe to use in generated code
            (i.e. it can't be used for code injection attacks).
            </summary>
            <param name="name">Name to validate.</param>
            <returns><c>true</c> if the name is safe; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.IsSafeParameterName(System.String)">
            <summary>
            Validates that a parameter name is safe to use in generated code
            (i.e. it can't be used for code injection attacks).
            </summary>
            <param name="parameterName">Parameter name to validate.</param>
            <returns><c>true</c> if the name is safe; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.IsSafeTypeConstraint(System.Type)">
            <summary>
            Validates that a type can be safely used as a type constraint
            (i.e. it doesn't introduce any side effects on the client).
            </summary>
            <param name="type">Type to validate.</param>
            <returns><c>true</c> if the type is safe; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.IsSafeCommandMetadata(System.Management.Automation.CommandMetadata)">
            <summary>
            Validates that command metadata returned from the (potentially malicious) server is safe.
            Writes error messages if necessary.  Modifies command metadata to make it safe if necessary.
            </summary>
            <param name="commandMetadata">Command metadata to verify.</param>
            <returns><c>true</c> if the command metadata is safe; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.AddRemoteCommandMetadata(System.Collections.Generic.Dictionary{System.String,System.Management.Automation.CommandMetadata},System.Collections.Generic.Dictionary{System.String,System.String},System.Management.Automation.PSObject)">
            <summary>
            Converts remote (deserialized) CommandInfo objects into CommandMetadata equivalents.
            </summary>
            <param name="name2commandMetadata">Dictionary where rehydrated CommandMetadata are going to be stored.</param>
            <param name="alias2resolvedCommandName">Dictionary mapping alias names to resolved command names.</param>
            <param name="remoteCommandInfo">Remote (deserialized) CommandInfo object.</param>
            <returns>CommandMetadata equivalents.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.GetRemoteFormatData">
            <summary>
            Gets CommandMetadata objects from remote runspace.
            </summary>
            <returns>(rehydrated) CommandMetadata objects.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.HandleHostCallReceived(System.Object,System.Management.Automation.RemoteDataEventArgs{System.Management.Automation.Remoting.RemoteHostCall})">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.GetRemoteCommandMetadata(System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Gets CommandMetadata objects from remote runspace.
            </summary>
            <returns>(rehydrated) CommandMetadata objects.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.GenerateProxyModule(System.IO.DirectoryInfo,System.String,System.Text.Encoding,System.Boolean,System.Collections.Generic.List{System.Management.Automation.CommandMetadata},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Management.Automation.ExtendedTypeDefinition})">
            <summary>
            Generates a proxy module in the given directory.
            </summary>
            <param name="moduleRootDirectory">Base directory for the module.</param>
            <param name="moduleNamePrefix">FileName prefix for module files.</param>
            <param name="encoding">Encoding of generated files.</param>
            <param name="force">Whether to overwrite files.</param>
            <param name="listOfCommandMetadata">Remote commands to generate proxies for.</param>
            <param name="alias2resolvedCommandName">Dictionary mapping alias names to resolved command names.</param>
            <param name="listOfFormatData">Remote format data to generate format.ps1xml for.</param>
            <returns>Paths to generated files.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCodeGenerator.GetConnectionString">
            <summary>
            Gets a connection URI associated with the remote runspace.
            </summary>
            <returns>Connection URI associated with the remote runspace.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCodeGenerator.GenerateConnectionStringForNewRunspace">
            <summary>
            This is needed to work with Default Port DCR change from WSMan. See BUG
            542726. If http/https is specified in the connectionURI and no port is
            specified then defaults for http/https (80/443) are applied. But WSMan
            by default listens on 5985/5986. To overcome this, this function
            creates a -ComputerName parameter set or -ConnectionUri parameter
            set depending on the situation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImplicitRemotingCodeGenerator.GenerateProxyModule(System.IO.DirectoryInfo,System.String,System.Text.Encoding,System.Boolean,System.Collections.Generic.List{System.Management.Automation.CommandMetadata},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Management.Automation.ExtendedTypeDefinition},System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Generates a proxy module in the given directory.
            </summary>
            <param name="moduleRootDirectory">Base directory for the module.</param>
            <param name="fileNamePrefix">Filename prefix for module files.</param>
            <param name="encoding">Encoding of generated files.</param>
            <param name="force">Whether to overwrite files.</param>
            <param name="listOfCommandMetadata">Remote commands to generate proxies for.</param>
            <param name="alias2resolvedCommandName">Dictionary mapping alias names to resolved command names.</param>
            <param name="listOfFormatData">Remote format data to generate format.ps1xml for.</param>
            <param name="certificate">Certificate with which to sign the format files.</param>
            <returns>Path to the created files.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportLocalizedData">
            <summary>
            The implementation of the "import-localizeddata" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportLocalizedData.BindingVariable">
            <summary>
            The path from which to import the aliases.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportLocalizedData.UICulture">
            <summary>
            The scope to import the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportLocalizedData.BaseDirectory">
            <summary>
            The scope to import the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportLocalizedData.FileName">
            <summary>
            The scope to import the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportLocalizedData.SupportedCommand">
            <summary>
            The command allowed in the data file.  If unspecified, then ConvertFrom-StringData is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportLocalizedData.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportAliasCommand">
            <summary>
            The implementation of the "import-alias" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportAliasCommand.Path">
            <summary>
            The path from which to import the aliases.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportAliasCommand.LiteralPath">
            <summary>
            The literal path from which to import the aliases.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportAliasCommand.Scope">
            <summary>
            The scope to import the aliases to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportAliasCommand.PassThru">
            <summary>
            If set to true, the alias that is set is passed to the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportAliasCommand.Force">
            <summary>
            If set to true and an existing alias of the same name exists
            and is ReadOnly, the alias will be overwritten.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportPowerShellDataFileCommand">
            <summary>
            This class implements Import-PowerShellDataFile command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportPowerShellDataFileCommand.Path">
            <summary>
            Path specified, using globbing to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportPowerShellDataFileCommand.LiteralPath">
            <summary>
            Specifies a path to one or more locations, without globbing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportPowerShellDataFileCommand.ProcessRecord">
            <summary>
            For each path, resolve it, parse it and write all hashtables to the output stream.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.InvokeExpressionCommand">
            <summary>
            Class implementing Invoke-Expression.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeExpressionCommand.Command">
            <summary>
            Command to execute.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeExpressionCommand.ProcessRecord">
            <summary>
            For each record, execute it, and push the results into the success stream.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.Utility.JoinStringCommand">
            <summary>
            Join-Object implementation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.DefaultOutputStringCapacity">
            <summary>A bigger default to not get re-allocations in common use cases.</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.Property">
            <summary>
            Gets or sets the property name or script block to use as the value to join.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.Separator">
            <summary>
            Gets or sets the delimiter to join the output with.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.OutputPrefix">
            <summary>
            Gets or sets text to include before the joined input text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.OutputSuffix">
            <summary>
            Gets or sets text to include after the joined input text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.SingleQuote">
            <summary>
            Gets or sets if the output items should we wrapped in single quotes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.DoubleQuote">
            <summary>
            Gets or sets if the output items should we wrapped in double quotes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.FormatString">
            <summary>
            Gets or sets a format string that is applied to each input object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.UseCulture">
            <summary>
            Gets or sets if the current culture should be used with formatting instead of the invariant culture.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.InputObject">
            <summary>
            Gets or sets the input object to join into text.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.BeginProcessing">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.ProcessRecord">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Utility.JoinStringCommand.EndProcessing">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand">
            <summary>
            Class for implementing Set-MarkdownOption cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header1Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 1.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header2Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 2.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header3Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 3.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header4Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 4.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header5Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 5.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Header6Color">
            <summary>
            Gets or sets the VT100 escape sequence for Header Level 6.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Code">
            <summary>
            Gets or sets the VT100 escape sequence for code block background.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.ImageAltTextForegroundColor">
            <summary>
            Gets or sets the VT100 escape sequence for image alt text foreground.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.LinkForegroundColor">
            <summary>
            Gets or sets the VT100 escape sequence for link foreground.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.ItalicsForegroundColor">
            <summary>
            Gets or sets the VT100 escape sequence for italics text foreground.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.BoldForegroundColor">
            <summary>
            Gets or sets the VT100 escape sequence for bold text foreground.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.PassThru">
            <summary>
            Gets or sets the switch to PassThru the values set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.Theme">
            <summary>
            Gets or sets the Theme.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.InputObject">
            <summary>
            Gets or sets InputObject.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetMarkdownOptionCommand.EndProcessing">
            <summary>
            Override EndProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetMarkdownOptionCommand">
            <summary>
            Implements the cmdlet for getting the Markdown options that are set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetMarkdownOptionCommand.EndProcessing">
            <summary>
            Override EndProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSMarkdownOptionInfoCache">
            <summary>
            The class manages whether we should use a module scope variable or concurrent dictionary for storing the set PSMarkdownOptions.
            When we have a moduleInfo available we use the module scope variable.
            In case of built-in modules, they are loaded as snapins when we are hosting PowerShell.
            We use runspace Id as the key for the concurrent dictionary to have the functionality of separate settings per runspace.
            Force loading the module does not unload the nested modules and hence we cannot use IModuleAssemblyCleanup to remove items from the dictionary.
            Because of these reason, we continue using module scope variable when moduleInfo is available.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MatchInfoContext">
            <summary>
            Context information about a match.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfoContext.PreContext">
            <summary>
            Gets or sets the lines found before a match.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfoContext.PostContext">
            <summary>
            Gets or sets the lines found after a match.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfoContext.DisplayPreContext">
            <summary>
            Gets or sets the lines found before a match. Does not include
            overlapping context and thus can be used to
            display contiguous match regions.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfoContext.DisplayPostContext">
            <summary>
            Gets or sets the lines found after a match. Does not include
            overlapping context and thus can be used to
            display contiguous match regions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfoContext.Clone">
            <summary>
            Produce a deep copy of this object.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MatchInfo">
            <summary>
            The object returned by select-string representing the result of a match.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the match was done ignoring case.
            </summary>
            <value>True if case was ignored.</value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.LineNumber">
            <summary>
            Gets or sets the number of the matching line.
            </summary>
            <value>The number of the matching line.</value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Line">
            <summary>
            Gets or sets the text of the matching line.
            </summary>
            <value>The text of the matching line.</value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MatchInfo._emphasize">
            <summary>
            Gets or sets a value indicating whether the matched portion of the string is highlighted.
            </summary>
            <value>Whether the matched portion of the string is highlighted with the negative VT sequence.</value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MatchInfo._matchIndexes">
            <summary>
            Stores the starting index of each match within the line.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MatchInfo._matchLengths">
            <summary>
            Stores the length of each match within the line.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.MatchInfo"/> class with emphasis disabled.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.MatchInfo"/> class with emphasized matched text.
            Used when virtual terminal sequences are supported.
            </summary>
            <param name="matchIndexes">Sets the matchIndexes.</param>
            <param name="matchLengths">Sets the matchLengths.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Filename">
            <summary>
            Gets the base name of the file containing the matching line.
            <remarks>
            It will be the string "InputStream" if the object came from the input stream.
            This is a readonly property calculated from the path <see cref="P:Microsoft.PowerShell.Commands.MatchInfo.Path"/>.
            </remarks>
            </summary>
            <value>The file name.</value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Path">
            <summary>
            Gets or sets the full path of the file containing the matching line.
            <remarks>
            It will be "InputStream" if the object came from the input stream.
            </remarks>
            </summary>
            <value>The path name.</value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Pattern">
            <summary>
            Gets or sets the pattern that was used in the match.
            </summary>
            <value>The pattern string.</value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Context">
            <summary>
            Gets or sets context for the match, or null if -context was not specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.RelativePath(System.String)">
            <summary>
            Returns the path of the matching file truncated relative to the <paramref name="directory"/> parameter.
            <remarks>
            For example, if the matching path was c:\foo\bar\baz.c and the directory argument was c:\foo
            the routine would return bar\baz.c .
            </remarks>
            </summary>
            <param name="directory">The directory base the truncation on.</param>
            <returns>The relative path that was produced.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.ToString">
            <summary>
            Returns the string representation of this object. The format
            depends on whether a path has been set for this object or not.
            <remarks>
            If the path component is set, as would be the case when matching
            in a file, ToString() would return the path, line number and line text.
            If path is not set, then just the line text is presented.
            </remarks>
            </summary>
            <returns>The string representation of the match object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.ToString(System.String)">
            <summary>
            Returns the string representation of the match object same format as ToString()
            but trims the path to be relative to the <paramref name="directory"/> argument.
            </summary>
            <param name="directory">Directory to use as the root when calculating the relative path.</param>
            <returns>The string representation of the match object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.ToString(System.String,System.String)">
            <summary>
            Returns the string representation of the match object with the matched line passed
            in as <paramref name="line"/> and trims the path to be relative to
            the<paramref name="directory"/> argument.
            </summary>
            <param name="directory">Directory to use as the root when calculating the relative path.</param>
            <param name="line">Line that the match occurs in.</param>
            <returns>The string representation of the match object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.ToEmphasizedString(System.String)">
            <summary>
            Returns the string representation of the match object same format as ToString()
            and inverts the color of the matched text if virtual terminal is supported.
            </summary>
            <param name="directory">Directory to use as the root when calculating the relative path.</param>
            <returns>The string representation of the match object with matched text inverted.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.EmphasizeLine">
            <summary>
            Surrounds the matched text with virtual terminal sequences to invert it's color. Used in ToEmphasizedString.
            </summary>
            <returns>The matched line with matched text inverted.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.FormatLine(System.String,System.Int32,System.String,System.String)">
            <summary>
            Formats a line for use in ToString.
            </summary>
            <param name="lineStr">The line to format.</param>
            <param name="displayLineNumber">The line number to display.</param>
            <param name="displayPath">The file path, formatted for display.</param>
            <param name="prefix">The match prefix.</param>
            <returns>The formatted line as a string.</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MatchInfo.Matches">
            <summary>
            Gets or sets a list of all Regex matches on the matching line.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MatchInfo.Clone">
            <summary>
            Create a deep copy of this MatchInfo instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand">
            <summary>
            A cmdlet to search through strings and files for particular patterns.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1">
            <summary>
            A generic circular buffer.
            </summary>
            <typeparam name="T">The type of items that are buffered.</typeparam>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1"/> class.
            </summary>
            <param name="capacity">The maximum capacity of the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="capacity" /> is negative.</exception>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.Capacity">
            <summary>
            Gets the maximum capacity of the buffer. If more items
            are added than the buffer has capacity for, then
            older items will be removed from the buffer with
            a first-in, first-out policy.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.IsFull">
            <summary>
            Whether or not the buffer is at capacity.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.WrapIndex(System.Int32)">
            <summary>
            Convert from a 0-based index to a buffer index which
            has been properly offset and wrapped.
            </summary>
            <param name="zeroBasedIndex">The index to wrap.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="zeroBasedIndex" /> is out of range.</exception>
            <returns>
            The actual index that <param ref="zeroBasedIndex" />
            maps to.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.Add(`0)">
            <summary>
            Adds an item to the buffer. If the buffer is already
            full, the oldest item in the list will be removed,
            and the new item added at the logical end of the list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.ToArray">
            <summary>
            Create an array of the items in the buffer. Items
            will be in the same order they were added.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Access an item in the buffer. Indexing is based off
            of the order items were added, rather than any
            internal ordering the buffer may be maintaining.
            </summary>
            <param name="index">The index of the item to access.</param>
            <returns>The buffered item at index <paramref name="index"/>.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker">
            <summary>
            An interface to a context tracking algorithm.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker.EmitQueue">
            <summary>
            Gets matches with completed context information
            that are ready to be emitted into the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker.TrackLine(System.String)">
            <summary>
            Track a non-matching line for context.
            </summary>
            <param name="line">The line to track.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker.TrackMatch(Microsoft.PowerShell.Commands.MatchInfo)">
            <summary>
            Track a matching line.
            </summary>
            <param name="match">The line to track.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker.TrackEOF">
            <summary>
            Track having reached the end of the file,
            giving the tracker a chance to process matches with
            incomplete context information.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.DisplayContextTracker">
            <summary>
            A state machine to track display context for each match.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.DisplayContextTracker.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.SelectStringCommand.DisplayContextTracker"/> class.
            </summary>
            <param name="preContext">How much preContext to collect at most.</param>
            <param name="postContext">How much postContext to collect at most.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.DisplayContextTracker.UpdateQueue">
            <summary>
            Moves matchInfo, if set, to the emitQueue and
            resets the tracking state.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker">
            <summary>
            A class to track logical context for each match.
            </summary>
            <remarks>
            The difference between logical and display context is
            that logical context includes as many context lines
            as possible for a given match, up to the specified
            limit, including context lines which overlap between
            matches and other matching lines themselves. Display
            context, on the other hand, is designed to display
            a possibly-continuous set of matches by excluding
            overlapping context (lines will only appear once)
            and other matching lines (since they will appear
            as their own match entries.).
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker"/> class.
            </summary>
            <param name="preContext">How much preContext to collect at most.</param>
            <param name="postContext">How much postContext to collect at most.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker.EmitAllInRange(System.Int32,System.Int32)">
            <summary>
            Add all matches found in the specified range
            to the emit queue, collecting as much context
            as possible up to the limits specified in the constructor.
            </summary>
            <remarks>
            The range is inclusive; the entries at
            startIndex and endIndex will both be checked.
            </remarks>
            <param name="startIndex">The beginning of the match range.</param>
            <param name="endIndex">The ending of the match range.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker.UpdateQueue">
            <summary>
            Add match(es) found in the match region to the
            emit queue. Should be called every time an entry
            is added to the context buffer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker.Emit(Microsoft.PowerShell.Commands.MatchInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Collects context from the specified ranges. Populates
            the specified match with the collected context
            and adds it to the emit queue.
            </summary>
            <remarks>
            Context ranges must be within the bounds of the context buffer.
            </remarks>
            <param name="match">The match to operate on.</param>
            <param name="preStartIndex">The start index of the preContext range.</param>
            <param name="preLength">The length of the preContext range.</param>
            <param name="postStartIndex">The start index of the postContext range.</param>
            <param name="postLength">The length of the postContext range.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.LogicalContextTracker.CopyContext(System.Int32,System.Int32)">
            <summary>
            Collects context from the specified ranges.
            </summary>
            <remarks>
            The range must be within the bounds of the context buffer.
            </remarks>
            <param name="startIndex">The index to start at.</param>
            <param name="length">The length of the range.</param>
            <returns>String representation of the collected context at the specified range.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.ContextTracker">
            <summary>
            A class to track both logical and display contexts.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.ContextTracker.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.SelectStringCommand.ContextTracker"/> class.
            </summary>
            <param name="preContext">How much preContext to collect at most.</param>
            <param name="postContext">How much postContext to collect at most.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.ContextTracker.UpdateQueue">
            <summary>
            Update the emit queue based on the wrapped trackers.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.NoContextTracker">
            <summary>
            ContextTracker that does not work for the case when pre- and post context is 0.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Culture">
            <summary>
            Gets or sets a culture name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.InputObject">
            <summary>
            Gets or sets the current pipeline object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Pattern">
            <summary>
            Gets or sets the patterns to find.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Path">
            <summary>
            Gets or sets files to read from.
            Globbing is done on these.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.LiteralPath">
            <summary>
            Gets or sets literal files to read from.
            Globbing is not done on these.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Raw">
            <summary>
            Gets or sets a value indicating if only string values containing matched lines should be returned.
            If not (default) return MatchInfo (or bool objects, when Quiet is passed).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.SimpleMatch">
            <summary>
            Gets or sets a value indicating if a pattern string should be matched literally.
            If not (default) search using pattern as a Regular Expression.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.CaseSensitive">
            <summary>
            Gets or sets a value indicating if the search is case sensitive.If true, then do case-sensitive searches.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Quiet">
            <summary>
            Gets or sets a value indicating if the cmdlet will stop processing at the first successful match and
            return true.  If both List and Quiet parameters are given, an exception is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.List">
            <summary>
            Gets or sets a value indicating if matching files should be listed.
            This is the Unix functionality this switch is intended to mimic;
            the actual action of this option is to stop after the first match
            is found and returned from any particular file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.NoEmphasis">
            <summary>
            Gets or sets a value indicating if highlighting should be disabled.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Include">
            <summary>
            Gets or sets files to include. Files matching
            one of these (if specified) are included.
            </summary>
            <exception cref="T:System.Management.Automation.WildcardPatternException">Invalid wildcard pattern was specified.</exception>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Exclude">
            <summary>
            Gets or sets files to exclude. Files matching
            one of these (if specified) are excluded.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.NotMatch">
            <summary>
            Gets or sets a value indicating whether to only show lines which do not match.
            Equivalent to grep -v/findstr -v.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.AllMatches">
            <summary>
            Gets or sets a value indicating whether the Matches property of MatchInfo should be set
            to the result of calling System.Text.RegularExpressions.Regex.Matches() on
            the corresponding line.
            Has no effect if -SimpleMatch is also specified.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Encoding">
            <summary>
            Gets or sets the text encoding to process each file as.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectStringCommand.Context">
            <summary>
            Gets or sets the number of context lines to collect. If set to a
            single integer value N, collects N lines each of pre-
            and post- context. If set to a 2-tuple B,A, collects B
            lines of pre- and A lines of post- context.
            If set to a list with more than 2 elements, the
            excess elements are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectStringCommand._doneProcessing">
            <summary>
            This is used to handle the case were we're done processing input objects.
            If true, process record will just return.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.BeginProcessing">
            <summary>
            Read command line parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.ProcessRecord">
            <summary>
            Process the input.
            </summary>
            <exception cref="T:System.ArgumentException">Regular expression parsing error, path error.</exception>
            <exception cref="T:System.IO.FileNotFoundException">A file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">A file cannot be found.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.ProcessFile(System.String)">
            <summary>
            Process a file which was either specified on the
            command line or passed in as a FileInfo object.
            </summary>
            <param name="filename">The file to process.</param>
            <returns>True if a match was found; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.FlushTrackerQueue(Microsoft.PowerShell.Commands.SelectStringCommand.IContextTracker)">
            <summary>
            Emit any objects which have been queued up, and clear the queue.
            </summary>
            <param name="contextTracker">The context tracker to operate on.</param>
            <returns>Whether or not any objects were emitted.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.EndProcessing">
            <summary>
            Complete processing. Emits any objects which have been queued up
            due to -context tracking.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.DoMatchWorker(System.String,Microsoft.PowerShell.Commands.MatchInfo,Microsoft.PowerShell.Commands.MatchInfo@)">
            <summary>
            Check the operand and see if it matches, if this.quiet is not set, then
            return a partially populated MatchInfo object with Line, Pattern, IgnoreCase set.
            </summary>
            <param name="operandString">The result of converting operand to a string.</param>
            <param name="matchInfo">The input object in filter mode.</param>
            <param name="matchResult">The match info object - this will be null if this.quiet is set.</param>
            <returns>True if the input object matched.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.ResolveFilePaths(System.String[],System.Boolean)">
            <summary>
            Get a list or resolved file paths.
            </summary>
            <param name="filePaths">The filePaths to resolve.</param>
            <param name="isLiteralPath">True if the wildcard resolution should not be attempted.</param>
            <returns>The resolved (absolute) paths.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectStringCommand.FileinfoToStringAttribute">
            <summary>
            Magic class that works around the limitations on ToString() for FileInfo.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectStringCommand.MeetsIncludeExcludeCriteria(System.String)">
            <summary>
            Check whether the supplied name meets the include/exclude criteria.
            That is - it's on the include list if there is one and not on
            the exclude list if there was one of those.
            </summary>
            <param name="filename">The filename to test.</param>
            <returns>True if the filename is acceptable.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ValidateMatchStringCultureNamesGenerator">
            <summary>
            Get list of valid culture names for ValidateSet attribute.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureInfo">
            <summary>
            Class output by Measure-Object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureInfo.Property">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GenericMeasureInfo">
            <summary>
            Class output by Measure-Object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GenericMeasureInfo.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.Count">
            <summary>
            Keeping track of number of objects with a certain property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.Average">
            <summary>
            The average of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.Sum">
            <summary>
            The sum of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.Maximum">
            <summary>
            The max of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.Minimum">
            <summary>
            The min of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericMeasureInfo.StandardDeviation">
            <summary>
            The Standard Deviation of property values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo">
            <summary>
            Class output by Measure-Object.
            </summary>
            <remarks>
            This class is created to make 'Measure-Object -MAX -MIN' work with ANYTHING that supports 'CompareTo'.
            GenericMeasureInfo class is shipped with PowerShell V2. Fixing this bug requires, changing the type of
            Maximum and Minimum properties which would be a breaking change. Hence created a new class to not
            have an appcompat issues with PS V2.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.Count">
            <summary>
            Keeping track of number of objects with a certain property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.Average">
            <summary>
            The average of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.Sum">
            <summary>
            The sum of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.Maximum">
            <summary>
            The max of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.Minimum">
            <summary>
            The min of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GenericObjectMeasureInfo.StandardDeviation">
            <summary>
            The Standard Deviation of property values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TextMeasureInfo">
            <summary>
            Class output by Measure-Object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TextMeasureInfo.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TextMeasureInfo.Lines">
            <summary>
            Keeping track of number of objects with a certain property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TextMeasureInfo.Words">
            <summary>
            The average of property values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TextMeasureInfo.Characters">
            <summary>
            The sum of property values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureObjectCommand">
            <summary>
            Measure object cmdlet.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureObjectCommand.MeasureObjectDictionary`1">
            <summary>
            Dictionary to be used by Measure-Object implementation.
            Keys are strings. Keys are compared with OrdinalIgnoreCase.
            </summary>
            <typeparam name="V">Value type.</typeparam>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.MeasureObjectDictionary`1.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.MeasureObjectDictionary`1.EnsureEntry(System.String)">
            <summary>
            Attempt to look up the value associated with the
            the specified key. If a value is not found, associate
            the key with a new value created via the value type's
            default constructor.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            The existing value, or a newly-created value.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureObjectCommand.Statistics">
            <summary>
            Convenience class to track statistics without having
            to maintain two sets of MeasureInfo and constantly checking
            what mode we're in.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.InputObject">
            <summary>
            Incoming object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Property">
            <summary>
            Properties to be examined.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.StandardDeviation">
            <summary>
            Set to true if Standard Deviation is to be returned.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Sum">
            <summary>
            Set to true is Sum is to be returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.AllStats">
            <summary>
            Gets or sets the value indicating if all statistics should be returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Average">
            <summary>
            Set to true is Average is to be returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Maximum">
            <summary>
            Set to true is Max is to be returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Minimum">
            <summary>
            Set to true is Min is to be returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Line">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Word">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.Character">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.IgnoreWhiteSpace">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureObjectCommand.IsMeasuringGeneric">
            <summary>
            Which parameter set the Cmdlet is in.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.BeginProcessing">
            <summary>
            Does the begin part of the cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.ProcessRecord">
            <summary>
            Collect data about each record that comes in.
            Side effects: Updates totalRecordCount.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.AnalyzeObjectProperties(System.Management.Automation.PSObject)">
            <summary>
            Analyze an object on a property-by-property basis instead
            of as a simple value.
            Side effects: Updates statistics.
            <param name="inObj">The object to analyze.</param>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.AnalyzeValue(System.String,System.Object)">
            <summary>
            Analyze a value for generic/text statistics.
            Side effects: Updates statistics. May set nonNumericError.
            <param name="propertyName">The property this value corresponds to.</param>
            <param name="objValue">The value to analyze.</param>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.Compare(System.Object,System.Object,System.Boolean)">
            <summary>
            Compare is a helper function used to find the min/max between the supplied input values.
            </summary>
            <param name="objValue">
            Current input value.
            </param>
            <param name="statMinOrMaxValue">
            Current minimum or maximum value in the statistics.
            </param>
            <param name="isMin">
            Indicates if minimum or maximum value has to be found.
            If true is passed in then the minimum of the two values would be returned.
            If false is passed in then maximum of the two values will be returned.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureObjectCommand.TextCountUtilities">
            <summary>
            Class contains util static functions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.TextCountUtilities.CountChar(System.String,System.Boolean)">
            <summary>
            Count chars in inStr.
            </summary>
            <param name="inStr">String whose chars are counted.</param>
            <param name="ignoreWhiteSpace">True to discount white space.</param>
            <returns>Number of chars in inStr.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.TextCountUtilities.CountWord(System.String)">
            <summary>
            Count words in inStr.
            </summary>
            <param name="inStr">String whose words are counted.</param>
            <returns>Number of words in inStr.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.TextCountUtilities.CountLine(System.String)">
            <summary>
            Count lines in inStr.
            </summary>
            <param name="inStr">String whose lines are counted.</param>
            <returns>Number of lines in inStr.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.AnalyzeString(System.String,Microsoft.PowerShell.Commands.MeasureObjectCommand.Statistics)">
            <summary>
            Update text statistics.
            <param name="strValue">The text to analyze.</param>
            <param name="stat">The Statistics object to update.</param>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.AnalyzeNumber(System.Double,Microsoft.PowerShell.Commands.MeasureObjectCommand.Statistics)">
            <summary>
            Update number statistics.
            <param name="numValue">The number to analyze.</param>
            <param name="stat">The Statistics object to update.</param>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.WritePropertyNotFoundError(System.String,System.String)">
            <summary>
            WriteError when a property is not found.
            </summary>
            <param name="propertyName">The missing property.</param>
            <param name="errorId">The error ID to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.EndProcessing">
            <summary>
            Output collected statistics.
            Side effects: Updates statistics. Writes objects to stream.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.CreateGenericMeasureInfo(Microsoft.PowerShell.Commands.MeasureObjectCommand.Statistics,System.Boolean)">
            <summary>
            Create a MeasureInfo object for generic stats.
            <param name="stat">The statistics to use.</param>
            <returns>A new GenericMeasureInfo object.</returns>
            </summary>
            <param name="shouldUseGenericMeasureInfo"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureObjectCommand.CreateTextMeasureInfo(Microsoft.PowerShell.Commands.MeasureObjectCommand.Statistics)">
            <summary>
            Create a MeasureInfo object for text stats.
            <param name="stat">The statistics to use.</param>
            <returns>A new TextMeasureInfo object.</returns>
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand._statistics">
            <summary>
            The observed statistics keyed by property name.
            If Property is not set, then the key used will be the value of thisObject.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand._nonNumericError">
            <summary>
            Whether or not a numeric conversion error occurred.
            If true, then average/sum/standard deviation will not be output.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand._totalRecordCount">
            <summary>
            The total number of records encountered.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand.GenericParameterSet">
            <summary>
            Parameter set name for measuring objects.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand.TextParameterSet">
            <summary>
            Parameter set name for measuring text.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.MeasureObjectCommand.thisObject">
            <summary>
            Key that statistics are stored under when Property is not set.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewObjectCommand">
            <summary>Create a new .net object</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewObjectCommand.TypeName">
            <summary> the number</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewObjectCommand.ArgumentList">
            <summary>
            The parameters for the constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewObjectCommand.Strict">
            <summary>
            True if we should have an error when Com objects will use an interop assembly.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewObjectCommand.Property">
            <summary>
            Gets the properties to be set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewObjectCommand.BeginProcessing">
            <summary> Create the object </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewObjectNativeMethods">
            <summary>
            Native methods for dealing with COM objects.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewObjectNativeMethods.CLSIDFromProgID(System.String,System.Guid@)">
            Return Type: HRESULT->LONG->int
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewAliasCommand">
            <summary>
            The implementation of the "new-alias" cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewEventCommand">
            <summary>
            Generates a new event notification.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewEventCommand.SourceIdentifier">
            <summary>
            Adds an event to the event queue.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewEventCommand.Sender">
            <summary>
            Data relating to this event.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewEventCommand.EventArguments">
            <summary>
            Data relating to this event.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewEventCommand.MessageData">
            <summary>
            Data relating to this event.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewEventCommand.EndProcessing">
            <summary>
            Add the event to the event queue.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewGuidCommand">
            <summary>
            The implementation of the "new-guid" cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewGuidCommand.EndProcessing">
            <summary>
            Returns a guid.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewTemporaryFileCommand">
            <summary>
            The implementation of the "New-TemporaryFile" cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewTemporaryFileCommand.EndProcessing">
            <summary>
            Returns a TemporaryFile.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewTimeSpanCommand">
            <summary>
            Implementation for the new-timespan command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.Start">
            <summary>
            This parameter indicates the date the time span begins;
            it is used if two times are being compared.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.End">
            <summary>
            This parameter indicates the end of a time span.  It is used if two
            times are being compared.  If one of the times is not specified,
            the current system time is used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.Days">
            <summary>
            Allows the user to override the day.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.Hours">
            <summary>
            Allows the user to override the hour.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.Minutes">
            <summary>
            Allows the user to override the minute.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewTimeSpanCommand.Seconds">
            <summary>
            Allows the user to override the second.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewTimeSpanCommand.ProcessRecord">
            <summary>
            Calculate and write out the appropriate timespan.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue">
            <summary>
            Keeps the property value of inputObject. Because the value of a non-existing property is null,
            isExistingProperty is needed to distinguish whether a property exists and its value is null or
            the property does not exist at all.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue.#ctor(System.Object,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            ObjectCommandPropertyValue constructor.
            </summary>
            <param name="propVal">Property Value.</param>
            <param name="isCaseSensitive">Indicates if the Property value comparison has to be case sensitive or not.</param>
            <param name="cultureInfo">Culture Info of the Property Value.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue.CaseSensitive">
            <summary>
            Indicates if the Property Value comparison has to be Case sensitive or not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue.Culture">
            <summary>
            Gets the Culture Info of the Property Value.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue.Equals(System.Object)">
            <summary>
            Provides an Equals implementation.
            </summary>
            <param name="inputObject">Input Object.</param>
            <returns>True if both the objects are same or else returns false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ObjectCommandPropertyValue.GetHashCode">
            <summary>
            Provides a GetHashCode() implementation.
            </summary>
            <returns>Hashcode in the form of an integer.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ObjectCommandComparer">
            <summary>
            ObjectCommandComparer class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ObjectCommandComparer.#ctor(System.Boolean,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Constructor that doesn't set any private field.
            Necessary because compareTo can compare two objects by calling
            ((ICompare)obj1).CompareTo(obj2) without using a key.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ObjectCommandComparer.Compare(System.Object,System.Object)">
             <summary>
             Main method that will compare first and second by their keys considering case and order.
             </summary>
             <param name="first">
             First object to extract value.
             </param>
             <param name="second">
             Second object to extract value.
             </param>
             <returns>
             0 if they are the same, less than 0 if first is smaller, more than 0 if first is greater.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SortObjectParameterDefinitionKeys">
            <summary>
            Definitions for hash table keys.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SortObjectExpressionParameterDefinition">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GroupObjectExpressionParameterDefinition">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ObjectCmdletBase">
            <summary>
            Base Cmdlet for cmdlets which deal with raw objects.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectCmdletBase.Culture">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectCmdletBase.CaseSensitive">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ObjectBase">
            <summary>
            Base Cmdlet for object cmdlets that deal with Grouping, Sorting and Comparison.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectBase.InputObject">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ObjectBase.Property">
            <summary>
            Gets or Sets the Properties that would be used for Grouping, Sorting and Comparison.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OrderObjectBase">
            <summary>
            Base Cmdlet for object cmdlets that deal with Ordering and Comparison.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OrderObjectBase.DescendingOrder">
            <summary>
            Specifies sorting order.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OrderObjectBase.ConvertedCulture">
            <summary>
            CultureInfo converted from the Culture Cmdlet parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OrderObjectBase.ProcessRecord">
            <summary>
            Simply accumulates the incoming objects.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.OrderByProperty.OrderMatrix">
            <summary>
            A logical matrix where each row is an input object and its property values specified by Properties.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OrderByProperty.#ctor">
            <summary>
            OrderByProperty constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.OrderByProperty.CreateOrderByPropertyEntry(System.Management.Automation.PSCmdlet,System.Management.Automation.PSObject,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Utility function used to create OrderByPropertyEntry for the supplied input object.
            </summary>
            <param name="cmdlet">PSCmdlet.</param>
            <param name="inputObject">Input Object.</param>
            <param name="isCaseSensitive">Indicates if the Property value comparisons need to be case sensitive or not.</param>
            <param name="cultureInfo">Culture Info that needs to be used for comparison.</param>
            <returns>OrderByPropertyEntry for the supplied InputObject.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.OrderByPropertyEntry">
            <summary>
            This is the row of the OrderMatrix.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSBreakpointAccessorCommandBase">
            <summary>
            Base class for Get/Set-PSBreakpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSBreakpointCommandBase">
            <summary>
            Base class for PSBreakpoint cmdlets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSBreakpointCommandBase.Runspace">
            <summary>
            Gets or sets the runspace where the breakpoints will be used.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSBreakpointCommandBase.BeginProcessing">
            <summary>
            Identifies the default runspace.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSBreakpointCommandBase.ProcessBreakpoint(System.Management.Automation.Breakpoint)">
            <summary>
            Write the given breakpoint out to the pipeline, decorated with the runspace instance id if appropriate.
            </summary>
            <param name="breakpoint">The breakpoint to write to the pipeline.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase">
            <summary>
            Base class for Enable/Disable/Remove-PSBreakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase.Breakpoint">
            <summary>
            Gets or sets the breakpoint to enable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase.Id">
            <summary>
            Gets or sets the Id of the breakpoint to enable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase.Runspace">
            <summary>
            Gets or sets the runspace where the breakpoints will be used.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase.ProcessRecord">
            <summary>
            Gathers the list of breakpoints to process and calls ProcessBreakpoints.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ReadHostCommand">
            <summary>
            Retrieves input from the host virtual console and writes it to the pipeline output.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ReadHostCommand.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ReadHostCommand.Prompt">
            <summary>
            The objects to display on the host before collecting input.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ReadHostCommand.AsSecureString">
            <summary>
            Gets or sets to no echo the input as is typed. If set then the cmdlet returns a secure string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ReadHostCommand.MaskInput">
            <summary>
            Gets or sets whether the console will echo the input as is typed. If set then the cmdlet returns a regular string.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ReadHostCommand.BeginProcessing">
            <summary>
            Write the prompt, then collect a line of input from the host, then output it to the output stream.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RegisterObjectEventCommand">
            <summary>
            Registers for an event on an object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RegisterObjectEventCommand.InputObject">
            <summary>
            The object on which to subscribe.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RegisterObjectEventCommand.EventName">
            <summary>
            The event name to subscribe.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RegisterObjectEventCommand.GetSourceObject">
            <summary>
            Returns the object that generates events to be monitored.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RegisterObjectEventCommand.GetSourceObjectEventName">
            <summary>
            Returns the event name to be monitored on the input object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RegisterEngineEventCommand">
            <summary>
            Registers for an event coming from the engine.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RegisterEngineEventCommand.SourceIdentifier">
            <summary>
            Parameter for an identifier for this event subscription.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RegisterEngineEventCommand.GetSourceObject">
            <summary>
            Returns the object that generates events to be monitored.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RegisterEngineEventCommand.GetSourceObjectEventName">
            <summary>
            Returns the event name to be monitored on the input object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemovePSBreakpointCommand">
            <summary>
            This class implements Remove-PSBreakpoint.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemovePSBreakpointCommand.ProcessBreakpoint(System.Management.Automation.Breakpoint)">
            <summary>
            Removes the given breakpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveAliasCommand">
            <summary>
            The implementation of the "Remove-Alias" cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveAliasCommand.Name">
            <summary>
            The alias name to remove.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveAliasCommand.Scope">
            <summary>
            The scope parameter for the command determines which scope the alias is removed from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveAliasCommand.Force">
            <summary>
            If set to true and an existing alias of the same name exists
            and is ReadOnly, it will still be deleted.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveEventCommand">
            <summary>
            Removes an event from the event queue.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveEventCommand.SourceIdentifier">
            <summary>
            A source identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveEventCommand.EventIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveEventCommand.ProcessRecord">
            <summary>
            Remove the event from the queue.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSPropertyExpressionFilter">
            <summary>
            Helper class to do wildcard matching on PSPropertyExpressions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSPropertyExpressionFilter.#ctor(System.String[])">
            <summary>
            Construct the class, using an array of patterns.
            </summary>
            <param name="wildcardPatternsStrings">Array of pattern strings to use.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSPropertyExpressionFilter.IsMatch(Microsoft.PowerShell.Commands.PSPropertyExpression)">
            <summary>
            Try to match the expression against the array of wildcard patterns.
            The first match shortcircuits the search.
            </summary>
            <param name="expression">PSPropertyExpression to test against.</param>
            <returns>True if there is a match, else false.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectObjectCommand">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.InputObject">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Property">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.ExcludeProperty">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.ExpandProperty">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Unique">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Last">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.First">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Skip">
            <summary>
            Skips the specified number of items from top when used with First, from end when used with Last.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.SkipLast">
            <summary>
            Skip the specified number of items from end.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Wait">
            <summary>
            With this switch present, the cmdlet won't "short-circuit"
            (i.e. won't stop upstream cmdlets after it knows that no further objects will be emitted downstream).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.Index">
            <summary>
            Used to display the object at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectObjectCommand.SkipIndex">
            <summary>
            Used to display all objects at the specified indices.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectObjectCommand._propertyMshParameterList">
            <summary>
            List of processed parameters obtained from the Expression array.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectObjectCommand._expandMshParameterList">
            <summary>
            Singleton list of process parameters obtained from ExpandProperty.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectObjectCommand.BeginProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectObjectCommand.ProcessRecord">
            <summary>
            Handles processing of InputObject.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectObjectCommand._currentFilterIndex">
            <summary>
            The index of the active index filter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectObjectCommand._currentObjectIndex">
            <summary>
            The index of the object being processed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectObjectCommand.ProcessIndexed">
            <summary>
            Handles processing of InputObject if -Index or -SkipIndex is specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectObjectCommand.EndProcessing">
            <summary>
            Completes the processing of Input.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectObjectException">
            <summary>
            Used only internally for select-object.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SendMailMessage">
            <summary>
            Implementation for the Send-MailMessage command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Attachments">
            <summary>
            Gets or sets the files names to be attached to the email.
            If the filename specified can not be found, then the relevant error
            message should be thrown.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Bcc">
            <summary>
            Gets or sets the address collection that contains the
            blind carbon copy (BCC) recipients for the e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Body">
            <summary>
            Gets or sets the body (content) of the message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.BodyAsHtml">
            <summary>
            Gets or sets the value indicating whether the mail message body is in Html.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Encoding">
            <summary>
            Gets or sets the encoding used for the content of the body and also the subject.
            This is set to ASCII to ensure there are no problems with any email server.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Cc">
            <summary>
            Gets or sets the address collection that contains the
            carbon copy (CC) recipients for the e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.DeliveryNotificationOption">
            <summary>
            Gets or sets the delivery notifications options for the e-mail message. The various
            options available for this parameter are None, OnSuccess, OnFailure, Delay and Never.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.From">
            <summary>
            Gets or sets the from address for this e-mail message. The default value for
            this parameter is the email address of the currently logged on user.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.SmtpServer">
            <summary>
            Gets or sets the name of the Host used to send the email. This host name will be assigned
            to the Powershell variable PSEmailServer, if this host can not reached an appropriate error.
            message will be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Priority">
            <summary>
            Gets or sets the priority of the email message. The valid values for this are Normal, High and Low.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.ReplyTo">
            <summary>
            Gets or sets the Reply-To field for this e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Subject">
            <summary>
            Gets or sets the subject of the email message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.To">
            <summary>
            Gets or sets the To address for this e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Credential">
            <summary>
            Gets or sets the credential for this e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.UseSsl">
            <summary>
            Gets or sets if Secured layer is required or not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SendMailMessage.Port">
            <summary>
            Gets or sets the Port to be used on the server. <see cref="P:Microsoft.PowerShell.Commands.SendMailMessage.SmtpServer"/>
            </summary>
            <remarks>
            Value must be greater than zero.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SendMailMessage.AddAddressesToMailMessage(System.Object,System.String)">
            <summary>
            Add the input addresses which are either string or hashtable to the MailMessage.
            It returns true if the from parameter has more than one value.
            </summary>
            <param name="address"></param>
            <param name="param"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SendMailMessage.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SendMailMessage.ProcessRecord">
            <summary>
            ProcessRecord override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SendMailMessage.EndProcessing">
            <summary>
            EndProcessing override.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetPSBreakpointCommand">
            <summary>
            This class implements Set-PSBreakpoint command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Action">
            <summary>
            Gets or sets the action to take when hitting this breakpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Column">
            <summary>
            Gets or sets the column to set the breakpoint on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Command">
            <summary>
            Gets or sets the command(s) to set the breakpoint on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Line">
            <summary>
            Gets or sets the line to set the breakpoint on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Script">
            <summary>
            Gets or sets the script to set the breakpoint on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Variable">
            <summary>
            Gets or sets the variables to set the breakpoint(s) on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.Mode">
            <summary>
            Gets or sets the access type for variable breakpoints to break on.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.BeginProcessing">
            <summary>
            Verifies that debugging is supported.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetPSBreakpointCommand.ProcessRecord">
            <summary>
            Set a new breakpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetAliasCommand">
            <summary>
            The implementation of the "set-alias" cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetAliasCommand.ProcessRecord">
            <summary>
            The main processing loop of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetDateCommand">
            <summary>
            Implementation for the set-date command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetDateCommand.Date">
            <summary>
            Allows user to override the date/time object that will be processed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetDateCommand.Adjust">
            <summary>
            Allows a use to specify a timespan with which to apply to the current time.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetDateCommand.DisplayHint">
            <summary>
            This option determines the default output format used to display the object set-date emits.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetDateCommand.ProcessRecord">
            <summary>
            Set the date.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandCommand">
            <summary>
            Show-Command displays a GUI for a cmdlet, or for all cmdlets if no specific cmdlet is specified.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._hasOpenedWindow">
            <summary>
            Set to true when ProcessRecord is reached, since it will always open a window.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._passThrough">
            <summary>
            Determines if the command should be sent to the pipeline as a string instead of run.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._showCommandProxy">
            <summary>
            Uses ShowCommandProxy to invoke WPF GUI object.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._commands">
            <summary>
            Data container for all cmdlets. This is populated when show-command is called with no command name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._importedModules">
            <summary>
            List of modules that have been loaded indexed by module name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._errors">
            <summary>
            Record the EndProcessing error.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._noCommonParameter">
            <summary>
            Field used for the NoCommonParameter parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand._commandViewModelObj">
            <summary>
            Object used for ShowCommand with a command name that holds the view model created for the command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.Finalize">
            <summary>
            Finalizes an instance of the ShowCommandCommand class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.Name">
            <summary>
            Gets or sets the command name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.Height">
            <summary>
            Gets or sets the Width.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.Width">
            <summary>
            Gets or sets the Width.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.NoCommonParameter">
            <summary>
            Gets or sets a value indicating Common Parameters should not be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.ErrorPopup">
            <summary>
            Gets or sets a value indicating errors should not cause a message window to be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandCommand.PassThru">
            <summary>
            Gets or sets a value indicating the command should be sent to the pipeline as a string instead of run.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.RunScript(System.String)">
            <summary>
            Executes a PowerShell script, writing the output objects to the pipeline.
            </summary>
            <param name="script">Script to execute.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.Dispose">
            <summary>
            Dispose method in IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.BeginProcessing">
            <summary>
            Initialize a proxy instance for show-command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.ProcessRecord">
            <summary>
            ProcessRecord with or without CommandName.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.EndProcessing">
            <summary>
            Optionally displays errors in a message.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.StopProcessing">
            <summary>
            StopProcessing is called close the window when user press Ctrl+C in the command prompt.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.RunScriptSilentlyAndWithErrorHookup(System.String)">
            <summary>
            Runs the script in a new PowerShell instance and hooks up error stream to potentially display error popup.
            This method has the inconvenience of not showing to the console user the script being executed.
            </summary>
            <param name="script">Script to be run.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.IssueErrorForNoCommand">
            <summary>
            Issues an error when this.commandName was not found.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.IssueErrorForMoreThanOneCommand">
            <summary>
            Issues an error when there is more than one command matching this.commandName.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.GetCommandInfoAndModules(System.Management.Automation.CommandInfo@,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo}@)">
            <summary>
            Called from CommandProcessRecord to run the command that will get the CommandInfo and list of modules.
            </summary>
            <param name="command">Command to be retrieved.</param>
            <param name="modules">List of loaded modules.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.CanProcessRecordForOneCommand">
            <summary>
            ProcessRecord when a command name is specified.
            </summary>
            <returns>True if there was no exception processing this record.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.CanProcessRecordForAllCommands">
            <summary>
            ProcessRecord when a command name is not specified.
            </summary>
            <returns>True if there was no exception processing this record.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.WaitForWindowClosedOrHelpNeeded">
            <summary>
            Waits until the window has been closed answering HelpNeeded events.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.Output_DataAdded(System.Object,System.Management.Automation.DataAddedEventArgs)">
            <summary>
            Writes the output of a script being run into the pipeline.
            </summary>
            <param name="sender">Output collection.</param>
            <param name="e">Output event.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.Error_DataAdded(System.Object,System.Management.Automation.DataAddedEventArgs)">
            <summary>
            Writes the errors of a script being run into the pipeline.
            </summary>
            <param name="sender">Error collection.</param>
            <param name="e">Error event.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic.
            </summary>
            <param name="isDisposing">True if being called from Dispose.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods">
            <summary>
            Wraps interop code for console input buffer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.STD_INPUT_HANDLE">
            <summary>
            Constant used in calls to GetStdHandle.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.AddToConsoleInputBuffer(System.String,System.Boolean)">
            <summary>
            Adds a string to the console input buffer.
            </summary>
            <param name="str">String to add to console input buffer.</param>
            <param name="newLine">True to add Enter after the string.</param>
            <returns>True if it was successful in adding all characters to console input buffer.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.GetStdHandle(System.Int32)">
            <summary>
            Gets the console handle.
            </summary>
            <param name="nStdHandle">Which console handle to get.</param>
            <returns>The console handle.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.WriteConsoleInput(System.IntPtr,Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD[],System.UInt32,System.UInt32@)">
            <summary>
            Writes to the console input buffer.
            </summary>
            <param name="hConsoleInput">Console handle.</param>
            <param name="lpBuffer">Inputs to be written.</param>
            <param name="nLength">Number of inputs to be written.</param>
            <param name="lpNumberOfEventsWritten">Returned number of inputs actually written.</param>
            <returns>0 if the function fails.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD">
            <summary>
            A record to be added to the console buffer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD.KEY_EVENT">
            <summary>
            The proper event type for a KeyEvent KEY_EVENT_RECORD.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD.EventType">
            <summary>
            Input buffer event type.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD.KeyEvent">
            <summary>
            The actual event. The original structure is a union of many others, but this is the largest of them.
            And we don't need other kinds of events.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD.SetInputRecord(Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.INPUT_RECORD@,System.Char)">
            <summary>
            Sets the necessary fields of <paramref name="inputRecord"/> for a KeyDown event for the <paramref name="character"/>
            </summary>
            <param name="inputRecord">Input record to be set.</param>
            <param name="character">Character to set the record with.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD">
            <summary>
            Type of INPUT_RECORD which is a key.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.bKeyDown">
            <summary>
            True for key down and false for key up, but only needed if wVirtualKeyCode is used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.wRepeatCount">
            <summary>
            Repeat count.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.wVirtualKeyCode">
            <summary>
            Virtual key code.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.wVirtualScanCode">
            <summary>
            Virtual key scan code.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.UnicodeChar">
            <summary>
            Character in input. If this is specified, wVirtualKeyCode, and others don't need to be.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandCommand.ConsoleInputWithNativeMethods.KEY_EVENT_RECORD.dwControlKeyState">
            <summary>
            State of keys like Shift and control.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo">
            <summary>
            Implements a facade around CommandInfo and its deserialized counterpart.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.#ctor(System.Management.Automation.CommandInfo)">
            <summary>
            Creates an instance of the ShowCommandCommandInfo class based on a CommandInfo object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates an instance of the ShowCommandCommandInfo class based on a PSObject object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.GetObjectEnumerable(System.Collections.IEnumerable)">
            <summary>
            Builds a strongly typed IEnumerable{object} out of an IEnumerable.
            </summary>
            <param name="enumerable">
            The object to enumerate.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.Name">
            <summary>
            A string representing the definition of the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.ModuleName">
            <summary>
            A string representing module the command belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.Module">
            <summary>
            A reference to the module the command came from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.CommandType">
            <summary>
            An enumeration of the command types this command belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.Definition">
            <summary>
            A string representing the definition of the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo.ParameterSets">
            <summary>
            A string representing the definition of the command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo">
            <summary>
            Implements a facade around PSModuleInfo and its deserialized counterpart.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo.#ctor(System.Management.Automation.PSModuleInfo)">
            <summary>
            Creates an instance of the ShowCommandModuleInfo class based on a CommandInfo object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates an instance of the ShowCommandModuleInfo class based on a PSObject object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo.Name">
            <summary>
            Gets the name of this module.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo">
            <summary>
            Implements a facade around ShowCommandParameterInfo and its deserialized counterpart.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.#ctor(System.Management.Automation.CommandParameterInfo)">
            <summary>
            Creates an instance of the ShowCommandParameterInfo class based on a CommandParameterInfo object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates an instance of the ShowCommandParameterInfo class based on a PSObject object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.IsMandatory">
            <remarks>
            True if the parameter is dynamic, or false otherwise.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.ValueFromPipeline">
            <summary>
            Gets whether the parameter can take values from the incoming pipeline object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.ValidParamSetValues">
            <summary>
            The possible values of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.HasParameterSet">
            <summary>
            Gets whether the parameter has a parameter set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo.Position">
            <summary>
            Gets the position in which the parameter can be specified on the command line
            if not named. If the returned value is int.MinValue then the parameter must be named.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo">
            <summary>
            Implements a facade around CommandParameterSetInfo and its deserialized counterpart.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo.#ctor(System.Management.Automation.CommandParameterSetInfo)">
            <summary>
            Creates an instance of the ShowCommandParameterSetInfo class based on a CommandParameterSetInfo object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates an instance of the ShowCommandParameterSetInfo class based on a PSObject object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo.Name">
            <summary>
            Gets the name of the parameter set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo.IsDefault">
            <summary>
            Gets whether the parameter set is the default parameter set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo.Parameters">
            <summary>
            Gets the parameter information for the parameters in this parameter set.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType">
            <summary>
            Implements a facade around ShowCommandParameterInfo and its deserialized counterpart.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.#ctor(System.Type)">
            <summary>
            Creates an instance of the ShowCommandParameterType class based on a Type object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates an instance of the ShowCommandParameterType class based on a Type object.
            </summary>
            <param name="other">
            The object to wrap.
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.FullName">
            <summary>
            The full name of the outermost type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsEnum">
            <summary>
            Whether or not this type is an enum.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.ImplementsDictionary">
            <summary>
            Whether or not this type is an dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.HasFlagAttribute">
            <summary>
            Whether or not this enum has a flag attribute.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsArray">
            <summary>
            Whether or not this type is an array type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.ElementType">
            <summary>
            Gets the inner type, if this corresponds to an array type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsString">
            <summary>
            Whether or not this type is a string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsScriptBlock">
            <summary>
            Whether or not this type is an script block.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsBoolean">
            <summary>
            Whether or not this type is a bool.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.IsSwitch">
            <summary>
            Whether or not this type is a switch parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType.EnumValues">
            <summary>
            If this is an enum value, return the list of potential values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandProxy">
            <summary>
            Help show-command create WPF object and invoke WPF windows with the
            Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelperhelp type defined in Microsoft.PowerShell.GraphicalHost.dll.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowMarkdownCommand">
            <summary>
            Show the VT100EncodedString or Html property of on console or show.
            VT100EncodedString will be displayed on console.
            Html will be displayed in default browser.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowMarkdownCommand.InputObject">
            <summary>
            Gets or sets InputObject of type Microsoft.PowerShell.MarkdownRender.MarkdownInfo to display.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowMarkdownCommand.Path">
            <summary>
            Gets or sets path to markdown file(s) to display.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowMarkdownCommand.LiteralPath">
            <summary>
            Gets or sets the literal path parameter to markdown files(s) to display.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowMarkdownCommand.UseBrowser">
            <summary>
            Gets or sets the switch to view Html in default browser.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowMarkdownCommand.BeginProcessing">
            <summary>
            Override BeginProcessing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowMarkdownCommand.ProcessRecord">
            <summary>
            Override ProcessRecord.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowMarkdownCommand.ConvertFromMarkdown(System.String,System.Object)">
            <summary>
            Process markdown as path.
            </summary>
            <param name="parameter">Name of parameter to pass to `ConvertFrom-Markdown`.</param>
            <param name="input">Value of parameter.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowMarkdownCommand.ProcessMarkdownInfo(Microsoft.PowerShell.MarkdownRender.MarkdownInfo)">
            <summary>
            Process markdown as input objects.
            </summary>
            <param name="markdownInfo">Markdown object to process.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowMarkdownCommand.EndProcessing">
            <summary>
            Override EndProcessing.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SortObjectCommand">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SortObjectCommand.Stable">
            <summary>
            Gets or sets a value indicating whether a stable sort is required.
            </summary>
            <value></value>
            <remarks>
            Items that are duplicates according to the sort algorithm will appear
            in the same relative order in a stable sort.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SortObjectCommand.Descending">
            <summary>
            Gets or sets a value indicating whether the sort order is descending.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SortObjectCommand.Unique">
            <summary>
            Gets or sets a value indicating whether the sort filters out any duplicate objects.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SortObjectCommand.Top">
            <summary>
            Gets or sets the number of items to return in a Top N sort.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SortObjectCommand.Bottom">
            <summary>
            Gets or sets the number of items to return in a Bottom N sort.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SortObjectCommand.MoveUniqueEntriesToFront(System.Collections.Generic.List{Microsoft.PowerShell.Commands.OrderByPropertyEntry},Microsoft.PowerShell.Commands.OrderByPropertyComparer)">
            <summary>
            Moves unique entries to the front of the list.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SortObjectCommand.FullSort(System.Collections.Generic.List{Microsoft.PowerShell.Commands.OrderByPropertyEntry},Microsoft.PowerShell.Commands.OrderByPropertyComparer)">
            <summary>
            Sort unsorted OrderByPropertyEntry data using a full sort.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SortObjectCommand.Heapify(System.Collections.Generic.List{Microsoft.PowerShell.Commands.OrderByPropertyEntry},Microsoft.PowerShell.Commands.OrderByPropertyComparer)">
            <summary>
            Sort unsorted OrderByPropertyEntry data using an indexed min-/max-heap sort.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SortObjectCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StartSleepCommand">
            <summary>
            Suspend shell, script, or runspace activity for the specified period of time.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartSleepCommand.Dispose">
            <summary>
            Dispose method of IDisposable interface.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartSleepCommand.Seconds">
            <summary>
            Allows sleep time to be specified in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartSleepCommand.Milliseconds">
            <summary>
            Allows sleep time to be specified in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartSleepCommand.Sleep(System.Int32)">
            <summary>
            This method causes calling thread to sleep for specified milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartSleepCommand.ProcessRecord">
            <summary>
            ProcessRecord method.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartSleepCommand.StopProcessing">
            <summary>
            StopProcessing override.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TeeObjectCommand">
            <summary>
            Class for Tee-object implementation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TeeObjectCommand.InputObject">
            <summary>
            Object to process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TeeObjectCommand.FilePath">
            <summary>
            FilePath parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TeeObjectCommand.LiteralPath">
            <summary>
            Literal FilePath parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TeeObjectCommand.Append">
            <summary>
            Append switch.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TeeObjectCommand.Variable">
            <summary>
            Variable parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TeeObjectCommand.BeginProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TeeObjectCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TeeObjectCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TeeObjectCommand.Dispose">
            <summary>
            Dispose method in IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TeeObjectCommand.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TestJsonCommand">
            <summary>
            This class implements Test-Json command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestJsonCommand.Json">
            <summary>
            Gets or sets JSON string to be validated.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestJsonCommand.Schema">
            <summary>
            Gets or sets schema to validate the JSON against.
            This is optional parameter.
            If the parameter is absent the cmdlet only attempts to parse the JSON string.
            If the parameter present the cmdlet attempts to parse the JSON string and
            then validates the JSON against the schema. Before testing the JSON string,
            the cmdlet parses the schema doing implicitly check the schema too.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TestJsonCommand.SchemaFile">
            <summary>
            Gets or sets path to the file containg schema to validate the JSON string against.
            This is optional parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestJsonCommand.UnwrapException(System.Exception)">
            <summary>
            Process all exceptions in the AggregateException.
            Unwrap TargetInvocationException if any and
            rethrow inner exception without losing the stack trace.
            </summary>
            <param name="e">AggregateException to be unwrapped.</param>
            <returns>Return value is unreachable since we always rethrow.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestJsonCommand.BeginProcessing">
            <summary>
            Prepare a JSON schema.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TestJsonCommand.ProcessRecord">
            <summary>
            Validate a JSON.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.MeasureCommandCommand">
            <summary>
            Implements a cmdlet that applies a script block
            to each element of the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureCommandCommand.InputObject">
            <summary>
            This parameter specifies the current pipeline object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.MeasureCommandCommand.Expression">
            <summary>
            The script block to apply.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureCommandCommand.EndProcessing">
            <summary>
            Output the timer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.MeasureCommandCommand.ProcessRecord">
            <summary>
            Execute the script block passing in the current pipeline object as it's only parameter.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetTraceSourceCommand">
            <summary>
            A cmdlet that gets the TraceSource instances that are instantiated in the process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetTraceSourceCommand.Name">
            <summary>
            Gets or sets the category parameter which determines which trace switch to get.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetTraceSourceCommand.ProcessRecord">
            <summary>
            Gets the PSTraceSource for the specified category.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSHostTraceListener">
            <summary>
            This subclass of TraceListener allows for the trace output
            coming from a System.Management.Automation.TraceSwitch
            to be passed to the Msh host's RawUI methods.
            </summary>
            <remarks>
            This trace listener cannot be specified in the app.config file.
            It must be added through the add-tracelistener cmdlet.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSHostTraceListener.#ctor(System.Management.Automation.PSCmdlet)">
            <summary>
            Default constructor used if no.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSHostTraceListener.Dispose(System.Boolean)">
            <summary>
            Closes the TraceListenerDialog so that it no longer receives trace output.
            </summary>
            <param name="disposing">
            True if the TraceListener is being disposed, false otherwise.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSHostTraceListener.Write(System.String)">
            <summary>
            Sends the given output string to the host for processing.
            </summary>
            <param name="output">
            The trace output to be written.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSHostTraceListener.WriteLine(System.String)">
            <summary>
            Sends the given output string to the host for processing.
            </summary>
            <param name="output">
            The trace output to be written.
            </param>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.PSHostTraceListener._ui">
            <summary>
            The host interface to write the debug line to.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetTraceSourceCommand">
            <summary>
            A cmdlet that sets the properties of the TraceSwitch instances that are instantiated in the process.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.Name">
            <summary>
            The TraceSource parameter determines which TraceSource categories the
            operation will take place on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.Option">
            <summary>
            The flags to be set on the TraceSource.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.ListenerOption">
            <summary>
            The parameter which determines the options for output from the trace listeners.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.FilePath">
            <summary>
            Adds the file trace listener using the specified file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.Force">
            <summary>
            Force parameter to control read-only files.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.Debugger">
            <summary>
            If this parameter is specified the Debugger trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.PSHost">
            <summary>
            If this parameter is specified the Msh Host trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.RemoveListener">
            <summary>
            If set, the specified listeners will be removed regardless of their type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.RemoveFileListener">
            <summary>
            If set, the specified file trace listeners will be removed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetTraceSourceCommand.PassThru">
            <summary>
            Determines if the modified PSTraceSource should be written out.
            Default is false.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetTraceSourceCommand.ProcessRecord">
            <summary>
            Sets the TraceSource properties.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TraceCommandBase">
            <summary>
            A base class for cmdlets that has helper methods for globbing trace source instances.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandBase.GetMatchingTraceSource(System.String[],System.Boolean)">
            <summary>
            Gets the matching PSTraceSource instances for the specified patterns.
            </summary>
            <param name="patternsToMatch">
            The patterns used to match the PSTraceSource name.
            </param>
            <param name="writeErrorIfMatchNotFound">
            If true and the pattern does not contain wildcard patterns and no
            match is found, then WriteError will be called.
            </param>
            <returns>
            A collection of the matching PSTraceSource instances.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandBase.GetMatchingTraceSource(System.String[],System.Boolean,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            Gets the matching PSTraceSource instances for the specified patterns.
            </summary>
            <param name="patternsToMatch">
            The patterns used to match the PSTraceSource name.
            </param>
            <param name="writeErrorIfMatchNotFound">
            If true and the pattern does not contain wildcard patterns and no
            match is found, then WriteError will be called.
            </param>
            <param name="notMatched">
            The patterns for which a match was not found.
            </param>
            <returns>
            A collection of the matching PSTraceSource instances.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TraceCommandCommand">
            <summary>
            A cmdlet that traces the specified categories and flags for the duration of the
            specified expression.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.InputObject">
            <summary>
            This parameter specifies the current pipeline object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Name">
            <summary>
            The TraceSource parameter determines which TraceSource categories the
            operation will take place on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Option">
            <summary>
            The flags to be set on the TraceSource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Expression">
            <summary>
            The parameter for the expression that should be traced.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Command">
            <summary>
            The parameter for the expression that should be traced.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.ArgumentList">
            <summary>
            When set, this parameter is the arguments to pass to the command specified by
            the -Command parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.ListenerOption">
            <summary>
            The parameter which determines the options for output from the trace listeners.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.FilePath">
            <summary>
            Adds the file trace listener using the specified file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Force">
            <summary>
            Force parameter to control read-only files.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.Debugger">
            <summary>
            If this parameter is specified the Debugger trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceCommandCommand.PSHost">
            <summary>
            If this parameter is specified the Msh Host trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandCommand.BeginProcessing">
            <summary>
            Gets the PSTraceSource instances that match the names specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandCommand.ProcessRecord">
            <summary>
            Executes the expression.
            Note, this was taken from apply-expression.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandCommand.EndProcessing">
            <summary>
            Finishes running the command if specified and then sets the
            tracing options and listeners back to their original values.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandCommand.StopProcessing">
            <summary>
            Ensures that the sub-pipeline we created gets stopped as well.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceCommandCommand.Dispose">
            <summary>
            Resets the TraceSource flags back to their original value and restores
            the original TraceListeners.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TracePipelineWriter">
            <summary>
            This class acts a pipe redirector for the sub-pipeline created by the Trace-Command
            cmdlet.  It gets attached to the sub-pipelines success or error pipeline and redirects
            all objects written to these pipelines to trace-command pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TracePipelineWriter.WaitHandle">
            <summary>
            Get the wait handle signaled when buffer space is available in the underlying stream.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TracePipelineWriter.IsOpen">
            <summary>
            Check if the stream is open for further writes.
            </summary>
            <value>true if the underlying stream is open, otherwise; false.</value>
            <remarks>
            Attempting to write to the underlying stream if IsOpen is false throws
            an <see cref="T:System.ObjectDisposedException"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TracePipelineWriter.Count">
            <summary>
            Returns the number of objects in the underlying stream.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TracePipelineWriter.MaxCapacity">
            <summary>
            Get the capacity of the stream.
            </summary>
            <value>
            The capacity of the stream.
            </value>
            <remarks>
            The capacity is the number of objects that stream may contain at one time.  Once this
            limit is reached, attempts to write into the stream block until buffer space
            becomes available.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TracePipelineWriter.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            Causes subsequent calls to IsOpen to return false and calls to
            a write operation to throw an ObjectDisposedException.
            All calls to Close() after the first call are silently ignored.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream is already disposed.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TracePipelineWriter.Flush">
            <summary>
            Flush the data from the stream.  Closed streams may be flushed,
            but disposed streams may not.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The underlying stream is disposed.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TracePipelineWriter.Write(System.Object)">
            <summary>
            Write a single object into the underlying stream.
            </summary>
            <param name="obj">The object to add to the stream.</param>
            <returns>
            One, if the write was successful, otherwise;
            zero if the stream was closed before the object could be written,
            or if the object was AutomationNull.Value.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The underlying stream is closed.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TracePipelineWriter.Write(System.Object,System.Boolean)">
            <summary>
            Write objects to the underlying stream.
            </summary>
            <param name="obj">Object or enumeration to read from.</param>
            <param name="enumerateCollection">
            If enumerateCollection is true, and <paramref name="obj"/>
            is an enumeration according to LanguagePrimitives.GetEnumerable,
            the objects in the enumeration will be unrolled and
            written separately.  Otherwise, <paramref name="obj"/>
            will be written as a single object.
            </param>
            <returns>The number of objects written.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The underlying stream is closed.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> contains AutomationNull.Value
            </exception>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TraceListenerCommandBase">
            <summary>
            A base class for the trace cmdlets that allow you to specify
            which trace listeners to add to a TraceSource.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.NameInternal">
            <summary>
            The TraceSource parameter determines which TraceSource categories the
            operation will take place on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.OptionsInternal">
            <summary>
            The flags to be set on the TraceSource.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TraceListenerCommandBase.optionsSpecified">
            <summary>
            True if the Options parameter has been set, or false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.ListenerOptionsInternal">
            <summary>
            The parameter which determines the options for output from the trace listeners.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TraceListenerCommandBase.traceOptionsSpecified">
            <summary>
            True if the TraceOptions parameter was specified, or false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.FileListener">
            <summary>
            Adds the file trace listener using the specified file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.ForceWrite">
            <summary>
            Property that sets force parameter.  This will clear the
            read-only attribute on an existing file if present.
            </summary>
            <remarks>
            Note that we do not attempt to reset the read-only attribute.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.DebuggerListener">
            <summary>
            If this parameter is specified the Debugger trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.PSHostListener">
            <summary>
            If this parameter is specified the Msh Host trace listener will be added.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.AddTraceListenersToSources(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource})">
            <summary>
            Adds the console, debugger, file, or host listener if requested.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.TraceListenerCommandBase.FileStreams">
            <summary>
            The file streams that were open by this command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.RemoveListenersByName(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource},System.String[],System.Boolean)">
            <summary>
            Removes the tracelisteners from the specified trace sources.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.SetTraceListenerOptions(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource})">
            <summary>
            Sets the trace listener options based on the ListenerOptions parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.SetFlags(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource})">
            <summary>
            Sets the flags for all the specified TraceSources.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.TurnOnTracing(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource},System.Boolean)">
            <summary>
            Turns on tracing for the TraceSources, flags, and listeners defined by the parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.ResetTracing(System.Collections.ObjectModel.Collection{System.Management.Automation.PSTraceSource})">
            <summary>
            Resets tracing to the previous level for the TraceSources defined by the parameters.
            Note, TurnOnTracing must be called before calling ResetTracing or else all
            TraceSources will be turned off.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.TraceListenerCommandBase.ClearStoredState">
            <summary>
            Clears the store TraceSource state.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UnblockFileCommand">
            <summary>Removes the Zone.Identifier stream from a file.</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UnblockFileCommand.Path">
            <summary>
            The path of the file to unblock.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UnblockFileCommand.LiteralPath">
            <summary>
            The literal path of the file to unblock.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UnblockFileCommand.ProcessRecord">
            <summary>
            Generate the type(s)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UnblockFileCommand.IsValidFileForUnblocking(System.String)">
            <summary>
            IsValidFileForUnblocking is a helper method used to validate if
            the supplied file path has to be considered for unblocking.
            </summary>
            <param name="resolvedpath">File or directory path.</param>
            <returns>True is the supplied path is a
            valid file path or else false is returned.
            If the supplied path is a directory path then false is returned.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UnregisterEventCommand">
            <summary>
            Unregisters from an event on an object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UnregisterEventCommand.SourceIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UnregisterEventCommand.SubscriptionId">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UnregisterEventCommand.Force">
            <summary>
            Flag that determines if we should include subscriptions used to support other subscriptions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UnregisterEventCommand.ProcessRecord">
            <summary>
            Unsubscribe from the event.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UpdateData">
            <summary>
            This is the base class for update-typedata and update-formatdata.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.UpdateData.FileParameterSet">
            <summary>
            File parameter set name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateData.AppendPath">
            <summary>
            Files to append to the existing set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateData.PrependPath">
            <summary>
            Files to prepend to the existing set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateData.Glob(System.String[],System.String,System.Management.Automation.PSCmdlet)">
            <summary>
            </summary>
            <param name="files"></param>
            <param name="errorId"></param>
            <param name="cmdlet"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UpdateListCommand">
            <summary>
            This cmdlet updates the property of incoming objects and passes them to the
            pipeline. This cmdlet also returns a .NET object with properties that
            defines the update action on a list.
            This cmdlet is most helpful when the cmdlet author wants the user to do
            update action on object list that are not directly exposed through
            cmdlet parameter. One wants to update a property value which is a list
            (multi-valued parameter for a cmdlet), without exposing the list.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateListCommand.Add">
            <summary>
            The following is the definition of the input parameter "Add".
            Objects to add to the list.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateListCommand.Remove">
            <summary>
            The following is the definition of the input parameter "Remove".
            Objects to be removed from the list.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateListCommand.Replace">
            <summary>
            The following is the definition of the input parameter "Replace".
            Objects in this list replace the objects in the target list.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateListCommand.InputObject">
            <summary>
            The following is the definition of the input parameter "InputObject".
            List of InputObjects where the updates needs to applied to the specific property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateListCommand.Property">
            <summary>
            The following is the definition of the input parameter "Property".
            Defines which property of the input object should be updated with Add and Remove actions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateListCommand.ProcessRecord">
            <summary>
            ProcessRecord method.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateListCommand.EndProcessing">
            <summary>
            EndProcessing method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UpdateTypeDataCommand">
            <summary>
            This class implements update-typeData command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.MemberType">
            <summary>
            The member type of to be added.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.MemberName">
            <summary>
            The name of the new member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.Value">
            <summary>
            First value of the new member. The meaning of this value
            changes according to the member type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.SecondValue">
            <summary>
            Second value of the new member. The meaning of this value
            changes according to the member type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.TypeConverter">
            <summary>
            The type converter to be added.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.TypeAdapter">
            <summary>
            The type adapter to be added.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.SerializationMethod">
            <summary>
            SerializationMethod.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.TargetTypeForDeserialization">
            <summary>
            TargetTypeForDeserialization.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.SerializationDepth">
            <summary>
            SerializationDepth.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.DefaultDisplayProperty">
            <summary>
            DefaultDisplayProperty.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.InheritPropertySerializationSet">
            <summary>
            InheritPropertySerializationSet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.StringSerializationSource">
            <summary>
            StringSerializationSource.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.DefaultDisplayPropertySet">
            <summary>
            DefaultDisplayPropertySet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.DefaultKeyPropertySet">
            <summary>
            DefaultKeyPropertySet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.PropertySerializationSet">
            <summary>
            PropertySerializationSet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.TypeName">
            <summary>
            The type name we want to update on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.Force">
            <summary>
            True if we should overwrite a possibly existing member.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.TypeData">
            <summary>
            The TypeData instances.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.BeginProcessing">
            <summary>
            This method verify if the Type Table is shared and cannot be updated.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for update-typeData command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.EndProcessing">
            <summary>
            This method implements the EndProcessing method for update-typeData command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.ProcessDynamicType">
            <summary>
            Process the dynamic type update.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.GetMembers(System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Runspaces.TypeMemberData})">
            <summary>
            Get the members for the TypeData.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.EnsureTypeDataIsNotEmpty(System.Management.Automation.Runspaces.TypeData)">
            <summary>
            Check if the TypeData instance contains no members.
            </summary>
            <param name="typeData"></param>
            <returns>False if empty, true if not.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateTypeDataCommand.NewError(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Generate error record.
            </summary>
            <param name="errorId"></param>
            <param name="template"></param>
            <param name="targetObject"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UpdateFormatDataCommand">
            <summary>
            This class implements update-typeData command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateFormatDataCommand.BeginProcessing">
            <summary>
            This method verify if the Format database manager is shared and cannot be updated.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.UpdateFormatDataCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for update-FormatData command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveTypeDataCommand">
            <summary>
            Remove-TypeData cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveTypeDataCommand.TypeName">
            <summary>
            The target type to remove.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveTypeDataCommand.Path">
            <summary>
            The type xml file to remove from the cache.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveTypeDataCommand.TypeData">
            <summary>
            The TypeData to remove.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveTypeDataCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Remove-TypeData command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveTypeDataCommand.EndProcessing">
            <summary>
            This method implements the EndProcessing method for Remove-TypeData command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetTypeDataCommand">
            <summary>
            Get-TypeData cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetTypeDataCommand.TypeName">
            <summary>
            Get Formatting information only for the specified typename.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetTypeDataCommand.ProcessRecord">
            <summary>
            Takes out the content from the database and writes it out.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ArgumentToTypeNameTransformationAttribute">
            <summary>
            To make it easier to specify a TypeName, we add an ArgumentTransformationAttribute here.
            * string: return the string
            * Type: return the Type.ToString()
            * instance: return instance.GetType().ToString() .
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.TextEncodingType">
            <summary>
            Don't use! The API is obsolete!.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Unknown">
            <summary>
            No encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.String">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Byte">
            <summary>
            Byte encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.BigEndianUnicode">
            <summary>
            Big Endian Unicode encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.BigEndianUTF32">
            <summary>
            Big Endian UTF32 encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Utf8">
            <summary>
            UTF8 encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Utf7">
            <summary>
            UTF7 encoding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.TextEncodingType.Ascii">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.UtilityResources">
            <summary>
            Utility class to contain resources for the Microsoft.PowerShell.Utility module.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UtilityResources.PathDoesNotExist">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UtilityResources.FileReadError">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UtilityResources.FormatHexPathPrefix">
            <summary>
            The resource string used to indicate 'PATH:' in the formating header.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UtilityResources.AlgorithmTypeNotSupported">
            <summary>
            Error message to indicate that requested algorithm is not supported on the target platform.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.UtilityResources.CouldNotParseAsPowerShellDataFile">
            <summary>
            The file '{0}' could not be parsed as a PowerShell Data File.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ByteCollection">
            <summary>
            ByteCollection is used as a wrapper class for the collection of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.UInt32,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="offset">The Offset address to be used while displaying the bytes in the collection.</param>
            <param name="value">Underlying bytes stored in the collection.</param>
            <param name="path">Indicates the path of the file whose contents are wrapped in the ByteCollection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.UInt64,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="offset">The Offset address to be used while displaying the bytes in the collection.</param>
            <param name="value">Underlying bytes stored in the collection.</param>
            <param name="path">Indicates the path of the file whose contents are wrapped in the ByteCollection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="offset">The Offset address to be used while displaying the bytes in the collection.</param>
            <param name="value">Underlying bytes stored in the collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.UInt64,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="offset">The Offset address to be used while displaying the bytes in the collection.</param>
            <param name="value">Underlying bytes stored in the collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.UInt64,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="offset">The Offset address to be used while displaying the bytes in the collection.</param>
            <param name="label">
            The label for the byte group. This may be a file path or a formatted identifying string for the group.
            </param>
            <param name="value">Underlying bytes stored in the collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/> class.
            </summary>
            <param name="value">Underlying bytes stored in the collection.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Offset">
            <summary>
            Gets the Offset address to be used while displaying the bytes in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Offset64">
            <summary>
            Gets the Offset address to be used while displaying the bytes in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Bytes">
            <summary>
            Gets underlying bytes stored in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Path">
            <summary>
            Gets the path of the file whose contents are wrapped in the ByteCollection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.HexOffset">
            <summary>
            Gets the hexadecimal representation of the <see cref="P:Microsoft.PowerShell.Commands.ByteCollection.Offset64"/> value.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Label">
            <summary>
            Gets the type of the input objects used to create the <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.HexBytes">
            <summary>
            Gets a space-delimited string of the <see cref="P:Microsoft.PowerShell.Commands.ByteCollection.Bytes"/> in this <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/>
            in hexadecimal format.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ByteCollection.Ascii">
            <summary>
            Gets the ASCII string representation of the <see cref="P:Microsoft.PowerShell.Commands.ByteCollection.Bytes"/> in this <see cref="T:Microsoft.PowerShell.Commands.ByteCollection"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ByteCollection.ToString">
            <summary>
            Displays the hexadecimal format of the bytes stored in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.VariableCommandBase">
            <summary>
            Base class for all variable commands.
            Because -Scope is defined in VariableCommandBase, all derived commands must implement -Scope.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.VariableCommandBase.Scope">
            <summary>
            Selects active scope to work with; used for all variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.VariableCommandBase.IncludeFilters">
            <summary>
            The Include parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.VariableCommandBase.ExcludeFilters">
            <summary>
            The Exclude parameter for all the variable commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.VariableCommandBase.GetMatchingVariables(System.String,System.String,System.Boolean@,System.Boolean)">
            <summary>
            Gets the matching variable for the specified name, using the
            Include, Exclude, and Scope parameters defined in the base class.
            </summary>
            <param name="name">
            The name or pattern of the variables to retrieve.
            </param>
            <param name="lookupScope">
            The scope to do the lookup in. If null or empty the normal scoping rules apply.
            </param>
            <param name="wasFiltered">
            True is returned if a variable exists of the given name but was filtered
            out via globbing, include, or exclude.
            </param>
            <param name="quiet">
            If true, don't report errors when trying to access private variables.
            </param>
            <returns>
            A collection of the variables matching the name, include, and exclude
            pattern in the specified scope.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.GetVariableCommand">
            <summary>
            Implements get-variable command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVariableCommand.Name">
            <summary>
            Name of the PSVariable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVariableCommand.ValueOnly">
            <summary>
            Output only the value(s) of the requested variable(s).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVariableCommand.Include">
            <summary>
            The Include parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetVariableCommand.Exclude">
            <summary>
            The Exclude parameter for all the variable commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetVariableCommand.ProcessRecord">
            <summary>
            Implements ProcessRecord() method for get-variable's command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewVariableCommand">
            <summary>
            Class implementing new-variable command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Name">
            <summary>
            Name of the PSVariable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Value">
            <summary>
            Value of the PSVariable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Description">
            <summary>
            Description of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Option">
            <summary>
            The options for the variable to specify if the variable should
            be ReadOnly, Constant, and/or Private.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Visibility">
            <summary>
            Specifies the visibility of the new variable...
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.Force">
            <summary>
            Force the operation to make the best attempt at setting the variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewVariableCommand.PassThru">
            <summary>
            The variable object should be passed down the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewVariableCommand.ProcessRecord">
            <summary>
            Add objects received on the pipeline to an ArrayList of values, to
            take the place of the Value parameter if none was specified on the
            command line.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SetVariableCommand">
            <summary>
            This class implements set-variable command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Name">
            <summary>
            Name of the PSVariable(s) to set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Value">
            <summary>
            Value of the PSVariable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Include">
            <summary>
            The Include parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Exclude">
            <summary>
            The Exclude parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Description">
            <summary>
            Description of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Option">
            <summary>
            The options for the variable to specify if the variable should
            be ReadOnly, Constant, and/or Private.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Force">
            <summary>
            Force the operation to make the best attempt at setting the variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.Visibility">
            <summary>
            Sets the visibility of the variable...
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SetVariableCommand.PassThru">
            <summary>
            The variable object should be passed down the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetVariableCommand.BeginProcessing">
            <summary>
            Checks to see if the name and value parameters were bound as formal parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetVariableCommand.ProcessRecord">
            <summary>
            If name and value are both specified as a formal parameters, then
            just ignore the incoming objects in ProcessRecord.
            If name is a formal parameter but the value is coming from the pipeline,
            then accumulate the values in the valueList and set the variable during
            EndProcessing().
            If name is not a formal parameter, then set
            the variable each time ProcessRecord is called.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetVariableCommand.EndProcessing">
            <summary>
            Sets the variable if the name was specified as a formal parameter
            but the value came from the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SetVariableCommand.SetVariable(System.String[],System.Object)">
            <summary>
            Sets the variables of the given names to the specified value.
            </summary>
            <param name="varNames">
            The name(s) of the variables to set.
            </param>
            <param name="varValue">
            The value to set the variable to.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.RemoveVariableCommand">
            <summary>
            The Remove-Variable cmdlet implementation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveVariableCommand.Name">
            <summary>
            Name of the PSVariable(s) to set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveVariableCommand.Include">
            <summary>
            The Include parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveVariableCommand.Exclude">
            <summary>
            The Exclude parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.RemoveVariableCommand.Force">
            <summary>
            If true, the variable is removed even if it is ReadOnly.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.RemoveVariableCommand.ProcessRecord">
            <summary>
            Removes the matching variables from the specified scope.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ClearVariableCommand">
            <summary>
            This class implements set-variable command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearVariableCommand.Name">
            <summary>
            Name of the PSVariable(s) to set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearVariableCommand.Include">
            <summary>
            The Include parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearVariableCommand.Exclude">
            <summary>
            The Exclude parameter for all the variable commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearVariableCommand.Force">
            <summary>
            Force the operation to make the best attempt at clearing the variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ClearVariableCommand.PassThru">
            <summary>
            The variable object should be passed down the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearVariableCommand.ProcessRecord">
            <summary>
            The implementation of the Clear-Variable command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ClearVariableCommand.ClearValue(System.Management.Automation.PSVariable)">
            <summary>
            Clears the value of the variable using the PSVariable instance if the scope
            was specified or using standard variable lookup if the scope was not specified.
            </summary>
            <param name="matchingVariable">
            The variable that matched the name parameter(s).
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WaitEventCommand">
            <summary>
            Waits for a given event to arrive.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WaitEventCommand.SourceIdentifier">
            <summary>
            An identifier for this event subscription.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WaitEventCommand.Timeout">
            <summary>
            If timeout is specified, the cmdlet will only wait for this number of seconds.
            Value of -1 means never timeout.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitEventCommand.ProcessRecord">
            <summary>
            Wait for the event to arrive.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WaitEventCommand.StopProcessing">
            <summary>
            Handle Control-C.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject">
            <summary>
            Response object for html content without DOM parsing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Constructor for BasicHtmlWebResponseObject.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.#ctor(System.Net.Http.HttpResponseMessage,System.IO.Stream)">
            <summary>
            Constructor for HtmlWebResponseObject with memory stream.
            </summary>
            <param name="response"></param>
            <param name="contentStream"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Content">
            <summary>
            Gets the text body content of this response.
            </summary>
            <value>
            Content of the response body, decoded using <see cref="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Encoding"/>,
            if the <c>Content-Type</c> response header is a recognized text
            type.  Otherwise <c>null</c>.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Encoding">
            <summary>
            Gets the encoding of the text body content of this response.
            </summary>
            <value>
            Encoding of the response body from the <c>Content-Type</c> header,
            or <c>null</c> if the encoding could not be determined.
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.InputFields">
            <summary>
            Gets the HTML input field elements parsed from <see cref="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Content"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Links">
            <summary>
            Gets the HTML a link elements parsed from <see cref="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Content"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Images">
            <summary>
            Gets the HTML img elements parsed from <see cref="P:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.Content"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject.InitializeContent">
            <summary>
            Reads the response content from the web response.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.InvokeRestMethodCommand">
            <summary>
            The Invoke-RestMethod command
            This command makes an HTTP or HTTPS request to a web service,
            and returns the response in an appropriate way.
            Intended to work against the wide spectrum of "RESTful" web services
            currently deployed across the web.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.Method">
            <summary>
            Gets or sets the parameter Method.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.CustomMethod">
            <summary>
            Gets or sets the parameter CustomMethod.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.FollowRelLink">
            <summary>
            Enable automatic following of rel links.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.MaximumFollowRelLink">
            <summary>
            Gets or sets the maximum number of rel links to follow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.ResponseHeadersVariable">
            <summary>
            Gets or sets the ResponseHeadersVariable property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.StatusCodeVariable">
            <summary>
            Gets or sets the variable name to use for storing the status code from the response.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.RestReturnType">
            <summary>
            Enum for rest return type.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.RestReturnType.Detect">
            <summary>
            Return type not defined in response,
            best effort detect.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.RestReturnType.Json">
            <summary>
            Json return type.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.RestReturnType.Xml">
            <summary>
            Xml return type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeRestMethodCommand.ProcessResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Process the web response and output corresponding objects.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebAuthenticationType">
            <summary>
            The valid values for the -Authentication parameter for Invoke-RestMethod and Invoke-WebRequest.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebAuthenticationType.None">
            <summary>
            No authentication. Default.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebAuthenticationType.Basic">
            <summary>
            RFC-7617 Basic Authentication. Requires -Credential.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebAuthenticationType.Bearer">
            <summary>
            RFC-6750 OAuth 2.0 Bearer Authentication. Requires -Token.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebAuthenticationType.OAuth">
            <summary>
            RFC-6750 OAuth 2.0 Bearer Authentication. Requires -Token.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebSslProtocol">
            <summary>
            The valid values for the -SslProtocol parameter for Invoke-RestMethod and Invoke-WebRequest.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebSslProtocol.Default">
            <summary>
            No SSL protocol will be set and the system defaults will be used.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebSslProtocol.Tls">
            <summary>
            Specifies the TLS 1.0 security protocol. The TLS protocol is defined in IETF RFC 2246.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebSslProtocol.Tls11">
            <summary>
            Specifies the TLS 1.1 security protocol. The TLS protocol is defined in IETF RFC 4346.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebSslProtocol.Tls12">
            <summary>
            Specifies the TLS 1.2 security protocol. The TLS protocol is defined in IETF RFC 5246.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebSslProtocol.Tls13">
            <summary>
            Specifies the TLS 1.3 security protocol. The TLS protocol is defined in IETF RFC 8446.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebRequestPSCmdlet">
            <summary>
            Base class for Invoke-RestMethod and Invoke-WebRequest commands.
            </summary>
            <summary>
            Base class for Invoke-RestMethod and Invoke-WebRequest commands.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.UseBasicParsing">
            <summary>
            Deprecated. Gets or sets UseBasicParsing. This has no affect on the operation of the Cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Uri">
            <summary>
            Gets or sets the Uri property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.WebSession">
            <summary>
            Gets or sets the Session property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SessionVariable">
            <summary>
            Gets or sets the SessionVariable property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.AllowUnencryptedAuthentication">
            <summary>
            Gets or sets the AllowUnencryptedAuthentication property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Authentication">
            <summary>
            Gets or sets the Authentication property used to determin the Authentication method for the web session.
            Authentication does not work with UseDefaultCredentials.
            Authentication over unencrypted sessions requires AllowUnencryptedAuthentication.
            Basic: Requires Credential.
            OAuth/Bearer: Requires Token.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Credential">
            <summary>
            Gets or sets the Credential property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.UseDefaultCredentials">
            <summary>
            Gets or sets the UseDefaultCredentials property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.CertificateThumbprint">
            <summary>
            Gets or sets the CertificateThumbprint property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Certificate">
            <summary>
            Gets or sets the Certificate property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SkipCertificateCheck">
            <summary>
            Gets or sets the SkipCertificateCheck property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SslProtocol">
            <summary>
            Gets or sets the TLS/SSL protocol used by the Web Cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Token">
            <summary>
            Gets or sets the Token property. Token is required by Authentication OAuth and Bearer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.UserAgent">
            <summary>
            Gets or sets the UserAgent property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.DisableKeepAlive">
            <summary>
            Gets or sets the DisableKeepAlive property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.TimeoutSec">
            <summary>
            Gets or sets the TimeOut property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Headers">
            <summary>
            Gets or sets the Headers property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.MaximumRedirection">
            <summary>
            Gets or sets the RedirectMax property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.MaximumRetryCount">
            <summary>
            Gets or sets the MaximumRetryCount property, which determines the number of retries of a failed web request.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.RetryIntervalSec">
            <summary>
            Gets or sets the RetryIntervalSec property, which determines the number seconds between retries.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Method">
            <summary>
            Gets or sets the Method property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.CustomMethod">
            <summary>
            Gets or sets the CustomMethod property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.NoProxy">
            <summary>
            Gets or sets the NoProxy property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Proxy">
            <summary>
            Gets or sets the Proxy property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProxyCredential">
            <summary>
            Gets or sets the ProxyCredential property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProxyUseDefaultCredentials">
            <summary>
            Gets or sets the ProxyUseDefaultCredentials property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Body">
            <summary>
            Gets or sets the Body property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Form">
            <summary>
            Dictionary for use with RFC-7578 multipart/form-data submissions.
            Keys are form fields and their respective values are form values.
            A value may be a collection of form values or single form value.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ContentType">
            <summary>
            Gets or sets the ContentType property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.TransferEncoding">
            <summary>
            Gets or sets the TransferEncoding property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.InFile">
            <summary>
            Gets or sets the InFile property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._originalFilePath">
            <summary>
            Keep the original file path after the resolved provider path is assigned to InFile.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.OutFile">
            <summary>
            Gets or sets the OutFile property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.PassThru">
            <summary>
            Gets or sets the PassThrough property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.Resume">
            <summary>
            Resumes downloading a partial or incomplete file. OutFile is required.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SkipHttpErrorCheck">
            <summary>
            Gets or sets whether to skip checking HTTP status for error codes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ShouldResume">
            <summary>
            Determines whether writing to a file should Resume and append rather than overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.PreserveAuthorizationOnRedirect">
            <summary>
            Gets or sets the PreserveAuthorizationOnRedirect property.
            </summary>
            <remarks>
            This property overrides compatibility with web requests on Windows.
            On FullCLR (WebRequest), authorization headers are stripped during redirect.
            CoreCLR (HTTPClient) does not have this behavior so web requests that work on
            PowerShell/FullCLR can fail with PowerShell/CoreCLR.  To provide compatibility,
            we'll detect requests with an Authorization header and automatically strip
            the header when the first redirect occurs. This switch turns off this logic for
            edge cases where the authorization header needs to be preserved across redirects.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SkipHeaderValidation">
            <summary>
            Gets or sets the SkipHeaderValidation property.
            </summary>
            <remarks>
            This property adds headers to the request's header collection without validation.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Read the supplied WebResponse object and push the resulting output into the pipeline.
            </summary>
            <param name="response">Instance of a WebResponse object to be processed.</param>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._cancelToken">
            <summary>
            Cancellation token source.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._parseRelLink">
            <summary>
            Parse Rel Links.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._followRelLink">
            <summary>
            Automatically follow Rel Links.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._relationLink">
            <summary>
            Automatically follow Rel Links.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._maximumFollowRelLink">
            <summary>
            Maximum number of Rel Links to follow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._resumeSuccess">
            <summary>
            The remote endpoint returned a 206 status code indicating successful resume.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestPSCmdlet._resumeFileSize">
            <summary>
            The current size of the local file being resumed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord">
            <summary>
            The main execution method for cmdlets derived from WebRequestPSCmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.StopProcessing">
            <summary>
            Implementing ^C, after start the BeginGetResponse.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SetRequestContent(System.Net.Http.HttpRequestMessage,System.Byte[])">
            <summary>
            Sets the ContentLength property of the request and writes the specified content to the request's RequestStream.
            </summary>
            <param name="request">The WebRequest who's content is to be set.</param>
            <param name="content">A byte array containing the content data.</param>
            <returns>The number of bytes written to the requests RequestStream (and the new value of the request's ContentLength property.</returns>
            <remarks>
            Because this function sets the request's ContentLength property and writes content data into the requests's stream,
            it should be called one time maximum on a given request.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SetRequestContent(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Sets the ContentLength property of the request and writes the specified content to the request's RequestStream.
            </summary>
            <param name="request">The WebRequest who's content is to be set.</param>
            <param name="content">A String object containing the content data.</param>
            <returns>The number of bytes written to the requests RequestStream (and the new value of the request's ContentLength property.</returns>
            <remarks>
            Because this function sets the request's ContentLength property and writes content data into the requests's stream,
            it should be called one time maximum on a given request.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SetRequestContent(System.Net.Http.HttpRequestMessage,System.IO.Stream)">
            <summary>
            Sets the ContentLength property of the request and writes the specified content to the request's RequestStream.
            </summary>
            <param name="request">The WebRequest who's content is to be set.</param>
            <param name="contentStream">A Stream object containing the content data.</param>
            <returns>The number of bytes written to the requests RequestStream (and the new value of the request's ContentLength property.</returns>
            <remarks>
            Because this function sets the request's ContentLength property and writes content data into the requests's stream,
            it should be called one time maximum on a given request.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.SetRequestContent(System.Net.Http.HttpRequestMessage,System.Net.Http.MultipartFormDataContent)">
            <summary>
            Sets the ContentLength property of the request and writes the specified content to the request's RequestStream.
            </summary>
            <param name="request">The WebRequest who's content is to be set.</param>
            <param name="multipartContent">A MultipartFormDataContent object containing multipart/form-data content.</param>
            <returns>The number of bytes written to the requests RequestStream (and the new value of the request's ContentLength property.</returns>
            <remarks>
            Because this function sets the request's ContentLength property and writes content data into the requests's stream,
            it should be called one time maximum on a given request.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.AddMultipartContent(System.Object,System.Object,System.Net.Http.MultipartFormDataContent,System.Boolean)">
            <summary>
            Adds content to a <see cref="T:System.Net.Http.MultipartFormDataContent" />. Object type detection is used to determine if the value is string, File, or Collection.
            </summary>
            <param name="fieldName">The Field Name to use.</param>
            <param name="fieldValue">The Field Value to use.</param>
            <param name="formData">The <see cref="T:System.Net.Http.MultipartFormDataContent" />> to update.</param>
            <param name="enumerate">If true, collection types in <paramref name="fieldValue" /> will be enumerated. If false, collections will be treated as single value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetMultipartStringContent(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetMultipartStreamContent(System.Object,System.IO.Stream)" -->
        <member name="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetMultipartFileContent(System.Object,System.IO.FileInfo)">
            <summary>
            Gets a <see cref="T:System.Net.Http.StreamContent" /> from the supplied field name and file. Calls <see cref="M:Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetMultipartStreamContent(System.Object,System.IO.Stream)" /> to create the <see cref="T:System.Net.Http.StreamContent" /> and then sets the file name.
            </summary>
            <param name="fieldName">The Field Name to use for the <see cref="T:System.Net.Http.StreamContent" /></param>
            <param name="file">The file to use for the <see cref="T:System.Net.Http.StreamContent" /></param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.HttpResponseException">
            <summary>
            Exception class for webcmdlets to enable returning HTTP error response.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.HttpResponseException.#ctor(System.String,System.Net.Http.HttpResponseMessage)">
            <summary>
            Constructor for HttpResponseException.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="response">Response from the HTTP server.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.HttpResponseException.Response">
            <summary>
            HTTP error response.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebResponseObject">
            <summary>
            WebResponseObject.
            </summary>
            <summary>
            WebResponseObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.Content">
            <summary>
            Gets or protected sets the response body content.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.StatusCode">
            <summary>
            Gets the response status code.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.StatusDescription">
            <summary>
            Gets the response status description.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.RawContentStream">
            <summary>
            Gets the response body content as a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.RawContentLength">
            <summary>
            Gets the length (in bytes) of <see cref="P:Microsoft.PowerShell.Commands.WebResponseObject.RawContentStream"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.RawContent">
            <summary>
            Gets or protected sets the full response content.
            </summary>
            <value>
            Full response content, including the HTTP status line, headers, and body.
            </value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseObject.InitializeContent">
            <summary>
            Reads the response content from the web response.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseObject.ToString">
            <summary>
            Returns the string representation of this web response.
            </summary>
            <returns>The string representation of this web response.</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.BaseResponse">
            <summary>
            Gets or sets the BaseResponse property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.Headers">
            <summary>
            Gets the Headers property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseObject.RelationLink">
            <summary>
            Gets the RelationLink property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseObject.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Constructor for WebResponseObject.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseObject.#ctor(System.Net.Http.HttpResponseMessage,System.IO.Stream)">
            <summary>
            Constructor for WebResponseObject with contentStream.
            </summary>
            <param name="response"></param>
            <param name="contentStream"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertFromJsonCommand">
            <summary>
            The ConvertFrom-Json command.
            This command converts a Json string representation to a JsonObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.InputObject">
            <summary>
            Gets or sets the InputString property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertFromJsonCommand._inputObjectBuffer">
            <summary>
            InputObjectBuffer buffers all InputObject contents available in the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.AsHashtable">
            <summary>
            Returned data structure is a Hashtable instead a CustomPSObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.Depth">
            <summary>
            Gets or sets the maximum depth the JSON input is allowed to have. By default, it is 1024.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.NoEnumerate">
            <summary>
            Gets or sets the switch to prevent ConvertFrom-Json from unravelling collections during deserialization, instead passing them as a single
            object through the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.ProcessRecord">
            <summary>
            Buffers InputObjet contents available in the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.EndProcessing">
            <summary>
            The main execution method for the ConvertFrom-Json command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertFromJsonCommand.ConvertFromJsonHelper(System.String)">
            <summary>
            ConvertFromJsonHelper is a helper method to convert to Json input to .Net Type.
            </summary>
            <param name="input">Input string.</param>
            <returns>True if successfully converted, else returns false.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToJsonCommand">
            <summary>
            The ConvertTo-Json command.
            This command converts an object to a Json string representation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.InputObject">
            <summary>
            Gets or sets the InputObject property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.Depth">
            <summary>
            Gets or sets the Depth property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.Compress">
            <summary>
            Gets or sets the Compress property.
            If the Compress property is set to be true, the Json string will
            be output in the compressed way. Otherwise, the Json string will
            be output with indentations.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.EnumsAsStrings">
            <summary>
            Gets or sets the EnumsAsStrings property.
            If the EnumsAsStrings property is set to true, enum values will
            be converted to their string equivalent. Otherwise, enum values
            will be converted to their numeric equivalent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.AsArray">
            <summary>
            Gets or sets the AsArray property.
            If the AsArray property is set to be true, the result JSON string will
            be returned with surrounding '[', ']' chars. Otherwise,
            the array symbols will occur only if there is more than one input object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.PowerShell.Commands.ConvertToJsonCommand.EscapeHandling" -->
        <member name="M:Microsoft.PowerShell.Commands.ConvertToJsonCommand.BeginProcessing">
            <summary>
            Prerequisite checks.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToJsonCommand.ProcessRecord">
            <summary>
            Caching the input objects for the command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToJsonCommand.EndProcessing">
            <summary>
            Do the conversion to json and write output.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToJsonCommand.StopProcessing">
            <summary>
            Process the Ctrl+C signal.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.InvokeWebRequestCommand">
            <summary>
            The Invoke-WebRequest command.
            This command makes an HTTP or HTTPS request to a web server and returns the results.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeWebRequestCommand.#ctor">
            <summary>
            Default constructor for InvokeWebRequestCommand.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.InvokeWebRequestCommand.ProcessResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Process the web response and output corresponding objects.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormObject">
            <summary>
            FormObject used in HtmlWebResponseObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormObject.Id">
            <summary>
            Gets or private sets the Id property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormObject.Method">
            <summary>
            Gets or private sets the Method property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormObject.Action">
            <summary>
            Gets or private sets the Action property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormObject.Fields">
            <summary>
            Gets or private sets the Fields property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.FormObject.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for FormObject.
            </summary>
            <param name="id"></param>
            <param name="method"></param>
            <param name="action"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.FormObjectCollection">
            <summary>
            FormObjectCollection used in HtmlWebResponseObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.FormObjectCollection.Item(System.String)">
            <summary>
            Gets the FormObject from the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.JsonObject">
            <summary>
            JsonObject class.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext">
            <summary>
            Context for convert-to-json operation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.MaxDepth">
            <summary>
            Gets the maximum depth for walking the object graph.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.CancellationToken">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.StringEscapeHandling">
            <summary>
            Gets the StringEscapeHandling setting.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.EnumsAsStrings">
            <summary>
            Gets the EnumsAsStrings setting.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.CompressOutput">
            <summary>
            Gets the CompressOutput setting.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.Cmdlet">
            <summary>
            Gets the target cmdlet that is doing the convert-to-json operation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext"/> struct.
            </summary>
            <param name="maxDepth">The maximum depth to visit the object.</param>
            <param name="enumsAsStrings">Indicates whether to use enum names for the JSON conversion.</param>
            <param name="compressOutput">Indicates whether to get the compressed output.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext.#ctor(System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken,Newtonsoft.Json.StringEscapeHandling,System.Management.Automation.PSCmdlet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext"/> struct.
            </summary>
            <param name="maxDepth">The maximum depth to visit the object.</param>
            <param name="enumsAsStrings">Indicates whether to use enum names for the JSON conversion.</param>
            <param name="compressOutput">Indicates whether to get the compressed output.</param>
            <param name="cancellationToken">Specifies the cancellation token for cancelling the operation.</param>
            <param name="stringEscapeHandling">Specifies how strings are escaped when writing JSON text.</param>
            <param name="targetCmdlet">Specifies the cmdlet that is calling this method.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertFromJson(System.String,System.Management.Automation.ErrorRecord@)">
            <summary>
            Convert a Json string back to an object of type PSObject.
            </summary>
            <param name="input">The json text to convert.</param>
            <param name="error">An error record if the conversion failed.</param>
            <returns>A PSObject.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertFromJson(System.String,System.Boolean,System.Management.Automation.ErrorRecord@)">
            <summary>
            Convert a Json string back to an object of type <see cref="T:System.Management.Automation.PSObject"/> or
            <see cref="T:System.Collections.Hashtable"/> depending on parameter <paramref name="returnHashtable"/>.
            </summary>
            <param name="input">The json text to convert.</param>
            <param name="returnHashtable">True if the result should be returned as a <see cref="T:System.Collections.Hashtable"/>
            instead of a <see cref="T:System.Management.Automation.PSObject"/></param>
            <param name="error">An error record if the conversion failed.</param>
            <returns>A <see cref="T:System.Management.Automation.PSObject"/> or a <see cref="T:System.Collections.Hashtable"/>
            if the <paramref name="returnHashtable"/> parameter is true.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertFromJson(System.String,System.Boolean,System.Nullable{System.Int32},System.Management.Automation.ErrorRecord@)">
            <summary>
            Convert a JSON string back to an object of type <see cref="T:System.Management.Automation.PSObject"/> or
            <see cref="T:System.Collections.Hashtable"/> depending on parameter <paramref name="returnHashtable"/>.
            </summary>
            <param name="input">The JSON text to convert.</param>
            <param name="returnHashtable">True if the result should be returned as a <see cref="T:System.Collections.Hashtable"/>
            instead of a <see cref="T:System.Management.Automation.PSObject"/>.</param>
            <param name="maxDepth">The max depth allowed when deserializing the json input. Set to null for no maximum.</param>
            <param name="error">An error record if the conversion failed.</param>
            <returns>A <see cref="T:System.Management.Automation.PSObject"/> or a <see cref="T:System.Collections.Hashtable"/>
            if the <paramref name="returnHashtable"/> parameter is true.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ConvertToJson(System.Object,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Convert an object to JSON string.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ProcessValue(System.Object,System.Int32,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Return an alternate representation of the specified object that serializes the same JSON, except
            that properties that cannot be evaluated are treated as having the value null.
            Primitive types are returned verbatim.  Aggregate types are processed recursively.
            </summary>
            <param name="obj">The object to be processed.</param>
            <param name="currentDepth">The current depth into the object graph.</param>
            <param name="context">The context to use for the convert-to-json operation.</param>
            <returns>An object suitable for serializing to JSON.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.AddPsProperties(System.Object,System.Object,System.Int32,System.Boolean,System.Boolean,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Add to a base object any properties that might have been added to an object (via PSObject) through the Add-Member cmdlet.
            </summary>
            <param name="psObj">The containing PSObject, or null if the base object was not contained in a PSObject.</param>
            <param name="obj">The base object that might have been decorated with additional properties.</param>
            <param name="depth">The current depth into the object graph.</param>
            <param name="isPurePSObj">The processed object is a pure PSObject.</param>
            <param name="isCustomObj">The processed object is a custom object.</param>
            <param name="context">The context for the operation.</param>
            <returns>
            The original base object if no additional properties had been added,
            otherwise a dictionary containing the value of the original base object in the "value" key
            as well as the names and values of an additional properties.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.AppendPsProperties(System.Management.Automation.PSObject,System.Collections.IDictionary,System.Int32,System.Boolean,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Append to a dictionary any properties that might have been added to an object (via PSObject) through the Add-Member cmdlet.
            If the passed in object is a custom object (not a simple object, not a dictionary, not a list, get processed in ProcessCustomObject method),
            we also take Adapted properties into account. Otherwise, we only consider the Extended properties.
            When the object is a pure PSObject, it also gets processed in "ProcessCustomObject" before reaching this method, so we will
            iterate both extended and adapted properties for it. Since it's a pure PSObject, there will be no adapted properties.
            </summary>
            <param name="psObj">The containing PSObject, or null if the base object was not contained in a PSObject.</param>
            <param name="receiver">The dictionary to which any additional properties will be appended.</param>
            <param name="depth">The current depth into the object graph.</param>
            <param name="isCustomObject">The processed object is a custom object.</param>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ProcessDictionary(System.Collections.IDictionary,System.Int32,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Return an alternate representation of the specified dictionary that serializes the same JSON, except
            that any contained properties that cannot be evaluated are treated as having the value null.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ProcessEnumerable(System.Collections.IEnumerable,System.Int32,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
            <summary>
            Return an alternate representation of the specified collection that serializes the same JSON, except
            that any contained properties that cannot be evaluated are treated as having the value null.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.JsonObject.ProcessCustomObject``1(System.Object,System.Int32,Microsoft.PowerShell.Commands.JsonObject.ConvertToJsonContext@)">
             <summary>
             Return an alternate representation of the specified aggregate object that serializes the same JSON, except
             that any contained properties that cannot be evaluated are treated as having the value null.
            
             The result is a dictionary in which all public fields and public gettable properties of the original object
             are represented.  If any exception occurs while retrieving the value of a field or property, that entity
             is included in the output dictionary with a value of null.
             </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSUserAgent">
            <summary>
            Construct the Useragent string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSUserAgent.InternetExplorer">
            <summary>
            Useragent string for InternetExplorer (9.0).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSUserAgent.FireFox">
            <summary>
            Useragent string for Firefox (4.0).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSUserAgent.Chrome">
            <summary>
            Useragent string for Chrome (7.0).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSUserAgent.Opera">
            <summary>
            Useragent string for Opera (9.0).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSUserAgent.Safari">
            <summary>
            Useragent string for Safari (5.0).
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream">
            <summary>
            Microsoft.PowerShell.Commands.WebResponse has a public property RawContentStream
            which is of type MemoryStream. We shipped like that in PowerShell 3. Creating
            this class as a wrapper to MemoryStream to lazily initialize. Otherwise, the
            content will unnecessarily be read even if there are no consumers for it.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.#ctor(System.IO.Stream,System.Int32,System.Management.Automation.Cmdlet)">
            <summary>
            </summary>
            <param name="stream"></param>
            <param name="initialCapacity"></param>
            <param name="cmdlet">Owner cmdlet if any.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.CanRead">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.CanSeek">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.CanTimeout">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.CanWrite">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Length">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="destination"></param>
            <param name="bufferSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.ReadByte">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.SetLength(System.Int64)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.ToArray">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.WriteByte(System.Byte)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Dispose(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StreamHelper.SaveStreamToFile(System.IO.Stream,System.String,System.Management.Automation.PSCmdlet,System.Threading.CancellationToken)">
            <summary>
            Saves content from stream into filePath.
            Caller need to ensure <paramref name="stream"/> position is properly set.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="filePath">Output file name.</param>
            <param name="cmdlet">Current cmdlet (Invoke-WebRequest or Invoke-RestMethod).</param>
            <param name="cancellationToken">CancellationToken to track the cmdlet cancellation.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebCmdletElementCollection">
            <summary>
            WebCmdletElementCollection for elements in html web responses.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebCmdletElementCollection.Find(System.String)">
            <summary>
            Finds the element with name or id.
            </summary>
            <param name="nameOrId"></param>
            <returns>Found element as PSObject.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebCmdletElementCollection.FindById(System.String)">
            <summary>
            Finds the element by id.
            </summary>
            <param name="id"></param>
            <returns>Found element as PSObject.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebCmdletElementCollection.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name"></param>
            <returns>Found element as PSObject.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebRequestMethod">
            <summary>
            Enums for web request method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Default">
            <summary>
            Default method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Get">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Head">
            <summary>
            HEAD method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Post">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Put">
            <summary>
            PUT method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Delete">
            <summary>
            DELETE method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Trace">
            <summary>
            TRACE method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Options">
            <summary>
            OPTIONS method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Merge">
            <summary>
            MERGE method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.WebRequestMethod.Patch">
            <summary>
            PATCH method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WebRequestSession">
            <summary>
            WebRequestSession for holding session infos.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.Headers">
            <summary>
            Gets or sets the Header property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.ContentHeaders">
            <summary>
            Gets or sets the content Headers when using HttpClient.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.Cookies">
            <summary>
            Gets or sets the Cookies property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.UseDefaultCredentials">
            <summary>
            Gets or sets the UseDefaultCredentials property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.Credentials">
            <summary>
            Gets or sets the Credentials property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.Certificates">
            <summary>
            Gets or sets the Certificates property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.UserAgent">
            <summary>
            Gets or sets the UserAgent property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.Proxy">
            <summary>
            Gets or sets the Proxy property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.MaximumRedirection">
            <summary>
            Gets or sets the RedirectMax property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.MaximumRetryCount">
            <summary>
            Gets or sets the count of retries for request failures.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WebRequestSession.RetryIntervalInSeconds">
            <summary>
            Gets or sets the interval in seconds between retries.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestSession.#ctor">
            <summary>
            Construct a new instance of a WebRequestSession object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WebRequestSession.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Add a X509Certificate to the Certificates collection.
            </summary>
            <param name="certificate">The certificate to be added.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteOutputCommand">
            <summary>
            This class implements Write-Output command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOutputCommand.InputObject">
            <summary>
            Holds the list of objects to be written.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOutputCommand.NoEnumerate">
            <summary>
            Prevents Write-Output from unravelling collections passed to the InputObject parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteOutputCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Write-output command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteDebugCommand">
            <summary>
            This class implements Write-Debug command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteDebugCommand.Message">
            <summary>
            Message to be sent and processed if debug mode is on.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteDebugCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Write-Debug command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteVerboseCommand">
            <summary>
            This class implements Write-Verbose command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteVerboseCommand.Message">
            <summary>
            Message to be sent if verbose messages are being shown.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteVerboseCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Write-verbose command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteWarningCommand">
            <summary>
            This class implements Write-Warning command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteWarningCommand.Message">
            <summary>
            Message to be sent if warning messages are being shown.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteWarningCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Write-Warning command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteInformationCommand">
            <summary>
            This class implements Write-Information command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteInformationCommand.MessageData">
            <summary>
            Object to be sent to the Information stream.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteInformationCommand.Tags">
            <summary>
            Any tags to be associated with this information.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteInformationCommand.BeginProcessing">
            <summary>
            This method implements the processing of the Write-Information command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteInformationCommand.ProcessRecord">
            <summary>
            This method implements the ProcessRecord method for Write-Information command.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand">
            <summary>
            This class implements the Write-Error command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.Exception">
            <summary>
            ErrorRecord.Exception -- if not specified, ErrorRecord.Exception is System.Exception.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.Message">
            <summary>
            If Exception is specified, this is ErrorRecord.ErrorDetails.Message;
            otherwise, the Exception is System.Exception, and this is Exception.Message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.ErrorRecord">
            <summary>
            If Exception is specified, this is ErrorRecord.ErrorDetails.Message;
            otherwise, the Exception is System.Exception, and this is Exception.Message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.Category">
            <summary>
            ErrorRecord.CategoryInfo.Category.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.ErrorId">
            <summary>
            ErrorRecord.ErrorId.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.TargetObject">
            <summary>
            ErrorRecord.TargetObject.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.RecommendedAction">
            <summary>
            ErrorRecord.ErrorDetails.RecommendedAction.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.CategoryActivity">
            <summary>
            ErrorRecord.CategoryInfo.Activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.CategoryReason">
            <summary>
            ErrorRecord.CategoryInfo.Reason.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.CategoryTargetName">
            <summary>
            ErrorRecord.CategoryInfo.TargetName.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.CategoryTargetType">
            <summary>
            ErrorRecord.CategoryInfo.TargetType.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand.ProcessRecord">
            <summary>
            Write an error to the output pipe, or throw a terminating error.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteErrorCommand">
            <summary>
            This class implements Write-Error command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteErrorCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteErrorException">
            <summary>
            The write-error cmdlet uses WriteErrorException
            when the user only specifies a string and not
            an Exception or ErrorRecord.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteErrorException.#ctor">
            <summary>
            Constructor for class WriteErrorException.
            </summary>
            <returns>Constructed object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteErrorException.#ctor(System.String)">
            <summary>
            Constructor for class WriteErrorException.
            </summary>
            <param name="message"></param>
            <returns>Constructed object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for class WriteErrorException.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns>Constructed object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for class WriteErrorException.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
            <returns>Constructed object.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteAliasCommandBase">
            <summary>
            The base class for the SetAliasCommand and NewAliasCommand.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Name">
            <summary>
            The Name parameter for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Value">
            <summary>
            The Value parameter for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Description">
            <summary>
            The description for the alias.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Option">
            <summary>
            The Option parameter allows the alias to be set to
            ReadOnly (for existing aliases) and/or Constant (only
            for new aliases).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.PassThru">
            <summary>
            If set to true, the alias that is set is passed to the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Scope">
            <summary>
            The scope parameter for the command determines which scope the alias is set in.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteAliasCommandBase.Force">
            <summary>
            If set to true and an existing alias of the same name exists
            and is ReadOnly, the alias will be overwritten.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteHostCommand">
            <summary>
            WriteHost cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteHostCommand.Object">
            <summary>
            Object to be output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteHostCommand.NoNewline">
            <summary>
            False to add a newline to the end of the output string, true if not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteHostCommand.Separator">
            <summary>
            Gets and sets the separator to print between objects.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteHostCommand.ProcessRecord">
            <summary>
            Outputs the object to the host console, with optional newline.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.WriteProgressCommand">
            <summary>
            Implements the write-progress cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.Activity">
            <summary>
            Describes the activity for which progress is being reported.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.Status">
            <summary>
            Describes the current state of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.Id">
            <summary>
            Uniquely identifies this activity for purposes of chaining subordinate activities.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.PercentComplete">
            <summary>
            Percentage completion of the activity, or -1 if n/a.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.SecondsRemaining">
            <summary>
            Seconds remaining to complete the operation, or -1 if n/a.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.CurrentOperation">
            <summary>
            Description of current operation in activity, empty if n/a.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.ParentId">
            <summary>
            Identifies the parent Id of this activity, or -1 if none.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.Completed">
            <summary>
            Identifies whether the activity has completed (and the display for it should be removed),
            or if it is proceeding (and the display for it should be shown).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.WriteProgressCommand.SourceId">
            <summary>
            Identifies the source of the record.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.WriteProgressCommand.ProcessRecord">
            <summary>
            Writes a ProgressRecord created from the parameters.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ExportClixmlCommand">
            <summary>
            Implementation for the Export-Clixml command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.Depth">
            <summary>
            Depth of serialization.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.Path">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.LiteralPath">
            <summary>
            Mandatory file name to write to.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.InputObject">
            <summary>
            Input object to be exported.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.Force">
            <summary>
            Property that sets force parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.NoClobber">
            <summary>
            Property that prevents file overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ExportClixmlCommand.Encoding">
            <summary>
            Encoding optional flag.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportClixmlCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportClixmlCommand.ProcessRecord">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportClixmlCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportClixmlCommand.StopProcessing">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportClixmlCommand._fs">
            <summary>
            Handle to file stream.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportClixmlCommand._xw">
            <summary>
            Stream writer used to write to file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportClixmlCommand._serializer">
            <summary>
            Serializer used for serialization.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportClixmlCommand._readOnlyFileInfo">
            <summary>
            FileInfo of file to clear read-only flag when operation is complete.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ExportClixmlCommand._disposed">
            <summary>
            Set to true when object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ExportClixmlCommand.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportClixmlCommand">
            <summary>
            Implements Import-Clixml command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportClixmlCommand.Path">
            <summary>
            Mandatory file name to read from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportClixmlCommand.LiteralPath">
            <summary>
            Mandatory file name to read from.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportClixmlCommand.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportClixmlCommand.ProcessRecord">
            <summary>
            ProcessRecord overload.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportClixmlCommand.StopProcessing">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ConvertToXmlCommand">
            <summary>
            Implementation for the convertto-xml command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToXmlCommand.Depth">
            <summary>
            Depth of serialization.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToXmlCommand.InputObject">
            <summary>
            Input Object which is written to XML format.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToXmlCommand.NoTypeInformation">
            <summary>
            Property that sets NoTypeInformation parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ConvertToXmlCommand.As">
            <summary>
            Property that sets As parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.BeginProcessing">
            <summary>
            BeginProcessing override.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.ProcessRecord">
            <summary>
            Override ProcessRecord.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.EndProcessing">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.StopProcessing">
            <summary>
            StopProcessing.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToXmlCommand._xw">
            <summary>
            XmlText writer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToXmlCommand._serializer">
            <summary>
            Serializer used for serialization.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToXmlCommand._ms">
            <summary>
            Memory Stream used for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.CleanUp">
             <summary>
            Cleaning up the MemoryStream.
             </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ConvertToXmlCommand._disposed">
            <summary>
            Set to true when object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ConvertToXmlCommand.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportXmlHelper">
            <summary>
            Helper class to import single XML file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportXmlHelper._path">
            <summary>
            XML file to import.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportXmlHelper._cmdlet">
            <summary>
            Reference to cmdlet which is using this helper class.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportXmlHelper._fs">
            <summary>
            Handle to file stream.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportXmlHelper._xr">
            <summary>
            XmlReader used to read file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ImportXmlHelper._disposed">
            <summary>
            Set to true when object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportXmlHelper.Dispose">
            <summary>
            Public dispose method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectXmlCommand">
            <summary>
            This cmdlet is used to search an xml document based on the XPath Query.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.Path">
            <summary>
            Specifies the path which contains the xml files. The default is the current user directory.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.LiteralPath">
            <summary>
            Specifies the literal path which contains the xml files. The default is the current user directory.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.Xml">
            <summary>
            The following is the definition of the input parameter "XML".
            Specifies the xml Node.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.Content">
            <summary>
            The following is the definition of the input parameter in string format.
            Specifies the string format of a fully qualified xml.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.XPath">
            <summary>
            The following is the definition of the input parameter "Xpath".
            Specifies the String in XPath language syntax. The xml documents will be
            searched for the nodes/values represented by this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlCommand.Namespace">
            <summary>
            The following definition used to specify the NameSpace of xml.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlCommand.ProcessRecord">
            <summary>
            ProcessRecord method.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.SelectXmlInfo">
            <summary>
            The object returned by Select-Xml representing the result of a match.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.SelectXmlInfo.inputStream">
            <summary>
            If the object is InputObject, Input Stream is used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlInfo.Node">
            <summary>
            The XmlNode that matches search.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlInfo.Path">
            <summary>
            The FileName from which the match is found.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.SelectXmlInfo.Pattern">
            <summary>
            The pattern used to search.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlInfo.ToString">
            <summary>
            Returns the string representation of this object. The format
            depends on whether a path has been set for this object or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlInfo.ToString(System.String)">
            <summary>
            Return String representation of the object.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlInfo.GetNodeText">
            <summary>
            Returns the XmlNode Value or InnerXml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlInfo.RelativePath(System.String)">
            <summary>
            Returns the path of the matching file truncated relative to the <paramref name="directory"/> parameter.
            <remarks>
            For example, if the matching path was c:\foo\bar\baz.c and the directory argument was c:\foo
            the routine would return bar\baz.c
            </remarks>
            </summary>
            <param name="directory">The directory base the truncation on.</param>
            <returns>The relative path that was produced.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.SelectXmlInfo.FormatLine(System.String,System.String)">
            <summary>
            Formats a line for use in ToString.
            </summary>
            <param name="text"></param>
            <param name="displaypath"></param>
            <returns></returns>
        </member>
        <member name="T:System.Management.Automation.CustomSerialization">
            <summary>
            This class provides functionality for serializing a PSObject.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerialization._depth">
            <summary>
            Depth of serialization.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerialization._writer">
            <summary>
            XmlWriter to be used for writing.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerialization._notypeinformation">
            <summary>
            Whether type information should be included in the xml.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerialization._serializer">
            <summary>
            CustomerSerializer used for formatting the output for _writer.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.#ctor(System.Xml.XmlWriter,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">
            writer to be used for serialization.
            </param>
            <param name="notypeinformation">
            should the type information to be shown.
            </param>
            <param name="depth">
            depth to be used for serialization. If this value is specified,
            depth from types.xml is not used.
            </param>
        </member>
        <member name="P:System.Management.Automation.CustomSerialization.MshDefaultSerializationDepth">
            <summary>
            Default depth of serialization.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.#ctor(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">
            writer to be used for serialization.
            </param>
            <param name="notypeinformation">
            should the type information to be shown.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.Serialize(System.Object)">
            <summary>
            Serializes passed in object.
            </summary>
            <param name="source">
            Object to be serialized.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.SerializeAsStream(System.Object)">
            <summary>
            Serializes passed in object.
            </summary>
            <param name="source">
            Object to be serialized.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.Start">
            <summary>
            Writes the start of root element.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.Done">
            <summary>
            Write the end of root element.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomSerialization.DoneAsStream">
            <summary>
            Flush the writer.
            </summary>
        </member>
        <member name="T:System.Management.Automation.CustomInternalSerializer">
            <summary>
            This internal helper class provides methods for serializing mshObject.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomInternalSerializer._writer">
            <summary>
            Xml writer to be used.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomInternalSerializer._firstcall">
            <summary>
            Check first call for every pipeline object to write Object tag else property tag.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomInternalSerializer._notypeinformation">
            <summary>
            Should the type information to be shown.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomInternalSerializer._firstobjectcall">
            <summary>
            Check object call.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.#ctor(System.Xml.XmlWriter,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">
            Xml writer to be used.
            </param>
            <param name="notypeinformation">
            Xml writer to be used.
            </param>
            <param name="isfirstcallforObject">
            Check first call for every pipeline object to write Object tag else property tag.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.Stop">
            <summary>
            Called from a separate thread will stop the serialization process.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteOneObject(System.Object,System.String,System.Int32)">
            <summary>
            This writes one object.
            </summary>
            <param name="source">
            source to be serialized.
            </param>
            <param name="property">
            name of property. If null, name attribute is not written.
            </param>
            <param name="depth">
            depth to which this object should be serialized.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.HandlePrimitiveKnownType(System.Object,System.String)">
            <summary>
            Serializes Primitive Known Types.
            </summary>
            <returns>
            true if source is handled, else false.
            </returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.HandlePrimitiveKnownTypePSObject(System.Object,System.String,System.Int32)">
            <summary>
            Serializes PSObject whose base objects are of primitive known type.
            </summary>
            <param name="source"></param>
            <param name="property"></param>
            <param name="depth"></param>
            <returns>
            true if source is handled, else false.
            </returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.GetKnownContainerTypeInfo(System.Object,System.Management.Automation.ContainerType@,System.Collections.IDictionary@,System.Collections.IEnumerable@)">
            <summary>
            Checks if source is known container type and returns appropriate information.
            </summary>
            <param name="source"></param>
            <param name="ct"></param>
            <param name="dictionary"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.DerivesFromGenericType(System.Type,System.Type)">
            <summary>
            Checks if derived is of type baseType or a type derived from baseType.
            </summary>
            <param name="derived"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WritePrimitiveTypePSObjectWithNotes(System.Management.Automation.PSObject,System.Object,System.Management.Automation.TypeSerializationInfo,System.String,System.Int32)">
            <summary>
            Serializes an PSObject whose baseobject is of primitive type.
            and which has notes.
            </summary>
            <param name="source">
            Source from which notes are written.
            </param>
            <param name="primitive">
            primitive object which is written as base object. In most cases it
            is same source.ImmediateBaseObject. When PSObject is serialized as string,
            it can be different. <see cref="M:System.Management.Automation.CustomInternalSerializer.HandlePSObjectAsString(System.Management.Automation.PSObject,System.String,System.Int32)"/> for more info.
            </param>
            <param name="pktInfo">
            TypeSerializationInfo for the primitive.
            </param>
            <param name="property"></param>
            <param name="depth"></param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteStartOfPSObject(System.Management.Automation.PSObject,System.String,System.Boolean)">
            <summary>
            Writes start element, attributes and typeNames for PSObject.
            </summary>
            <param name="mshObject"></param>
            <param name="property"></param>
            <param name="writeTNH">
            if true, TypeName information is written, else not.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.PSObjectHasNotes(System.Management.Automation.PSObject)">
            <summary>
            Returns true if PSObject has notes.
            </summary>
            <param name="source"></param>
            <returns>
            </returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteMemberInfoCollection(System.Management.Automation.PSMemberInfoCollection{System.Management.Automation.PSMemberInfo},System.Int32,System.Boolean)">
            <summary>
            Serialize member set. This method serializes without writing.
            enclosing tags and attributes.
            </summary>
            <param name="me">
            Enumerable containing members
            </param>
            <param name="depth"></param>
            <param name="writeEnclosingMemberSetElementTag">
            if this is true, write an enclosing "<memberset></memberset>" tag.
            </param>
            <returns></returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WritePSObjectProperties(System.Management.Automation.PSObject,System.Int32)">
            <summary>
            Serializes properties of PSObject.
            </summary>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.SerializeProperties(System.Management.Automation.PSMemberInfoInternalCollection{System.Management.Automation.PSPropertyInfo},System.String,System.Int32)">
            <summary>
            Serializes properties from collection.
            </summary>
            <param name="propertyCollection">
            Collection of properties to serialize.
            </param>
            <param name="name">
            Name for enclosing element tag.
            </param>
            <param name="depth">
            Depth to which each property should be serialized.
            </param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteEnumerable(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Serializes IEnumerable.
            </summary>
            <param name="enumerable">
            Enumerable which is serialized.
            </param>
            <param name="depth"></param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteDictionary(System.Collections.IDictionary,System.Int32)">
            <summary>
            Serializes IDictionary.
            </summary>
            <param name="dictionary">Dictionary which is serialized.</param>
            <param name="depth"></param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.GetStringFromPSObject(System.Management.Automation.PSObject)">
            <summary>
            Gets the string from PSObject using the information from
            types.ps1xml. This string is used for serializing the PSObject.
            </summary>
            <param name="source">
            PSObject to be converted to string.
            </param>
            <returns>
            string value to use for serializing this PSObject.
            </returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.SerializeAsString(System.Management.Automation.PSObject)">
            <summary>
            Reads the information the PSObject
            and returns true if this object should be serialized as string.
            </summary>
            <param name="source">PSObject to be serialized.</param>
            <returns>True if the object needs to be serialized as a string.</returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.GetDepthOfSerialization(System.Management.Automation.PSObject,System.Int32)">
            <summary>
            Compute the serialization depth for an PSObject instance subtree.
            </summary>
            <param name="source">PSObject whose serialization depth has to be computed.</param>
            <param name="depth">Current depth.</param>
            <returns></returns>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteNull(System.String)">
            <summary>
            Writes null.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteOnePrimitiveKnownType(System.Xml.XmlWriter,System.String,System.Object,System.Management.Automation.TypeSerializationInfo)">
            <summary>
            Writes an item or property in Monad namespace.
            </summary>
            <param name="writer">The XmlWriter stream to which the object is serialized.</param>
            <param name="property">Name of property. Pass null for item.</param>
            <param name="source">Object to be written.</param>
            <param name="entry">Serialization information about source.</param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteStartElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes start element in Monad namespace.
            </summary>
            <param name="writer"></param>
            <param name="elementTag">Tag of element.</param>
        </member>
        <member name="M:System.Management.Automation.CustomInternalSerializer.WriteAttribute(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes attribute in monad namespace.
            </summary>
            <param name="writer"></param>
            <param name="name">Name of attribute.</param>
            <param name="value">Value of attribute.</param>
        </member>
        <member name="T:System.Management.Automation.CustomSerializationStrings">
            <summary>
            This class contains strings required for serialization for ConvertTo-XML.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.RootElementTag">
            <summary>
            Element tag for root node.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.PSObjectTag">
            <summary>
            Element tag for PSObject.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.Properties">
            <summary>
            Element tag for properties.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.NameAttribute">
            <summary>
            String for name attribute.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.TypeAttribute">
            <summary>
            String for type attribute.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.DictionaryKey">
            <summary>
            Value of name attribute for dictionary key part in dictionary entry.
            </summary>
        </member>
        <member name="F:System.Management.Automation.CustomSerializationStrings.DictionaryValue">
            <summary>
            Value of name attribute for dictionary value part in dictionary entry.
            </summary>
        </member>
        <member name="T:System.Management.Automation.Runspaces.RunspaceAttribute">
            <summary>
            Defines the attribute used to designate a cmdlet parameter as one that
            should accept runspaces.
            </summary>
        </member>
        <member name="M:System.Management.Automation.Runspaces.RunspaceAttribute.Transform(System.Management.Automation.EngineIntrinsics,System.Object)">
            <summary>
            Transforms the input data to a Runspace.
            </summary>
            <param name="engineIntrinsics">
            The engine APIs for the context under which the transformation is being
            made.
            </param>
            <param name="inputData">
            If a string, the transformation uses the input as the runspace name.
            If an int, the transformation uses the input as the runspace ID.
            If a guid, the transformation uses the input as the runspace GUID.
            If already a Runspace, the transform does nothing.
            </param>
            <returns>A runspace object representing the inputData.</returns>
        </member>
        <member name="P:System.Management.Automation.Runspaces.RunspaceAttribute.TransformNullOptionalParameters">
            <summary>
            Gets a flag indicating whether or not null optional parameters are transformed.
            </summary>
        </member>
        <member name="T:AddMember">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:AddMember.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:AddMember.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AddMember.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AddMember.WrongMemberCount">
            <summary>
              Looks up a localized string similar to 
               To add a member, only one member type can be specified. The member types specified are: "{0}"
             
            </summary>
        </member>
        <member name="P:AddMember.CannotAddMemberType">
            <summary>
              Looks up a localized string similar to 
               Cannot add a member with type "{0}". Specify a different type for the MemberTypes parameter.
             
            </summary>
        </member>
        <member name="P:AddMember.Value2ShouldNotBeSpecified">
            <summary>
              Looks up a localized string similar to 
               The SecondValue parameter is not necessary for a member of type "{0}", and should not be specified. Do not specify the SecondValue parameter when you add members of this type.
             
            </summary>
        </member>
        <member name="P:AddMember.Value1Prompt">
            <summary>
              Looks up a localized string similar to 
               The Value parameter is required for a member of type "{0}". Specify the Value parameter when adding members of this type.
             
            </summary>
        </member>
        <member name="P:AddMember.Value1AndValue2AreNotBothNull">
            <summary>
              Looks up a localized string similar to 
               Both Value and SecondValue parameters should not be null for a member of type "{0}". Specify a non-null value for one of the two parameters.
             
            </summary>
        </member>
        <member name="P:AddMember.MemberAlreadyExists">
            <summary>
              Looks up a localized string similar to 
               Cannot add a member with the name "{0}" because a member with that name already exists. To overwrite the member anyway, add the Force parameter to your command.
             
            </summary>
        </member>
        <member name="P:AddMember.CannotRemoveTypeDataMember">
            <summary>
              Looks up a localized string similar to 
               Cannot force the member with name "{0}" and type "{1}" to be added. A member with that name and type already exists, and the existing member is not an instance extension.
             
            </summary>
        </member>
        <member name="P:AddMember.AliasReferenceShouldNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to 
               The member referenced by this alias should not be null or empty.
             
            </summary>
        </member>
        <member name="P:AddMember.Value1ShouldNotBeNull">
            <summary>
              Looks up a localized string similar to 
               The Value parameter should not be null for a member of type "{0}". Specify a non-null value for the Value parameter when adding members of this type.
             
            </summary>
        </member>
        <member name="P:AddMember.Value2ShouldNotBeNull">
            <summary>
              Looks up a localized string similar to 
               The SecondValue parameter should not be null for a member of type "{0}". Specify a non-null value for the SecondValue parameter when adding members of this type.
             
            </summary>
        </member>
        <member name="P:AddMember.InvalidValueForNotePropertyName">
            <summary>
              Looks up a localized string similar to 
               The parameter NotePropertyName cannot take values that could be converted to the type {0}. To define the name of a member with those values, use Add-Member, and specify the member type.
             
            </summary>
        </member>
        <member name="P:AddMember.NotePropertyNameShouldNotBeNull">
            <summary>
              Looks up a localized string similar to 
               The name for a NoteProperty member should not be null or an empty string.
             
            </summary>
        </member>
        <member name="P:AddMember.TypeNameShouldNotBeEmpty">
            <summary>
              Looks up a localized string similar to 
               The TypeName parameter should not be null, empty, or contain only white spaces.
             
            </summary>
        </member>
        <member name="T:AddTypeStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:AddTypeStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:AddTypeStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AddTypeStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AddTypeStrings.AlreadyCompiledandLoaded">
            <summary>
              Looks up a localized string similar to 
               The source code was already compiled and loaded.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.MethodDefinitionNotPublic">
            <summary>
              Looks up a localized string similar to 
               The generated type defines no public methods or properties.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.TypeDefinitionNotPublic">
            <summary>
              Looks up a localized string similar to 
               The generated type is not public.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.FromMemberNotSupported">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The -MemberDefinition parameter is not supported for this language.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.FileExtensionNotSupported">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The "{0}" extension is not supported.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.MultipleExtensionsNotSupported">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. Input files must all have the same file extension.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.LanguageAndProviderSpecified">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. Specify only the Language or CodeDomProvider parameters.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.AmbiguousAssemblyName">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The assembly name {0} matches both {1} and {2}.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.AssemblyNotFound">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The assembly '{0}' could not be found.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.TypeAlreadyExists">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The type name '{0}' already exists.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.OutputAssemblyDidNotResolve">
            <summary>
              Looks up a localized string similar to 
               Cannot set output assembly. The path {0} did not resolve to a single file.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.CompilerErrors">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. Compilation errors occurred.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.AssemblyLoadErrors">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. One or more required assemblies are missing.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.OutputTypeRequiresOutputAssembly">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. The OutputType parameter requires that the OutputAssembly parameter be specified.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.CannotDefineNewType">
            <summary>
              Looks up a localized string similar to 
               Cannot add type. Definition of new types is not supported in this language mode.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.ReferenceAssemblyIgnored">
            <summary>
              Looks up a localized string similar to 
               The specified reference assembly '{0}' is unnecessary and ignored.
             
            </summary>
        </member>
        <member name="P:AddTypeStrings.AssemblyTypeNotSupported">
            <summary>
              Looks up a localized string similar to 
               Both the assembly types 'ConsoleApplication' and 'WindowsApplication' are not currently supported.
             
            </summary>
        </member>
        <member name="T:AliasCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:AliasCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:AliasCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AliasCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AliasCommandStrings.SetAliasAction">
            <summary>
              Looks up a localized string similar to 
               Set Alias
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.SetAliasTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Value: {1}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.NewAliasAction">
            <summary>
              Looks up a localized string similar to 
               New Alias
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.NewAliasTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Value: {1}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasAction">
            <summary>
              Looks up a localized string similar to 
               Import Alias
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Value: {1}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasToFileSystemOnly">
            <summary>
              Looks up a localized string similar to 
               Cannot export the aliases because path '{0}' referred to a '{1}' provider path. Change the Path parameter to a file system path.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasPathResolvedToMultiple">
            <summary>
              Looks up a localized string similar to 
               Cannot export the aliases because path '{0}' contains wildcard characters that resolved to multiple paths. Aliases can be exported to only one file. Change the value of the Path parameter to a path that resolves to a single file.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasFileOpenFailed">
            <summary>
              Looks up a localized string similar to 
               Cannot open file {0} to export the alias. {1}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasHeaderTitle">
            <summary>
              Looks up a localized string similar to 
               Alias File
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasHeaderUser">
            <summary>
              Looks up a localized string similar to 
               Exported by : {0}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasHeaderDate">
            <summary>
              Looks up a localized string similar to 
               Date/Time : {0:F}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ExportAliasHeaderMachine">
            <summary>
              Looks up a localized string similar to 
               Computer : {0}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasFromFileSystemOnly">
            <summary>
              Looks up a localized string similar to 
               Cannot import the alias because the specified path '{0}' referred to a '{1}' provider path. Change the value of the Path parameter to a file system path.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasPathResolvedToMultiple">
            <summary>
              Looks up a localized string similar to 
               Cannot import alias because path '{0}' contains wildcard characters that resolve to multiple paths. Aliases can be imported from only one file. Change the value of the Path parameter to a path that resolves to a single file.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasFileOpenFailed">
            <summary>
              Looks up a localized string similar to 
               Cannot open file {0} to import the alias. {1}
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasFileInvalidFormat">
            <summary>
              Looks up a localized string similar to 
               Cannot import an alias. Line number {1} in the file '{0}' is not a properly-formatted, comma-separated values (CSV) line for aliases. Change the line to contain four values separated by commas. If the value text itself contains a comma, then the value must be contained in quotation marks.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.ImportAliasOptionsError">
            <summary>
              Looks up a localized string similar to 
               Cannot import the alias because line number {1} in the file '{0}' contains an option that is not recognized for aliases. Change the file to contain valid options.
             
            </summary>
        </member>
        <member name="P:AliasCommandStrings.NoAliasFound">
            <summary>
              Looks up a localized string similar to 
               This command cannot find a matching alias because an alias with the {0} '{1}' does not exist.
             
            </summary>
        </member>
        <member name="T:ConvertFromStringData">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ConvertFromStringData.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ConvertFromStringData.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConvertFromStringData.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConvertFromStringData.InvalidDataLine">
            <summary>
              Looks up a localized string similar to 
               Data line '{0}' is not in 'name=value' format. 
             
            </summary>
        </member>
        <member name="P:ConvertFromStringData.DataItemAlreadyDefined">
            <summary>
              Looks up a localized string similar to 
               Data item '{1}' in line '{0}' is already defined. 
             
            </summary>
        </member>
        <member name="T:ConvertHTMLStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ConvertHTMLStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ConvertHTMLStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConvertHTMLStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConvertHTMLStrings.MetaPropertyNotFound">
            <summary>
              Looks up a localized string similar to 
               Accepted meta properties are content-type, default-style, application-name, author, description, generator, keywords, x-ua-compatible, and viewport. The meta pair: {0} and {1} may not function correctly.
             
            </summary>
        </member>
        <member name="T:ConvertMarkdownStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ConvertMarkdownStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ConvertMarkdownStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.InvalidInputObjectType">
            <summary>
              Looks up a localized string similar to 
               The type of the input object '{0}' is invalid.
             
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.InputFileNotFound">
            <summary>
              Looks up a localized string similar to 
               The file is not found: '{0}'.
             
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.FileSystemPathsOnly">
            <summary>
              Looks up a localized string similar to 
               Only FileSystem Provider paths are supported. The file path is not supported: '{0}'.
             
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.MarkdownInfoInvalid">
            <summary>
              Looks up a localized string similar to 
               The property {0} of the given object is null or empty.
             
            </summary>
        </member>
        <member name="P:ConvertMarkdownStrings.InvalidParameterSet">
            <summary>
              Looks up a localized string similar to 
               Invalid parameter set name: {0}.
             
            </summary>
        </member>
        <member name="T:CsvCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:CsvCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:CsvCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CsvCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CsvCommandStrings.CannotAppendCsvWithMismatchedPropertyNames">
             <summary>
               Looks up a localized string similar to 
                Cannot append CSV content to the following file: {1}. The appended object does not have a property that corresponds to the following column: {0}. To continue with mismatched properties, add the -Force parameter, and then retry the command.
                {0} is a placeholder for property name (i.e. ProcessId)
                    {1} is a placeholder for filename (i.e. c:\users\lukasza\foo.csv)
            
                    {StrContains="Force"}
            
                    Reviewed by TArcher on 2010-06-29.
                
              
             </summary>
        </member>
        <member name="P:CsvCommandStrings.CannotSpecifyQuoteFieldsAndUseQuotes">
            <summary>
              Looks up a localized string similar to 
               You must specify either the -UseQuotes or -QuoteFields parameters, but not both.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.CannotSpecifyIncludeTypeInformationAndNoTypeInformation">
            <summary>
              Looks up a localized string similar to 
               You must specify either the -IncludeTypeInformation or -NoTypeInformation parameters, but not both.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.CannotSpecifyPathAndLiteralPath">
            <summary>
              Looks up a localized string similar to 
               You must specify either the -Path or -LiteralPath parameters, but not both.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.UseDefaultNameForUnspecifiedHeader">
            <summary>
              Looks up a localized string similar to 
               One or more headers were not specified. Default names starting with "H" have been used in place of any missing headers.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.FileNameIsAMandatoryParameter">
            <summary>
              Looks up a localized string similar to 
               FileName is a mandatory parameter.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenAppending">
            <summary>
              Looks up a localized string similar to 
               ReconcilePreexistingPropertyNames method should only get called when appending.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenPreexistingPropertyNamesHaveBeenReadSuccessfully">
            <summary>
              Looks up a localized string similar to 
               ReconcilePreexistingPropertyNames method should only get called when preexisting property names have been read successfully.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.BuildPropertyNamesMethodShouldBeCalledOnlyOncePerCmdletInstance">
            <summary>
              Looks up a localized string similar to 
               BuildPropertyNames method should be called only once per cmdlet instance.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.TypeHierarchyShouldNotHaveNullValues">
            <summary>
              Looks up a localized string similar to 
               Type hierarchy should not have null values.
             
            </summary>
        </member>
        <member name="P:CsvCommandStrings.EOFIsReached">
            <summary>
              Looks up a localized string similar to 
               EOF is reached.
             
            </summary>
        </member>
        <member name="T:Debugger">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:Debugger.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:Debugger.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Debugger.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Debugger.LineLessThanOne">
            <summary>
              Looks up a localized string similar to 
               Line cannot be less than 1.
             
            </summary>
        </member>
        <member name="P:Debugger.BreakpointIdNotFound">
            <summary>
              Looks up a localized string similar to 
               There is no breakpoint with ID '{0}'.
             
            </summary>
        </member>
        <member name="P:Debugger.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to 
               File '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:Debugger.WrongExtension">
            <summary>
              Looks up a localized string similar to 
               Cannot set breakpoint on file '{0}'; only *.ps1 and *.psm1 files are valid.
             
            </summary>
        </member>
        <member name="P:Debugger.RemoteDebuggerNotSupported">
            <summary>
              Looks up a localized string similar to 
               Debugging is not supported on remote sessions.
             
            </summary>
        </member>
        <member name="P:Debugger.CannotSetBreakpointInconsistentLanguageMode">
            <summary>
              Looks up a localized string similar to 
               Cannot set breakpoint. The language mode for this session is incompatible with the system-wide language mode.
             
            </summary>
        </member>
        <member name="P:Debugger.RemoteDebuggerNotSupportedInHost">
            <summary>
              Looks up a localized string similar to 
               Breakpoints cannot be set in the remote session because remote debugging is not supported by the current host.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingCannotDebugDefaultRunspace">
            <summary>
              Looks up a localized string similar to 
               You cannot debug the default host Runspace using this cmdlet. To debug the default Runspace use the normal debugging commands from the host.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingNoHostRunspaceOrDebugger">
            <summary>
              Looks up a localized string similar to 
               Cannot debug Runspace. The host has no debugger. Try debugging the Runspace inside the PowerShell console or with Visual Studio Code, both of which have built-in debuggers.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingNoHost">
            <summary>
              Looks up a localized string similar to 
               Cannot debug Runspace. There is no host or host UI. The debugger requires a host and host UI for debugging.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingTooManyRunspacesFound">
            <summary>
              Looks up a localized string similar to 
               More than one Runspace was found. Only one Runspace can be debugged at a time.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingEndSession">
            <summary>
              Looks up a localized string similar to 
               To end the debugging session type the 'Detach' command at the debugger prompt, or type 'Ctrl+C' otherwise.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingScriptCompleted">
            <summary>
              Looks up a localized string similar to 
               Command or script completed.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingStarted">
            <summary>
              Looks up a localized string similar to 
               Debugging Runspace: {0}
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceOptionInvalidRunspaceState">
            <summary>
              Looks up a localized string similar to 
               Cannot set debug options on Runspace {0} because it is not in the Opened state.
             
            </summary>
        </member>
        <member name="P:Debugger.PersistDebugPreferenceFailure">
            <summary>
              Looks up a localized string similar to 
               Failed to persist debug options for Process {0}.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceOptionNoDebugger">
            <summary>
              Looks up a localized string similar to 
               No debugger was found for Runspace {0}.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceDebuggingNoRunspaceFound">
            <summary>
              Looks up a localized string similar to 
               No Runspace was found.
             
            </summary>
        </member>
        <member name="P:Debugger.DebugBreakMessage">
            <summary>
              Looks up a localized string similar to 
               Wait-Debugger called on line {0} in {1}.
             
            </summary>
        </member>
        <member name="P:Debugger.RunspaceInstanceIdNotFound">
            <summary>
              Looks up a localized string similar to 
               A breakpoint associated with another runspace cannot be updated because there is no runspace with instance ID '{0}'.
             
            </summary>
        </member>
        <member name="T:EventingStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:EventingStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:EventingStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EventingStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EventingStrings.SourceIdentifierNotFound">
            <summary>
              Looks up a localized string similar to 
               Event with source identifier '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:EventingStrings.EventIdentifierNotFound">
            <summary>
              Looks up a localized string similar to 
               Event with identifier '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:EventingStrings.EventSubscriptionSourceNotFound">
            <summary>
              Looks up a localized string similar to 
               Event subscription with source identifier '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:EventingStrings.EventSubscriptionNotFound">
            <summary>
              Looks up a localized string similar to 
               Event subscription with identifier '{0}' does not exist.
             
            </summary>
        </member>
        <member name="P:EventingStrings.EventSubscription">
            <summary>
              Looks up a localized string similar to 
               Event subscription '{0}'
             
            </summary>
        </member>
        <member name="P:EventingStrings.EventResource">
            <summary>
              Looks up a localized string similar to 
               Event '{0}'
             
            </summary>
        </member>
        <member name="P:EventingStrings.ActionMandatoryForLocal">
            <summary>
              Looks up a localized string similar to 
               Action must be specified for non-forwarded events.
             
            </summary>
        </member>
        <member name="P:EventingStrings.Unsubscribe">
            <summary>
              Looks up a localized string similar to 
               Unsubscribe
             
            </summary>
        </member>
        <member name="P:EventingStrings.Remove">
            <summary>
              Looks up a localized string similar to 
               Remove
             
            </summary>
        </member>
        <member name="T:FormatAndOut_out_gridview">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:FormatAndOut_out_gridview.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.DataNotQualifiedForGridView">
            <summary>
              Looks up a localized string similar to 
               The data format is not supported by Out-GridView.
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.RestartPowerShell">
            <summary>
              Looks up a localized string similar to 
               Microsoft .NET Framework 4.5 was installed while one or more PowerShell sessions were running. To use the {0} cmdlet, close all PowerShell windows, and then open a new PowerShell window.
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.TypeColumnName">
            <summary>
              Looks up a localized string similar to 
               Type
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.ValueColumnName">
            <summary>
              Looks up a localized string similar to 
               Value
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.IndexColumnName">
            <summary>
              Looks up a localized string similar to 
               Index
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.CommandNotFound">
            <summary>
              Looks up a localized string similar to 
               A command named '{0}' was not found.
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.MoreThanOneCommand">
            <summary>
              Looks up a localized string similar to 
               More than one command named '{0}' was found. Start '{1}' with no parameters, and then type '{0}' to filter the results.
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.CannotWriteToConsoleInputBuffer">
            <summary>
              Looks up a localized string similar to 
               Cannot write to console input buffer.
             
            </summary>
        </member>
        <member name="P:FormatAndOut_out_gridview.PropertyValidate">
             <summary>
               Looks up a localized string similar to 
                {0} should be smaller than {1}.
                {0} is the property "Height"
            {1} is the maximum allowed value for the height property.
              
             </summary>
        </member>
        <member name="T:GetMember">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:GetMember.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:GetMember.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GetMember.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GetMember.NoObjectSpecified">
            <summary>
              Looks up a localized string similar to 
               You must specify an object for the Get-Member cmdlet.
             
            </summary>
        </member>
        <member name="T:GetRandomCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:GetRandomCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:GetRandomCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GetRandomCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GetRandomCommandStrings.MaxMustBeGreaterThanZeroApi">
            <summary>
              Looks up a localized string similar to 
               'maxValue' must be greater than zero.
             
            </summary>
        </member>
        <member name="P:GetRandomCommandStrings.MinGreaterThanOrEqualMax">
            <summary>
              Looks up a localized string similar to 
               The Minimum value ({0}) cannot be greater than or equal to the Maximum value ({1}).
             
            </summary>
        </member>
        <member name="P:GetRandomCommandStrings.MinGreaterThanOrEqualMaxApi">
            <summary>
              Looks up a localized string similar to 
               'minValue' cannot be greater than maxValue.
             
            </summary>
        </member>
        <member name="T:GetUptimeStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:GetUptimeStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:GetUptimeStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GetUptimeStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GetUptimeStrings.GetUptimePlatformIsNotSupported">
            <summary>
              Looks up a localized string similar to 
               "The platform is not supported (System.Diagnostics.Stopwatch.IsHighResolution is false)."
             
            </summary>
        </member>
        <member name="T:HostStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:HostStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:HostStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HostStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HostStrings.InvalidColorErrorTemplate">
            <summary>
              Looks up a localized string similar to 
               Cannot process the color because {0} is not a valid color.
             
            </summary>
        </member>
        <member name="P:HostStrings.NoStringToEvalulateError">
            <summary>
              Looks up a localized string similar to 
               Cannot evaluate the error because a string is not specified.
             
            </summary>
        </member>
        <member name="T:HttpCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:HttpCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:HttpCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HttpCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HttpCommandStrings.EmptyUri">
            <summary>
              Looks up a localized string similar to 
               The command cannot run because "{0}" is empty or blank. Specify a value, and then run the command again.
             
            </summary>
        </member>
        <member name="P:HttpCommandStrings.Error">
            <summary>
              Looks up a localized string similar to 
               This command cannot be completed due to the following error: '{0}'.
             
            </summary>
        </member>
        <member name="T:ImplicitRemotingStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ImplicitRemotingStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorMalformedDataFromRemoteCommand">
            <summary>
              Looks up a localized string similar to 
               Data returned by the remote {0} command is not in the expected format.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorRequiredRemoteCommandNotFound">
            <summary>
              Looks up a localized string similar to 
               The {0} cmdlet requires the following commands in the remote session: Get-Command, Get-FormatData, and Select-Object. The following commands are used, but optional: Get-Help, and Measure-Object. Verify that the remote session includes the required commands, and then try again.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorFromRemoteCommand">
            <summary>
              Looks up a localized string similar to 
               Running the {0} command in a remote session reported the following error: {1}.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorNoResultsFromRemoteEnd">
            <summary>
              Looks up a localized string similar to 
               Running the {0} command in a remote session returned no results.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorCannotCreateTemporaryFile">
            <summary>
              Looks up a localized string similar to 
               Cannot create temporary file for implicit remoting module.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorNoRunspaceForThisModule">
            <summary>
              Looks up a localized string similar to 
               No session has been associated with this implicit remoting module.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorCouldntResolveAlias">
            <summary>
              Looks up a localized string similar to 
               Could not resolve remote alias '{0}'.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedNonRequestedCommand">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the '{0}' command, because the name did not match the value of the Name parameter.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedNonRequestedTypeDefinition">
            <summary>
              Looks up a localized string similar to 
               Extended type definition has been skipped for the '{0}' type because its name did not match the value of the FormatTypeName parameter.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedUnsafeCommandName">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the '{0}' command, because PowerShell could not verify the safety of the command name.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedUnsafeParameterName">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the '{0}' command, because PowerShell could not verify the safety of a parameter name: '{1}'.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedUnsafeParameterSetName">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the '{0}' command, because PowerShell could not verify the safety of a parameter set name: '{1}'.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorSkippedUnsafeAliasName">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the '{0}' command, because PowerShell could not verify the safety of a parameter alias name: '{1}'.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorCommandSkippedBecauseOfShadowing">
            <summary>
              Looks up a localized string similar to 
               Proxy creation has been skipped for the following command: '{0}', because it would shadow an existing local command.  Use the AllowClobber parameter if you want to shadow existing local commands.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ErrorNoCommandsImportedBecauseOfSkipping">
            <summary>
              Looks up a localized string similar to 
               No command proxies have been created, because all of the requested remote commands would shadow existing local commands.  Use the AllowClobber parameter if you want to shadow existing local commands.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProxyModuleDescription">
            <summary>
              Looks up a localized string similar to 
               Implicit remoting for {0}
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.EventSourceIdentifier">
            <summary>
              Looks up a localized string similar to 
               Implicit remoting event (session id: {0}; event handler id: {1})
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ModuleHeaderTitle">
            <summary>
              Looks up a localized string similar to 
               Implicit remoting module
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ModuleHeaderDate">
            <summary>
              Looks up a localized string similar to 
               generated on {0}
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ModuleHeaderCommand">
            <summary>
              Looks up a localized string similar to 
               by {0} cmdlet
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ModuleHeaderCommandLine">
            <summary>
              Looks up a localized string similar to 
               Invoked with the following command line: {0}
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ModuleHeaderRunspaceOverrideParameter">
            <summary>
              Looks up a localized string similar to 
               Optional parameter that can be used to specify the session on which this proxy module works
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.CreateNewRunspaceMessageTemplate">
            <summary>
              Looks up a localized string similar to 
               Creating a new session for implicit remoting of "{{0}}" command...
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProxyRunspaceNameTemplate">
            <summary>
              Looks up a localized string similar to 
               Session for implicit remoting module at {{0}}
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressActivity">
            <summary>
              Looks up a localized string similar to 
               Creating implicit remoting module ...
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusGetCommandStart">
            <summary>
              Looks up a localized string similar to 
               Getting command information from remote session ...
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusGetCommandProgress">
            <summary>
              Looks up a localized string similar to 
               Getting command information from remote session ... {0} commands received
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusGetFormatDataStart">
            <summary>
              Looks up a localized string similar to 
               Getting formatting and output information from remote session ...
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusGetFormatDataProgress">
            <summary>
              Looks up a localized string similar to 
               Getting formatting and output information from remote session ... {0} objects received
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusProxyGeneration">
            <summary>
              Looks up a localized string similar to 
               Generating a proxy command for '{0}' ...
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProgressStatusCompleted">
            <summary>
              Looks up a localized string similar to 
               Completed.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.CredentialRequestTitle">
            <summary>
              Looks up a localized string similar to 
               PowerShell Credential Request
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.CredentialRequestBody">
            <summary>
              Looks up a localized string similar to 
               Enter your credentials for {0}.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.ProxyCredentialRequestBody">
            <summary>
              Looks up a localized string similar to 
               Enter the HTTP proxy credentials that are used for the following connection: {0}
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.WarningMismatchedImplicitRemotingHash">
            <summary>
              Looks up a localized string similar to 
               Commands that are available in the new remote session are different than those available when the implicit remoting module was created.  Consider creating the module again by using the Export-PSSession cmdlet.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.CertificateNeeded">
            <summary>
              Looks up a localized string similar to 
               Files cannot be loaded because running scripts is disabled on this system. Provide a valid certificate with which to sign the files.
             
            </summary>
        </member>
        <member name="P:ImplicitRemotingStrings.InvalidSigningOperation">
            <summary>
              Looks up a localized string similar to 
               The file {0} could not be signed.
             
            </summary>
        </member>
        <member name="T:ImportLocalizedDataStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:ImportLocalizedDataStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.FileNotExist">
            <summary>
              Looks up a localized string similar to 
               The data file '{0}' cannot be found. 
             
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.NotCalledFromAScriptFile">
            <summary>
              Looks up a localized string similar to 
               The FileName parameter was not specified. The FileName parameter is required when Import-LocalizedData is not called from a script file.
             
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.ErrorOpeningFile">
             <summary>
               Looks up a localized string similar to 
                The following error occurred while PowerShell was opening the data file '{0}':
            {1}.
              
             </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.ErrorLoadingDataFile">
             <summary>
               Looks up a localized string similar to 
                The following error occurred while PowerShell was loading the '{0}' script data file:
            {1}.
              
             </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.FileNameParameterCannotHavePath">
            <summary>
              Looks up a localized string similar to 
               The argument for the FileName parameter should not contain a path.
             
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.CannotFindPsd1File">
            <summary>
              Looks up a localized string similar to 
               Cannot find the PowerShell data file '{0}' in directory '{1}', or in any parent culture directories.
             
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.CannotDefineSupportedCommand">
            <summary>
              Looks up a localized string similar to 
               Cannot import localized data. The definition of additional supported commands is not allowed in this language mode.
             
            </summary>
        </member>
        <member name="P:ImportLocalizedDataStrings.IncorrectVariableName">
            <summary>
              Looks up a localized string similar to 
               The BindingVariable name '{0}' is invalid.
             
            </summary>
        </member>
        <member name="T:MatchStringStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:MatchStringStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:MatchStringStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MatchStringStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MatchStringStrings.FileOpenError">
            <summary>
              Looks up a localized string similar to 
               Cannot open the file because the current provider ({0}) cannot open files.
             
            </summary>
        </member>
        <member name="P:MatchStringStrings.FileReadError">
            <summary>
              Looks up a localized string similar to 
               The file {0} cannot be read: {1}
             
            </summary>
        </member>
        <member name="P:MatchStringStrings.FilterContextWarning">
            <summary>
              Looks up a localized string similar to 
               The option "Context" is not valid when searching results that are piped from Select-String output.
             
            </summary>
        </member>
        <member name="P:MatchStringStrings.InvalidRegex">
            <summary>
              Looks up a localized string similar to 
               The string {0} is not a valid regular expression: {1}
             
            </summary>
        </member>
        <member name="P:MatchStringStrings.CannotSpecifyCultureWithoutSimpleMatch">
            <summary>
              Looks up a localized string similar to 
               You must specify -Culture parameter only with -SimpleMatch parameter.
             
            </summary>
        </member>
        <member name="T:MeasureObjectStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:MeasureObjectStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:MeasureObjectStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MeasureObjectStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MeasureObjectStrings.PropertyNotFound">
            <summary>
              Looks up a localized string similar to 
               The property "{0}" cannot be found in the input for any objects.
             
            </summary>
        </member>
        <member name="P:MeasureObjectStrings.NonNumericProperty">
            <summary>
              Looks up a localized string similar to 
               Property "{0}" is not numeric.
             
            </summary>
        </member>
        <member name="P:MeasureObjectStrings.NonNumericInputObject">
            <summary>
              Looks up a localized string similar to 
               Input object "{0}" is not numeric.
             
            </summary>
        </member>
        <member name="T:NewObjectStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:NewObjectStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:NewObjectStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NewObjectStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NewObjectStrings.CannotFindAppropriateCtor">
            <summary>
              Looks up a localized string similar to 
               A constructor was not found. Cannot find an appropriate constructor for type {0}.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.TypeNotFound">
            <summary>
              Looks up a localized string similar to 
               Cannot find type [{0}]: verify that the assembly containing this type is loaded.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.CannotLoadComObjectType">
            <summary>
              Looks up a localized string similar to 
               Cannot load COM type {0}.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.ComInteropLoaded">
            <summary>
              Looks up a localized string similar to 
               The object written to the pipeline is an instance of the type "{0}" from the component's primary interoperability assembly. If this type exposes different members than the IDispatch members, scripts that are written to work with this object might not work if the primary interoperability assembly is not installed.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.MemberNotFound">
            <summary>
              Looks up a localized string similar to 
               The member "{1}" was not found for the specified {2} object.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.InvalidValue">
            <summary>
              Looks up a localized string similar to 
               The value supplied is not valid, or the property is read-only. Change the value, and then try again.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.CannotInstantiateWinRTType">
            <summary>
              Looks up a localized string similar to 
               Creating instances of attribute and delegated Windows RT types is not supported.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.CannotInstantiateBoxedByRefLikeType">
            <summary>
              Looks up a localized string similar to 
               Cannot create instances of the ByRef-like type "{0}". ByRef-like types are not supported in PowerShell.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.CannotCreateTypeConstrainedLanguage">
            <summary>
              Looks up a localized string similar to 
               Cannot create type. Only core types are supported in this language mode.
             
            </summary>
        </member>
        <member name="P:NewObjectStrings.ApartmentNotSupported">
            <summary>
              Looks up a localized string similar to 
               {0} Please note that Single-Threaded Apartment is not supported in PowerShell.
             
            </summary>
        </member>
        <member name="T:OutPrinterDisplayStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:OutPrinterDisplayStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:OutPrinterDisplayStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OutPrinterDisplayStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OutPrinterDisplayStrings.DefaultPrintFontName">
            <summary>
              Looks up a localized string similar to 
               Courier New
               {StringCategory="Font Name"}
             
            </summary>
        </member>
        <member name="T:SelectObjectStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:SelectObjectStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:SelectObjectStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SelectObjectStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SelectObjectStrings.RenamingMultipleResults">
            <summary>
              Looks up a localized string similar to 
               Cannot rename multiple results.
             
            </summary>
        </member>
        <member name="P:SelectObjectStrings.PropertyNotFound">
            <summary>
              Looks up a localized string similar to 
               Property "{0}" cannot be found.
             
            </summary>
        </member>
        <member name="P:SelectObjectStrings.MutlipleExpandProperties">
            <summary>
              Looks up a localized string similar to 
               Multiple properties cannot be expanded.
             
            </summary>
        </member>
        <member name="P:SelectObjectStrings.AlreadyExistingProperty">
            <summary>
              Looks up a localized string similar to 
               The property cannot be processed because the property "{0}" already exists.
             
            </summary>
        </member>
        <member name="P:SelectObjectStrings.EmptyScriptBlockAndNoName">
            <summary>
              Looks up a localized string similar to 
               A property is an empty script block and does not provide a name.
             
            </summary>
        </member>
        <member name="T:SendMailMessageStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:SendMailMessageStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:SendMailMessageStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SendMailMessageStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SendMailMessageStrings.HostNameValue">
            <summary>
              Looks up a localized string similar to 
               The email cannot be sent because no SMTP server was specified. You must specify an SMTP server by using either the SmtpServer parameter or the $PSEmailServer variable.
             
            </summary>
        </member>
        <member name="T:SortObjectStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:SortObjectStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:SortObjectStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SortObjectStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SortObjectStrings.PropertyNotFound">
            <summary>
              Looks up a localized string similar to 
               "Sort-Object" - "{0}" cannot be found in "InputObject".
             
            </summary>
        </member>
        <member name="T:TestJsonCmdletStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:TestJsonCmdletStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:TestJsonCmdletStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestJsonCmdletStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TestJsonCmdletStrings.InvalidJsonSchema">
            <summary>
              Looks up a localized string similar to 
               Cannot parse the JSON schema.
             
            </summary>
        </member>
        <member name="P:TestJsonCmdletStrings.InvalidJson">
            <summary>
              Looks up a localized string similar to 
               Cannot parse the JSON.
             
            </summary>
        </member>
        <member name="P:TestJsonCmdletStrings.InvalidJsonAgainstSchema">
            <summary>
              Looks up a localized string similar to 
               The JSON is not valid with the schema.
             
            </summary>
        </member>
        <member name="P:TestJsonCmdletStrings.JsonSchemaFileOpenFailure">
            <summary>
              Looks up a localized string similar to 
               Can not open JSON schema file: {0}
             
            </summary>
        </member>
        <member name="T:TraceCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:TraceCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:TraceCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TraceCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TraceCommandStrings.FileListenerNotFound">
            <summary>
              Looks up a localized string similar to 
               A file listener with name '{0}' was not found.
             
            </summary>
        </member>
        <member name="P:TraceCommandStrings.TraceFileOnly">
            <summary>
              Looks up a localized string similar to 
               Trace output can only be written to the file system. The path '{0}' referred to a '{1}' provider path.
             
            </summary>
        </member>
        <member name="P:TraceCommandStrings.TraceSingleFileOnly">
            <summary>
              Looks up a localized string similar to 
               Trace output can only be written to a single file. The path '{0}' resolved to more than one file.
             
            </summary>
        </member>
        <member name="T:UnblockFileStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:UnblockFileStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:UnblockFileStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UnblockFileStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UnblockFileStrings.LinuxNotSupported">
            <summary>
              Looks up a localized string similar to 
               The cmdlet does not support Linux.
             
            </summary>
        </member>
        <member name="P:UnblockFileStrings.UnblockError">
            <summary>
              Looks up a localized string similar to 
               There was an error unblocking {0}.
             
            </summary>
        </member>
        <member name="T:UpdateDataStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:UpdateDataStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:UpdateDataStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UpdateDataStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateData_WrongProviderError">
            <summary>
              Looks up a localized string similar to 
               Cannot open the file because the current provider is "{0}", and this command requires a file.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateData_WrongExtension">
            <summary>
              Looks up a localized string similar to 
               Cannot read the file "{0}"  because it does not have the file name extension "{1}".
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateTypeDataAction">
            <summary>
              Looks up a localized string similar to 
               Update TypeData
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateFormatDataAction">
            <summary>
              Looks up a localized string similar to 
               Update FormatData
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateTarget">
            <summary>
              Looks up a localized string similar to 
               FileName: {0}
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.CannotUpdateMemberType">
            <summary>
              Looks up a localized string similar to 
               Cannot update a member with type "{0}". Specify a different type for the MemberType parameter.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.SerializationDepthNegative">
            <summary>
              Looks up a localized string similar to 
               The value of the SerializationDepth property should not be negative.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.ShouldBeSpecified">
            <summary>
              Looks up a localized string similar to 
               The {0} parameter is required for the type "{1}". Please specify the {0} parameter.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.ShouldNotBeNull">
            <summary>
              Looks up a localized string similar to 
               The {0} parameter should not be null or an empty string for a member of type "{1}". Specify a non-null value for the {0} parameter when updating this member type.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.ShouldNotBeSpecified">
            <summary>
              Looks up a localized string similar to 
               The {0} parameter is not necessary for a member of type "{1}", and should not be specified. Do not specify the {0} parameter when updating this member type.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.TypeDataEmpty">
            <summary>
              Looks up a localized string similar to 
               No member is specified for the update on type "{0}".
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.TargetTypeNameEmpty">
            <summary>
              Looks up a localized string similar to 
               The target type name should not be null, empty, or contain only white spaces.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.Value1AndValue2AreNotBothNull">
            <summary>
              Looks up a localized string similar to 
               The Value and SecondValue parameters should not both be null for a member of type "{0}". Specify a non-null value for one of the two parameters.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.WrongMemberCount">
            <summary>
              Looks up a localized string similar to 
               Only one member type can be specified. The member types specified are: "{0}". Update the type with only one member type.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.MemberTypeIsMissing">
            <summary>
              Looks up a localized string similar to 
               The MemberName, Value, and SecondValue parameters cannot be specified without the MemberType parameter.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.RemoveTypeDataAction">
            <summary>
              Looks up a localized string similar to 
               Remove TypeData
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.RemoveTypeDataTarget">
            <summary>
              Looks up a localized string similar to 
               Name of the type that will be removed: {0}
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.UpdateTypeDataTarget">
            <summary>
              Looks up a localized string similar to 
               Type to update: {0}
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.RemoveTypeFileAction">
            <summary>
              Looks up a localized string similar to 
               Remove type file
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.TypeFileNotExistsInCurrentSession">
            <summary>
              Looks up a localized string similar to 
               The file {0} is not imported into the current session.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.FormatUpdatesDisabled">
            <summary>
              Looks up a localized string similar to 
               Updating format data is not allowed in this runspace. The 'DisableFormatUpdates' property is set to True when creating the runspace.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.CannotUpdateFormatWithFormatTable">
            <summary>
              Looks up a localized string similar to 
               Cannot update the format data with a FormatTable instance.
             
            </summary>
        </member>
        <member name="P:UpdateDataStrings.CannotUpdateTypeWithTypeTable">
            <summary>
              Looks up a localized string similar to 
               Cannot update the type data with a TypeTable instance.
             
            </summary>
        </member>
        <member name="T:UpdateListStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:UpdateListStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:UpdateListStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UpdateListStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UpdateListStrings.MemberDoesntExist">
            <summary>
              Looks up a localized string similar to 
               The property '{0}' cannot be found on this object
             
            </summary>
        </member>
        <member name="P:UpdateListStrings.MissingPropertyParameter">
            <summary>
              Looks up a localized string similar to 
               You must specify the Property parameter when the InputObject parameter is specified.
             
            </summary>
        </member>
        <member name="P:UpdateListStrings.MissingInputObjectParameter">
            <summary>
              Looks up a localized string similar to 
               You must specify the InputObject parameter when the Property parameter is specified.
             
            </summary>
        </member>
        <member name="T:UtilityCommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:UtilityCommonStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:UtilityCommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.NoMatchFound">
            <summary>
              Looks up a localized string similar to 
               There are no matching results found for {2}.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.Invalidpath">
            <summary>
              Looks up a localized string similar to 
               {2} has one or more exceptions that are not valid.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FileNotFound">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because the file path '{0}' is not valid. Please provide a valid file path and then run the command.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.EmptyCSSUri">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because '{0}' is empty or blank. Please specify CSSUri and then run the command.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FileOpenError">
            <summary>
              Looks up a localized string similar to 
               Cannot open the file because the current provider ({0}) cannot open files.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.SearchXMLPrefixNullError">
            <summary>
              Looks up a localized string similar to 
               This command cannot be run because the prefix value in the Namespace parameter is null. Provide a valid value for the prefix, and then run the command again.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.InvalidOperation">
            <summary>
              Looks up a localized string similar to 
               The objects grouped by this property cannot be expanded because there is a key duplication. Provide a valid value for the property, and then try again.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.NotSupported">
            <summary>
              Looks up a localized string similar to 
               The command is not supported on this operating system.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FileReadError">
            <summary>
              Looks up a localized string similar to 
               The file '{0}' cannot be read: {1}
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FormatHexTypeNotSupported">
            <summary>
              Looks up a localized string similar to 
               Cannot convert input of type '{0}' to hexadecimal. To view the hexadecimal formatting of its string representation, pipe it to the Out-String cmdlet before piping it to Format-Hex.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FormatHexOnlySupportsFileSystemPaths">
            <summary>
              Looks up a localized string similar to 
               The given path '{0}' is not supported. This command only supports the FileSystem Provider paths.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.FormatHexPathPrefix">
            <summary>
              Looks up a localized string similar to 
               Path: 
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.GroupObjectWithHashTable">
            <summary>
              Looks up a localized string similar to 
               The command cannot be run because the AsString parameter requires that you specify the AsHashtable parameter.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.GroupObjectSingleProperty">
            <summary>
              Looks up a localized string similar to 
               The command cannot be run because using the AsHashTable parameter with more than one property requires adding the AsString parameter.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.PathDoesNotExist">
            <summary>
              Looks up a localized string similar to 
               Cannot find path '{0}' because it does not exist.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.PSPrefixReservedInInformationTag">
            <summary>
              Looks up a localized string similar to 
               Cannot use tag '{0}'. The 'PS' prefix is reserved.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.AlgorithmTypeNotSupported">
            <summary>
              Looks up a localized string similar to 
               Algorithm '{0}' is not supported in this system.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.CouldNotParseAsPowerShellDataFile">
            <summary>
              Looks up a localized string similar to 
               The file '{0}' could not be parsed as a PowerShell Data File.
             
            </summary>
        </member>
        <member name="P:UtilityCommonStrings.InvalidSDDL">
            <summary>
              Looks up a localized string similar to 
               Cannot construct a security descriptor from the given SDDL due to the following error: {0}
             
            </summary>
        </member>
        <member name="T:VariableCommandStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:VariableCommandStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:VariableCommandStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VariableCommandStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VariableCommandStrings.SetVariableAction">
            <summary>
              Looks up a localized string similar to 
               Set variable
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.SetVariableTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Value: {1}
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.NewVariableAction">
            <summary>
              Looks up a localized string similar to 
               New variable
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.NewVariableTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0} Value: {1}
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.AddVariableAction">
            <summary>
              Looks up a localized string similar to 
               Add variable
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.AddVariableTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0}
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.RemoveVariableAction">
            <summary>
              Looks up a localized string similar to 
               Remove variable
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.RemoveVariableTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0}
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.ClearVariableAction">
            <summary>
              Looks up a localized string similar to 
               Clear variable
             
            </summary>
        </member>
        <member name="P:VariableCommandStrings.ClearVariableTarget">
            <summary>
              Looks up a localized string similar to 
               Name: {0}
             
            </summary>
        </member>
        <member name="T:WebCmdletStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:WebCmdletStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:WebCmdletStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WebCmdletStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AccessDenied">
            <summary>
              Looks up a localized string similar to 
               Access to the path '{0}' is denied.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AllowUnencryptedAuthenticationRequired">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot protect plain text secrets sent over unencrypted connections. To suppress this warning and send plain text secrets over unencrypted networks, reissue the command specifying the AllowUnencryptedAuthentication parameter.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AuthenticationConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Authentication and UseDefaultCredentials. Authentication does not support Default Credentials. Specify either Authentication or UseDefaultCredentials, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AuthenticationCredentialNotSupplied">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following parameter is not specified: Credential. The supplied Authentication type requires a Credential. Specify Credential, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AuthenticationTokenNotSupplied">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following parameter is not specified: Token. The supplied Authentication type requires a Token. Specify Token, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.AuthenticationTokenConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Credential and Token. Specify either Credential or Token, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.BodyConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Body and InFile. Specify either Body or Infile, then retry.  
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.BodyFormConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Body and Form. Specify either Body or Form, then retry.  
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.FormInFileConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: InFile and Form. Specify either InFile or Form, then retry.  
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ContentTypeException">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the -ContentType parameter is not a valid Content-Type header. Specify a valid Content-Type for -ContentType, then retry. To suppress header validation, supply the -SkipHeaderValidation parameter.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.CredentialConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Credential and UseDefaultCredentials. Specify either Credential or UseDefaultCredentials, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.DirectoryPathSpecified">
            <summary>
              Looks up a localized string similar to 
               Path '{0}' resolves to a directory. Specify a path including a file name, and then retry the command.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.EmptyKeyInJsonString">
            <summary>
              Looks up a localized string similar to 
               The provided JSON includes a property whose name is an empty string, this is only supported using the -AsHashTable switch.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.DuplicateKeysInJsonString">
            <summary>
              Looks up a localized string similar to 
               Cannot convert the JSON string because a dictionary that was converted from the string contains the duplicated key '{0}'.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.KeysWithDifferentCasingInJsonString">
            <summary>
              Looks up a localized string similar to 
               Cannot convert the JSON string because it contains keys with different casing. Please use the -AsHashTable switch instead. The key that was attempted to be added to the existing key '{0}' was '{1}'.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ExtendedProfileRequired">
            <summary>
              Looks up a localized string similar to 
               The ConvertTo-Json and ConvertFrom-Json cmdlets require the installation of the .NET Client Profile, sometimes called the .NET extended profile.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.IEDomNotSupported">
            <summary>
              Looks up a localized string similar to 
               The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. 
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.JsonStringInBadFormat">
            <summary>
              Looks up a localized string similar to 
               The converted JSON string is in bad format.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.MaximumRedirectionCountExceeded">
            <summary>
              Looks up a localized string similar to 
               The maximum redirection count has been exceeded. To increase the number of redirections allowed, supply a higher value to the -MaximumRedirection parameter.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.MultiplePathsResolved">
            <summary>
              Looks up a localized string similar to 
               Path '{0}' can be resolved to multiple paths.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.NonStringKeyInDictionary">
            <summary>
              Looks up a localized string similar to 
               The type '{0}' is not supported for serialization or deserialization of a dictionary. Keys must be strings.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.NoPathResolved">
            <summary>
              Looks up a localized string similar to 
               Path '{0}' cannot be resolved to a file.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.NotFilesystemPath">
            <summary>
              Looks up a localized string similar to 
               Path '{0}' is not a file system path. Please specify the path to a file in the file system.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.OutFileMissing">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following parameter is missing: OutFile. Provide a valid OutFile parameter value when using the {0} parameter, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.OutFileWritingSkipped">
            <summary>
              Looks up a localized string similar to 
               The file will not be re-downloaded because the remote file is the same size as the OutFile: {0}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ProxyCredentialConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: ProxyCredential and ProxyUseDefaultCredentials. Specify either ProxyCredential or ProxyUseDefaultCredentials, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ProxyUriNotSupplied">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following parameter is missing: Proxy. Provide a valid proxy URI for the Proxy parameter when using the ProxyCredential or UseDefaultProxyCredentials parameters, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ReadResponseComplete">
            <summary>
              Looks up a localized string similar to 
               Reading web response completed. (Number of bytes read: {0})
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ReadResponseProgressActivity">
            <summary>
              Looks up a localized string similar to 
               Reading web response
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ReadResponseProgressStatus">
            <summary>
              Looks up a localized string similar to 
               Reading response stream... (Number of bytes read: {0})
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.RequestTimeout">
            <summary>
              Looks up a localized string similar to 
               The operation has timed out.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.SessionConflict">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the following conflicting parameters are specified: Session and SessionVariable. Specify either Session or SessionVariable, then retry.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ThumbprintNotFound">
            <summary>
              Looks up a localized string similar to 
               Unable to retrieve certificates because the thumbprint is not valid. Verify the thumbprint and retry. 
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WriteRequestComplete">
            <summary>
              Looks up a localized string similar to 
               Web request completed. (Number of bytes processed: {0})
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WriteRequestProgressActivity">
            <summary>
              Looks up a localized string similar to 
               Web request status
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WriteRequestProgressStatus">
            <summary>
              Looks up a localized string similar to 
               Number of bytes processed: {0}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.JsonNetModuleRequired">
            <summary>
              Looks up a localized string similar to 
               The ConvertTo-Json and ConvertFrom-Json cmdlets require the 'Json.Net' module. {0}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.PSModuleAutoloadingPreferenceNotEnable">
            <summary>
              Looks up a localized string similar to 
               The cmdlet cannot run because the 'Json.Net' module cannot be loaded. Import the module manually or set the $PSModuleAutoLoadingPreference variable to enable module auto loading. For more information, see 'get-help about_Preference_Variables'.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.CouldNotAutoImportJsonNetModule">
            <summary>
              Looks up a localized string similar to 
               However, the 'Json.Net' module could not be loaded. For more information, run 'Import-Module Json.Net'.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.JsonNetModuleFilesRequired">
            <summary>
              Looks up a localized string similar to 
               Ensure 'Json.Net.psd1' and 'Newtonsoft.Json.dll' are available in a versioned subdirectory of '{0}'.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ReachedMaximumDepthAllowed">
            <summary>
              Looks up a localized string similar to 
               The maximum depth allowed for serialization is {0}.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.JsonDeserializationFailed">
            <summary>
              Looks up a localized string similar to 
               Conversion from JSON failed with error: {0}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.ResponseStatusCodeFailure">
            <summary>
              Looks up a localized string similar to 
               Response status code does not indicate success: {0} ({1}).
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.FollowingRelLinkVerboseMsg">
            <summary>
              Looks up a localized string similar to 
               Following rel link {0}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WebMethodInvocationVerboseMsg">
            <summary>
              Looks up a localized string similar to 
               {0} {1} with {2}-byte payload
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WebMethodResumeFailedVerboseMsg">
            <summary>
              Looks up a localized string similar to 
               The remote server indicated it could not resume downloading. The local file will be overwritten.
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.WebResponseVerboseMsg">
            <summary>
              Looks up a localized string similar to 
               received {0}-byte response of content type {1}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.RetryVerboseMsg">
            <summary>
              Looks up a localized string similar to 
               Retrying after interval of {0} seconds. Status code for previous attempt: {1}
             
            </summary>
        </member>
        <member name="P:WebCmdletStrings.JsonMaxDepthReached">
            <summary>
              Looks up a localized string similar to 
               Resulting JSON is truncated as serialization has exceeded the set depth of {0}.
             
            </summary>
        </member>
        <member name="T:WriteErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:WriteErrorStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:WriteErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WriteErrorStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WriteErrorStrings.WriteErrorException">
            <summary>
              Looks up a localized string similar to 
               "The Write-Error cmdlet reported an error."
             
            </summary>
        </member>
        <member name="T:WriteProgressResourceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:WriteProgressResourceStrings.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:WriteProgressResourceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WriteProgressResourceStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WriteProgressResourceStrings.ActivityParameterHelpMessage">
            <summary>
              Looks up a localized string similar to 
               Text to describe the activity for which progress is being reported.
             
            </summary>
        </member>
        <member name="P:WriteProgressResourceStrings.StatusParameterHelpMessage">
            <summary>
              Looks up a localized string similar to 
               Text to describe the current state of the activity for which progress is being reported.
             
            </summary>
        </member>
        <member name="P:WriteProgressResourceStrings.Processing">
            <summary>
              Looks up a localized string similar to 
               Processing
             
            </summary>
        </member>
    </members>
</doc>
